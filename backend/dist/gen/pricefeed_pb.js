// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file pricefeed.proto (package pluto.pricefeed.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from message pluto.pricefeed.v1.Ticker
 */
export class Ticker extends Message {
    /**
     * @generated from field: string symbol = 1;
     */
    symbol = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "pluto.pricefeed.v1.Ticker";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Ticker().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Ticker().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Ticker().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Ticker, a, b);
    }
}
/**
 * @generated from message pluto.pricefeed.v1.PriceUpdate
 */
export class PriceUpdate extends Message {
    /**
     * @generated from field: string symbol = 1;
     */
    symbol = "";
    /**
     * @generated from field: double price = 2;
     */
    price = 0;
    /**
     * server timestamp ms
     *
     * @generated from field: int64 ts_ms = 3;
     */
    tsMs = protoInt64.zero;
    /**
     * "tradingview:BINANCE"
     *
     * @generated from field: string source = 4;
     */
    source = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "pluto.pricefeed.v1.PriceUpdate";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 3, name: "ts_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new PriceUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceUpdate, a, b);
    }
}
/**
 * @generated from message pluto.pricefeed.v1.Health
 */
export class Health extends Message {
    /**
     * @generated from field: bool browser = 1;
     */
    browser = false;
    /**
     * @generated from field: uint32 pages = 2;
     */
    pages = 0;
    /**
     * @generated from field: repeated string tickers = 3;
     */
    tickers = [];
    /**
     * @generated from field: map<string, uint32> subscribers = 4;
     */
    subscribers = {};
    /**
     * @generated from field: uint32 mem_mb = 5;
     */
    memMb = 0;
    /**
     * @generated from field: uint32 uptime_sec = 6;
     */
    uptimeSec = 0;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "pluto.pricefeed.v1.Health";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "browser", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "pages", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 3, name: "tickers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 4, name: "subscribers", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 13 /* ScalarType.UINT32 */ } },
        { no: 5, name: "mem_mb", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 6, name: "uptime_sec", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Health().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Health().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Health().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Health, a, b);
    }
}
