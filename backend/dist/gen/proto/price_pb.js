// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file proto/price.proto (package price, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
/**
 * @generated from message price.Ticker
 */
export class Ticker extends Message {
    /**
     * @generated from field: string symbol = 1;
     */
    symbol = "";
    /**
     * @generated from field: double price = 2;
     */
    price = 0;
    /**
     * @generated from field: int64 timestamp = 3;
     */
    timestamp = protoInt64.zero;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.Ticker";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Ticker().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Ticker().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Ticker().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Ticker, a, b);
    }
}
/**
 * @generated from message price.SubscribeRequest
 */
export class SubscribeRequest extends Message {
    /**
     * @generated from field: string ticker = 1;
     */
    ticker = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.SubscribeRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SubscribeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribeRequest, a, b);
    }
}
/**
 * @generated from message price.UnsubscribeRequest
 */
export class UnsubscribeRequest extends Message {
    /**
     * @generated from field: string ticker = 1;
     */
    ticker = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.UnsubscribeRequest";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UnsubscribeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsubscribeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsubscribeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsubscribeRequest, a, b);
    }
}
/**
 * @generated from message price.SubscribeResponse
 */
export class SubscribeResponse extends Message {
    /**
     * @generated from field: bool success = 1;
     */
    success = false;
    /**
     * @generated from field: string message = 2;
     */
    message = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.SubscribeResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SubscribeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SubscribeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SubscribeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SubscribeResponse, a, b);
    }
}
/**
 * @generated from message price.UnsubscribeResponse
 */
export class UnsubscribeResponse extends Message {
    /**
     * @generated from field: bool success = 1;
     */
    success = false;
    /**
     * @generated from field: string message = 2;
     */
    message = "";
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.UnsubscribeResponse";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UnsubscribeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnsubscribeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnsubscribeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UnsubscribeResponse, a, b);
    }
}
/**
 * @generated from message price.PriceUpdate
 */
export class PriceUpdate extends Message {
    /**
     * @generated from field: string ticker = 1;
     */
    ticker = "";
    /**
     * @generated from field: double price = 2;
     */
    price = 0;
    /**
     * @generated from field: int64 timestamp = 3;
     */
    timestamp = protoInt64.zero;
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static runtime = proto3;
    static typeName = "price.PriceUpdate";
    static fields = proto3.util.newFieldList(() => [
        { no: 1, name: "ticker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new PriceUpdate().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PriceUpdate().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PriceUpdate().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(PriceUpdate, a, b);
    }
}
