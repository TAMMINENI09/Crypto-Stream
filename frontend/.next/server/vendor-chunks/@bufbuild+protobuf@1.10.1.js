"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@bufbuild+protobuf@1.10.1";
exports.ids = ["vendor-chunks/@bufbuild+protobuf@1.10.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinaryReader: () => (/* binding */ BinaryReader),\n/* harmony export */   BinaryWriter: () => (/* binding */ BinaryWriter),\n/* harmony export */   WireType: () => (/* binding */ WireType)\n/* harmony export */ });\n/* harmony import */ var _google_varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google/varint.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js\");\n/* harmony import */ var _private_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n/* harmony import */ var _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proto-int64.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */ /**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */ var WireType;\n(function(WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */ WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */ WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */ WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */ WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */ WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */ WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nclass BinaryWriter {\n    constructor(textEncoder){\n        /**\n         * Previous fork states.\n         */ this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */ finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for(let i = 0; i < this.chunks.length; i++)len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for(let i = 0; i < this.chunks.length; i++){\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */ fork() {\n        this.stack.push({\n            chunks: this.chunks,\n            buf: this.buf\n        });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */ join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev) throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */ tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */ raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */ uint32(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertUInt32)(value);\n        // write value as varint 32, inlined for speed\n        while(value > 0x7f){\n            this.buf.push(value & 0x7f | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */ int32(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertInt32)(value);\n        (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint32write)(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */ bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */ bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */ string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */ float(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertFloat32)(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */ double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */ fixed32(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertUInt32)(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */ sfixed32(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertInt32)(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */ sint32(value) {\n        (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertInt32)(value);\n        // zigzag encode\n        value = (value << 1 ^ value >> 31) >>> 0;\n        (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint32write)(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */ sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */ fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */ int64(value) {\n        let tc = _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.enc(value);\n        (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint64write)(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */ sint64(value) {\n        let tc = _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.enc(value), // zigzag encode\n        sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;\n        (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint64write)(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */ uint64(value) {\n        let tc = _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.uEnc(value);\n        (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint64write)(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nclass BinaryReader {\n    constructor(buf, textDecoder){\n        this.varint64 = _google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */ this.uint32 = _google_varint_js__WEBPACK_IMPORTED_MODULE_1__.varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */ tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [\n            fieldNo,\n            wireType\n        ];\n    }\n    /**\n     * Skip one element and return the skipped data.\n     *\n     * When skipping StartGroup, provide the tags field number to check for\n     * matching field number in the EndGroup tag.\n     */ skip(wireType, fieldNo) {\n        let start = this.pos;\n        switch(wireType){\n            case WireType.Varint:\n                while(this.buf[this.pos++] & 0x80){\n                // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                for(;;){\n                    const [fn, wt] = this.tag();\n                    if (wt === WireType.EndGroup) {\n                        if (fieldNo !== undefined && fn !== fieldNo) {\n                            throw new Error(\"invalid end group tag\");\n                        }\n                        break;\n                    }\n                    this.skip(wt, fn);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */ assertBounds() {\n        if (this.pos > this.len) throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */ int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */ sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return zze >>> 1 ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */ int64() {\n        return _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */ uint64() {\n        return _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */ sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = (lo >>> 1 | (hi & 1) << 31) ^ s;\n        hi = hi >>> 1 ^ s;\n        return _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */ bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */ fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */ sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */ fixed64() {\n        return _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */ sfixed64() {\n        return _proto_int64_js__WEBPACK_IMPORTED_MODULE_2__.protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */ float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */ double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */ bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */ string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearExtension: () => (/* binding */ clearExtension),\n/* harmony export */   getExtension: () => (/* binding */ getExtension),\n/* harmony export */   hasExtension: () => (/* binding */ hasExtension),\n/* harmony export */   setExtension: () => (/* binding */ setExtension)\n/* harmony export */ });\n/* harmony import */ var _private_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./private/assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n/* harmony import */ var _private_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/extensions.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Retrieve an extension value from a message.\n *\n * The function never returns undefined. Use hasExtension() to check whether an\n * extension is set. If the extension is not set, this function returns the\n * default value (if one was specified in the protobuf source), or the zero value\n * (for example `0` for numeric types, `[]` for repeated extension fields, and\n * an empty message instance for message fields).\n *\n * Extensions are stored as unknown fields on a message. To mutate an extension\n * value, make sure to store the new value with setExtension() after mutating.\n *\n * If the extension does not extend the given message, an error is raised.\n */ function getExtension(message, extension, options) {\n    assertExtendee(extension, message);\n    const opt = extension.runtime.bin.makeReadOptions(options);\n    const ufs = (0,_private_extensions_js__WEBPACK_IMPORTED_MODULE_0__.filterUnknownFields)(message.getType().runtime.bin.listUnknownFields(message), extension.field);\n    const [container, get] = (0,_private_extensions_js__WEBPACK_IMPORTED_MODULE_0__.createExtensionContainer)(extension);\n    for (const uf of ufs){\n        extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);\n    }\n    return get();\n}\n/**\n * Set an extension value on a message. If the message already has a value for\n * this extension, the value is replaced.\n *\n * If the extension does not extend the given message, an error is raised.\n */ function setExtension(message, extension, value, options) {\n    assertExtendee(extension, message);\n    const readOpt = extension.runtime.bin.makeReadOptions(options);\n    const writeOpt = extension.runtime.bin.makeWriteOptions(options);\n    if (hasExtension(message, extension)) {\n        const ufs = message.getType().runtime.bin.listUnknownFields(message).filter((uf)=>uf.no != extension.field.no);\n        message.getType().runtime.bin.discardUnknownFields(message);\n        for (const uf of ufs){\n            message.getType().runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n    const writer = writeOpt.writerFactory();\n    let f = extension.field;\n    // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234\n    // We patch the field info to use explicit presence:\n    if (!f.opt && !f.repeated && (f.kind == \"enum\" || f.kind == \"scalar\")) {\n        f = Object.assign(Object.assign({}, extension.field), {\n            opt: true\n        });\n    }\n    extension.runtime.bin.writeField(f, value, writer, writeOpt);\n    const reader = readOpt.readerFactory(writer.finish());\n    while(reader.pos < reader.len){\n        const [no, wireType] = reader.tag();\n        const data = reader.skip(wireType, no);\n        message.getType().runtime.bin.onUnknownField(message, no, wireType, data);\n    }\n}\n/**\n * Remove an extension value from a message.\n *\n * If the extension does not extend the given message, an error is raised.\n */ function clearExtension(message, extension) {\n    assertExtendee(extension, message);\n    if (hasExtension(message, extension)) {\n        const bin = message.getType().runtime.bin;\n        const ufs = bin.listUnknownFields(message).filter((uf)=>uf.no != extension.field.no);\n        bin.discardUnknownFields(message);\n        for (const uf of ufs){\n            bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n}\n/**\n * Check whether an extension is set on a message.\n */ function hasExtension(message, extension) {\n    const messageType = message.getType();\n    return extension.extendee.typeName === messageType.typeName && !!messageType.runtime.bin.listUnknownFields(message).find((uf)=>uf.no == extension.field.no);\n}\nfunction assertExtendee(extension, message) {\n    (0,_private_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(extension.extendee.typeName == message.getType().typeName, `extension ${extension.typeName} can only be applied to message ${extension.extendee.typeName}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   int64FromString: () => (/* binding */ int64FromString),\n/* harmony export */   int64ToString: () => (/* binding */ int64ToString),\n/* harmony export */   uInt64ToString: () => (/* binding */ uInt64ToString),\n/* harmony export */   varint32read: () => (/* binding */ varint32read),\n/* harmony export */   varint32write: () => (/* binding */ varint32write),\n/* harmony export */   varint64read: () => (/* binding */ varint64read),\n/* harmony export */   varint64write: () => (/* binding */ varint64write)\n/* harmony export */ });\n// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */ /**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */ function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for(let shift = 0; shift < 28; shift += 7){\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [\n                lowBits,\n                highBits\n            ];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [\n            lowBits,\n            highBits\n        ];\n    }\n    for(let shift = 3; shift <= 31; shift += 7){\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [\n                lowBits,\n                highBits\n            ];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */ function varint64write(lo, hi, bytes) {\n    for(let i = 0; i < 28; i = i + 7){\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for(let i = 3; i < 31; i = i + 7){\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push(hi >>> 31 & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = bits.hi & 0x80000000;\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */ function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = (lo >>> 24 | hi << 8) & 0xFFFFFF;\n    const high = hi >> 16 & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + mid * 6777216 + high * 6710656;\n    let digitB = mid + high * 8147497;\n    let digitC = high * 2;\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return {\n        lo: lo >>> 0,\n        hi: hi >>> 0\n    };\n}\nfunction newBits(lo, hi) {\n    return {\n        lo: lo | 0,\n        hi: hi | 0\n    };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */ function negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    } else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */ const decimalFrom1e7WithLeadingZeros = (digit1e7)=>{\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */ function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while(value > 0x7f){\n            bytes.push(value & 0x7f | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    } else {\n        for(let i = 0; i < 9; i++){\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */ function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for(let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)b = this.buf[this.pos++];\n    if ((b & 0x80) != 0) throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMessage: () => (/* binding */ isMessage)\n/* harmony export */ });\n/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Check whether the given object is any subtype of Message or is a specific\n * Message by passing the type.\n *\n * Just like `instanceof`, `isMessage` narrows the type. The advantage of\n * `isMessage` is that it compares identity by the message type name, not by\n * class identity. This makes it robust against the dual package hazard and\n * similar situations, where the same message is duplicated.\n *\n * This function is _mostly_ equivalent to the `instanceof` operator. For\n * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,\n * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,\n * `isMessage` should be preferred over `instanceof`.\n *\n * However, due to the fact that `isMessage` does not use class identity, there\n * are subtle differences between this function and `instanceof`. Notably,\n * calling `isMessage` on an explicit type of Message will return false.\n */ function isMessage(arg, type) {\n    if (arg === null || typeof arg != \"object\") {\n        return false;\n    }\n    if (!Object.getOwnPropertyNames(_message_js__WEBPACK_IMPORTED_MODULE_0__.Message.prototype).every((m)=>m in arg && typeof arg[m] == \"function\")) {\n        return false;\n    }\n    const actualType = arg.getType();\n    if (actualType === null || typeof actualType != \"function\" || !(\"typeName\" in actualType) || typeof actualType.typeName != \"string\") {\n        return false;\n    }\n    return type === undefined ? true : actualType.typeName == type.typeName;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9pcy1tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ007QUFDdkM7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBaUJDLEdBQ00sU0FBU0MsVUFBVUMsR0FBRyxFQUFFQyxJQUFJO0lBQy9CLElBQUlELFFBQVEsUUFBUSxPQUFPQSxPQUFPLFVBQVU7UUFDeEMsT0FBTztJQUNYO0lBQ0EsSUFBSSxDQUFDRSxPQUFPQyxtQkFBbUIsQ0FBQ0wsZ0RBQU9BLENBQUNNLFNBQVMsRUFBRUMsS0FBSyxDQUFDLENBQUNDLElBQU1BLEtBQUtOLE9BQU8sT0FBT0EsR0FBRyxDQUFDTSxFQUFFLElBQUksYUFBYTtRQUN0RyxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxhQUFhUCxJQUFJUSxPQUFPO0lBQzlCLElBQUlELGVBQWUsUUFDZixPQUFPQSxjQUFjLGNBQ3JCLENBQUUsZUFBY0EsVUFBUyxLQUN6QixPQUFPQSxXQUFXRSxRQUFRLElBQUksVUFBVTtRQUN4QyxPQUFPO0lBQ1g7SUFDQSxPQUFPUixTQUFTUyxZQUFZLE9BQU9ILFdBQVdFLFFBQVEsSUFBSVIsS0FBS1EsUUFBUTtBQUMzRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vaXMtbWVzc2FnZS5qcz9hNTBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4vbWVzc2FnZS5qc1wiO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYW55IHN1YnR5cGUgb2YgTWVzc2FnZSBvciBpcyBhIHNwZWNpZmljXG4gKiBNZXNzYWdlIGJ5IHBhc3NpbmcgdGhlIHR5cGUuXG4gKlxuICogSnVzdCBsaWtlIGBpbnN0YW5jZW9mYCwgYGlzTWVzc2FnZWAgbmFycm93cyB0aGUgdHlwZS4gVGhlIGFkdmFudGFnZSBvZlxuICogYGlzTWVzc2FnZWAgaXMgdGhhdCBpdCBjb21wYXJlcyBpZGVudGl0eSBieSB0aGUgbWVzc2FnZSB0eXBlIG5hbWUsIG5vdCBieVxuICogY2xhc3MgaWRlbnRpdHkuIFRoaXMgbWFrZXMgaXQgcm9idXN0IGFnYWluc3QgdGhlIGR1YWwgcGFja2FnZSBoYXphcmQgYW5kXG4gKiBzaW1pbGFyIHNpdHVhdGlvbnMsIHdoZXJlIHRoZSBzYW1lIG1lc3NhZ2UgaXMgZHVwbGljYXRlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIF9tb3N0bHlfIGVxdWl2YWxlbnQgdG8gdGhlIGBpbnN0YW5jZW9mYCBvcGVyYXRvci4gRm9yXG4gKiBleGFtcGxlLCBgaXNNZXNzYWdlKGZvbywgTXlNZXNzYWdlKWAgaXMgdGhlIHNhbWUgYXMgYGZvbyBpbnN0YW5jZW9mIE15TWVzc2FnZWAsXG4gKiBhbmQgYGlzTWVzc2FnZShmb28pYCBpcyB0aGUgc2FtZSBhcyBgZm9vIGluc3RhbmNlb2YgTWVzc2FnZWAuIEluIG1vc3QgY2FzZXMsXG4gKiBgaXNNZXNzYWdlYCBzaG91bGQgYmUgcHJlZmVycmVkIG92ZXIgYGluc3RhbmNlb2ZgLlxuICpcbiAqIEhvd2V2ZXIsIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGBpc01lc3NhZ2VgIGRvZXMgbm90IHVzZSBjbGFzcyBpZGVudGl0eSwgdGhlcmVcbiAqIGFyZSBzdWJ0bGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGlzIGZ1bmN0aW9uIGFuZCBgaW5zdGFuY2VvZmAuIE5vdGFibHksXG4gKiBjYWxsaW5nIGBpc01lc3NhZ2VgIG9uIGFuIGV4cGxpY2l0IHR5cGUgb2YgTWVzc2FnZSB3aWxsIHJldHVybiBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWVzc2FnZShhcmcsIHR5cGUpIHtcbiAgICBpZiAoYXJnID09PSBudWxsIHx8IHR5cGVvZiBhcmcgIT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTWVzc2FnZS5wcm90b3R5cGUpLmV2ZXJ5KChtKSA9PiBtIGluIGFyZyAmJiB0eXBlb2YgYXJnW21dID09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhY3R1YWxUeXBlID0gYXJnLmdldFR5cGUoKTtcbiAgICBpZiAoYWN0dWFsVHlwZSA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2YgYWN0dWFsVHlwZSAhPSBcImZ1bmN0aW9uXCIgfHxcbiAgICAgICAgIShcInR5cGVOYW1lXCIgaW4gYWN0dWFsVHlwZSkgfHxcbiAgICAgICAgdHlwZW9mIGFjdHVhbFR5cGUudHlwZU5hbWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlID09PSB1bmRlZmluZWQgPyB0cnVlIDogYWN0dWFsVHlwZS50eXBlTmFtZSA9PSB0eXBlLnR5cGVOYW1lO1xufVxuIl0sIm5hbWVzIjpbIk1lc3NhZ2UiLCJpc01lc3NhZ2UiLCJhcmciLCJ0eXBlIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3RvdHlwZSIsImV2ZXJ5IiwibSIsImFjdHVhbFR5cGUiLCJnZXRUeXBlIiwidHlwZU5hbWUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/message.js":
/*!***********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/message.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: () => (/* binding */ Message)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */ class Message {\n    /**\n     * Compare with a message of the same type.\n     * Note that this function disregards extensions and unknown fields.\n     */ equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */ clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */ fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */ fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */ fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        } catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */ toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */ toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */ toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */ toJSON() {\n        return this.toJson({\n            emitDefaultValues: true\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */ getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/message.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertFloat32: () => (/* binding */ assertFloat32),\n/* harmony export */   assertInt32: () => (/* binding */ assertInt32),\n/* harmony export */   assertUInt32: () => (/* binding */ assertUInt32)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */ function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */ function assertInt32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */ function assertUInt32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */ function assertFloat32(arg) {\n    if (typeof arg !== \"number\") throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg)) return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2Fzc2VydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDOztDQUVDLEdBQ00sU0FBU0EsT0FBT0MsU0FBUyxFQUFFQyxHQUFHO0lBQ2pDLHVIQUF1SDtJQUN2SCxJQUFJLENBQUNELFdBQVc7UUFDWixNQUFNLElBQUlFLE1BQU1EO0lBQ3BCO0FBQ0o7QUFDQSxNQUFNRSxjQUFjLHVCQUF1QkMsY0FBYyxDQUFDLHVCQUF1QkMsYUFBYSxZQUFZQyxZQUFZLFlBQVlDLFlBQVksQ0FBQztBQUMvSTs7Q0FFQyxHQUNNLFNBQVNDLFlBQVlDLEdBQUc7SUFDM0IsSUFBSSxPQUFPQSxRQUFRLFVBQ2YsTUFBTSxJQUFJUCxNQUFNLHFCQUFxQixPQUFPTztJQUNoRCxJQUFJLENBQUNDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUUEsTUFBTUgsYUFBYUcsTUFBTUYsV0FDbkQsTUFBTSxJQUFJTCxNQUFNLHFCQUFxQk8sTUFBTSw2R0FBNkc7QUFDaEs7QUFDQTs7Q0FFQyxHQUNNLFNBQVNHLGFBQWFILEdBQUc7SUFDNUIsSUFBSSxPQUFPQSxRQUFRLFVBQ2YsTUFBTSxJQUFJUCxNQUFNLHNCQUFzQixPQUFPTztJQUNqRCxJQUFJLENBQUNDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUUEsTUFBTUosY0FBY0ksTUFBTSxHQUNwRCxNQUFNLElBQUlQLE1BQU0sc0JBQXNCTyxNQUFNLDZHQUE2RztBQUNqSztBQUNBOztDQUVDLEdBQ00sU0FBU0ksY0FBY0osR0FBRztJQUM3QixJQUFJLE9BQU9BLFFBQVEsVUFDZixNQUFNLElBQUlQLE1BQU0sdUJBQXVCLE9BQU9PO0lBQ2xELElBQUksQ0FBQ0MsT0FBT0ksUUFBUSxDQUFDTCxNQUNqQjtJQUNKLElBQUlBLE1BQU1OLGVBQWVNLE1BQU1MLGFBQzNCLE1BQU0sSUFBSUYsTUFBTSx1QkFBdUJPLE1BQU0sNkdBQTZHO0FBQ2xLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2Fzc2VydC5qcz8yNGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIEFzc2VydCB0aGF0IGNvbmRpdGlvbiBpcyB0cnV0aHkgb3IgdGhyb3cgZXJyb3IgKHdpdGggbWVzc2FnZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1zZykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMgLS0gd2Ugd2FudCB0aGUgaW1wbGljaXQgY29udmVyc2lvbiB0byBib29sZWFuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuY29uc3QgRkxPQVQzMl9NQVggPSAzLjQwMjgyMzQ2NjM4NTI4ODZlMzgsIEZMT0FUMzJfTUlOID0gLTMuNDAyODIzNDY2Mzg1Mjg4NmUzOCwgVUlOVDMyX01BWCA9IDB4ZmZmZmZmZmYsIElOVDMyX01BWCA9IDB4N2ZmZmZmZmYsIElOVDMyX01JTiA9IC0weDgwMDAwMDAwO1xuLyoqXG4gKiBBc3NlcnQgYSB2YWxpZCBzaWduZWQgcHJvdG9idWYgMzItYml0IGludGVnZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbnQzMihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbnQgMzI6IFwiICsgdHlwZW9mIGFyZyk7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFyZykgfHwgYXJnID4gSU5UMzJfTUFYIHx8IGFyZyA8IElOVDMyX01JTilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbnQgMzI6IFwiICsgYXJnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kcyAtLSB3ZSB3YW50IHRoZSBpbXBsaWNpdCBjb252ZXJzaW9uIHRvIHN0cmluZ1xufVxuLyoqXG4gKiBBc3NlcnQgYSB2YWxpZCB1bnNpZ25lZCBwcm90b2J1ZiAzMi1iaXQgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFVJbnQzMihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1aW50IDMyOiBcIiArIHR5cGVvZiBhcmcpO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhcmcpIHx8IGFyZyA+IFVJTlQzMl9NQVggfHwgYXJnIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1aW50IDMyOiBcIiArIGFyZyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHMgLS0gd2Ugd2FudCB0aGUgaW1wbGljaXQgY29udmVyc2lvbiB0byBzdHJpbmdcbn1cbi8qKlxuICogQXNzZXJ0IGEgdmFsaWQgcHJvdG9idWYgZmxvYXQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGbG9hdDMyKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSBcIm51bWJlclwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZsb2F0IDMyOiBcIiArIHR5cGVvZiBhcmcpO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGFyZykpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoYXJnID4gRkxPQVQzMl9NQVggfHwgYXJnIDwgRkxPQVQzMl9NSU4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZmxvYXQgMzI6IFwiICsgYXJnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kcyAtLSB3ZSB3YW50IHRoZSBpbXBsaWNpdCBjb252ZXJzaW9uIHRvIHN0cmluZ1xufVxuIl0sIm5hbWVzIjpbImFzc2VydCIsImNvbmRpdGlvbiIsIm1zZyIsIkVycm9yIiwiRkxPQVQzMl9NQVgiLCJGTE9BVDMyX01JTiIsIlVJTlQzMl9NQVgiLCJJTlQzMl9NQVgiLCJJTlQzMl9NSU4iLCJhc3NlcnRJbnQzMiIsImFyZyIsIk51bWJlciIsImlzSW50ZWdlciIsImFzc2VydFVJbnQzMiIsImFzc2VydEZsb2F0MzIiLCJpc0Zpbml0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeBinaryFormat: () => (/* binding */ makeBinaryFormat),\n/* harmony export */   writeMapEntry: () => (/* binding */ writeMapEntry)\n/* harmony export */ });\n/* harmony import */ var _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../binary-encoding.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js\");\n/* harmony import */ var _field_wrapper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./field-wrapper.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js\");\n/* harmony import */ var _scalars_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n/* harmony import */ var _reflect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reflect.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n/* harmony import */ var _is_message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../is-message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */ const unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes)=>new _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(bytes)\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: ()=>new _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nfunction makeBinaryFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields (message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields (message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields (message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c){\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField (message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({\n                no,\n                wireType,\n                data\n            });\n        },\n        readMessage (message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\n            const type = message.getType();\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            const end = delimitedMessageEncoding ? reader.len : reader.pos + lengthOrEndTagFieldNo;\n            let fieldNo, wireType;\n            while(reader.pos < end){\n                [fieldNo, wireType] = reader.tag();\n                if (delimitedMessageEncoding === true && wireType == _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.EndGroup) {\n                    break;\n                }\n                const field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType, fieldNo);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                readField(message, reader, field, wireType, options);\n            }\n            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n            (wireType != _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\n                throw new Error(`invalid end group tag`);\n            }\n        },\n        readField,\n        writeMessage (message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()){\n                if (!(0,_reflect_js__WEBPACK_IMPORTED_MODULE_1__.isFieldSet)(field, message)) {\n                    if (field.req) {\n                        throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);\n                    }\n                    continue;\n                }\n                const value = field.oneof ? message[field.oneof.localName].value : message[field.localName];\n                writeField(field, value, writer, options);\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        },\n        writeField (field, value, writer, options) {\n            // The behavior of our internal function has changed, it does no longer\n            // accept `undefined` values for singular scalar and map.\n            // For backwards-compatibility, we support the old form that is part of\n            // the public API through the interface BinaryFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            writeField(field, value, writer, options);\n        }\n    };\n}\nfunction readField(target, reader, field, wireType, options) {\n    let { repeated, localName } = field;\n    if (field.oneof) {\n        target = target[field.oneof.localName];\n        if (target.case != localName) {\n            delete target.value;\n        }\n        target.case = localName;\n        localName = \"value\";\n    }\n    switch(field.kind){\n        case \"scalar\":\n        case \"enum\":\n            const scalarType = field.kind == \"enum\" ? _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32 : field.T;\n            let read = readScalar;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            if (field.kind == \"scalar\" && field.L > 0) {\n                read = readScalarLTString;\n            }\n            if (repeated) {\n                let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                const isPacked = wireType == _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited && scalarType != _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.STRING && scalarType != _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES;\n                if (isPacked) {\n                    let e = reader.uint32() + reader.pos;\n                    while(reader.pos < e){\n                        arr.push(read(reader, scalarType));\n                    }\n                } else {\n                    arr.push(read(reader, scalarType));\n                }\n            } else {\n                target[localName] = read(reader, scalarType);\n            }\n            break;\n        case \"message\":\n            const messageType = field.T;\n            if (repeated) {\n                // safe to assume presence of array, oneof cannot contain repeated values\n                target[localName].push(readMessageField(reader, new messageType(), options, field));\n            } else {\n                if ((0,_is_message_js__WEBPACK_IMPORTED_MODULE_3__.isMessage)(target[localName])) {\n                    readMessageField(reader, target[localName], options, field);\n                } else {\n                    target[localName] = readMessageField(reader, new messageType(), options, field);\n                    if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                        target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                    }\n                }\n            }\n            break;\n        case \"map\":\n            let [mapKey, mapVal] = readMapEntry(field, reader, options);\n            // safe to assume presence of map object, oneof cannot contain repeated values\n            target[localName][mapKey] = mapVal;\n            break;\n    }\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options, field) {\n    const format = message.getType().runtime.bin;\n    const delimited = field === null || field === void 0 ? void 0 : field.delimited;\n    format.readMessage(message, reader, delimited ? field.no : reader.uint32(), options, delimited);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while(reader.pos < end){\n        const [fieldNo] = reader.tag();\n        switch(fieldNo){\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch(field.V.kind){\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options, undefined);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        key = (0,_scalars_js__WEBPACK_IMPORTED_MODULE_4__.scalarZeroValue)(field.K, _scalar_js__WEBPACK_IMPORTED_MODULE_2__.LongType.BIGINT);\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch(field.V.kind){\n            case \"scalar\":\n                val = (0,_scalars_js__WEBPACK_IMPORTED_MODULE_4__.scalarZeroValue)(field.V.T, _scalar_js__WEBPACK_IMPORTED_MODULE_2__.LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = field.V.T.values[0].no;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [\n        key,\n        val\n    ];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch(type){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.STRING:\n            return reader.string();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BOOL:\n            return reader.bool();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.DOUBLE:\n            return reader.double();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FLOAT:\n            return reader.float();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32:\n            return reader.int32();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT64:\n            return reader.int64();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.UINT64:\n            return reader.uint64();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FIXED64:\n            return reader.fixed64();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES:\n            return reader.bytes();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FIXED32:\n            return reader.fixed32();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SINT64:\n            return reader.sint64();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.UINT32:\n            return reader.uint32();\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nfunction writeField(field, value, writer, options) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(value !== undefined);\n    const repeated = field.repeated;\n    switch(field.kind){\n        case \"scalar\":\n        case \"enum\":\n            let scalarType = field.kind == \"enum\" ? _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32 : field.T;\n            if (repeated) {\n                (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(Array.isArray(value));\n                if (field.packed) {\n                    writePacked(writer, scalarType, field.no, value);\n                } else {\n                    for (const item of value){\n                        writeScalar(writer, scalarType, field.no, item);\n                    }\n                }\n            } else {\n                writeScalar(writer, scalarType, field.no, value);\n            }\n            break;\n        case \"message\":\n            if (repeated) {\n                (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(Array.isArray(value));\n                for (const item of value){\n                    writeMessageField(writer, options, field, item);\n                }\n            } else {\n                writeMessageField(writer, options, field, value);\n            }\n            break;\n        case \"map\":\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"object\" && value != null);\n            for (const [key, val] of Object.entries(value)){\n                writeMapEntry(writer, options, field, key, val);\n            }\n            break;\n    }\n}\nfunction writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch(field.K){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.UINT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SFIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BOOL:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue);\n    // write value, expecting value field number = 2\n    switch(field.V.kind){\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value);\n            break;\n        case \"enum\":\n            writeScalar(writer, _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32, 2, value);\n            break;\n        case \"message\":\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(value !== undefined);\n            writer.tag(2, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited).bytes(value.toBinary(options));\n            break;\n    }\n    writer.join();\n}\n// Value must not be undefined\nfunction writeMessageField(writer, options, field, value) {\n    const message = (0,_field_wrapper_js__WEBPACK_IMPORTED_MODULE_6__.wrapField)(field.T, value);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.delimited) writer.tag(field.no, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.StartGroup).raw(message.toBinary(options)).tag(field.no, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.EndGroup);\n    else writer.tag(field.no, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited).bytes(message.toBinary(options));\n}\nfunction writeScalar(writer, type, fieldNo, value) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(value !== undefined);\n    let [wireType, method] = scalarTypeInfo(type);\n    writer.tag(fieldNo, wireType)[method](value);\n}\nfunction writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for(let i = 0; i < value.length; i++){\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */ // TODO replace call-sites writeScalar() and writePacked(), then remove\nfunction scalarTypeInfo(type) {\n    let wireType = _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.Varint;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch(type){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.STRING:\n            wireType = _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.LengthDelimited;\n            break;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.DOUBLE:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SFIXED64:\n            wireType = _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.Bit64;\n            break;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.SFIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.FLOAT:\n            wireType = _binary_encoding_js__WEBPACK_IMPORTED_MODULE_0__.WireType.Bit32;\n            break;\n    }\n    const method = _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType[type].toLowerCase();\n    return [\n        wireType,\n        method\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2JpbmFyeS1mb3JtYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQzRDO0FBQ3JDO0FBQ087QUFDQTtBQUNWO0FBQ0s7QUFDVTtBQUNQO0FBQzdDLHNSQUFzUixHQUN0UixNQUFNVyxzQkFBc0JDLE9BQU87QUFDbkMsMkNBQTJDO0FBQzNDLE1BQU1DLGVBQWU7SUFDakJDLG1CQUFtQjtJQUNuQkMsZUFBZSxDQUFDQyxRQUFVLElBQUloQiw2REFBWUEsQ0FBQ2dCO0FBQy9DO0FBQ0EsK0NBQStDO0FBQy9DLE1BQU1DLGdCQUFnQjtJQUNsQkMsb0JBQW9CO0lBQ3BCQyxlQUFlLElBQU0sSUFBSWxCLDZEQUFZQTtBQUN6QztBQUNBLFNBQVNtQixnQkFBZ0JDLE9BQU87SUFDNUIsT0FBT0EsVUFBVUMsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHVixlQUFlUSxXQUFXUjtBQUMvRTtBQUNBLFNBQVNXLGlCQUFpQkgsT0FBTztJQUM3QixPQUFPQSxVQUFVQyxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdOLGdCQUFnQkksV0FBV0o7QUFDaEY7QUFDTyxTQUFTUTtJQUNaLE9BQU87UUFDSEw7UUFDQUk7UUFDQUUsbUJBQWtCQyxPQUFPO1lBQ3JCLElBQUlDO1lBQ0osT0FBTyxDQUFDQSxLQUFLRCxPQUFPLENBQUNoQixvQkFBb0IsTUFBTSxRQUFRaUIsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtRQUNsRjtRQUNBQyxzQkFBcUJGLE9BQU87WUFDeEIsT0FBT0EsT0FBTyxDQUFDaEIsb0JBQW9CO1FBQ3ZDO1FBQ0FPLG9CQUFtQlMsT0FBTyxFQUFFRyxNQUFNO1lBQzlCLE1BQU1DLElBQUlKO1lBQ1YsTUFBTUssSUFBSUQsQ0FBQyxDQUFDcEIsb0JBQW9CO1lBQ2hDLElBQUlxQixHQUFHO2dCQUNILEtBQUssTUFBTUMsS0FBS0QsRUFBRztvQkFDZkYsT0FBT0ksR0FBRyxDQUFDRCxFQUFFRSxFQUFFLEVBQUVGLEVBQUVHLFFBQVEsRUFBRUMsR0FBRyxDQUFDSixFQUFFSyxJQUFJO2dCQUMzQztZQUNKO1FBQ0o7UUFDQUMsZ0JBQWVaLE9BQU8sRUFBRVEsRUFBRSxFQUFFQyxRQUFRLEVBQUVFLElBQUk7WUFDdEMsTUFBTVAsSUFBSUo7WUFDVixJQUFJLENBQUNhLE1BQU1DLE9BQU8sQ0FBQ1YsQ0FBQyxDQUFDcEIsb0JBQW9CLEdBQUc7Z0JBQ3hDb0IsQ0FBQyxDQUFDcEIsb0JBQW9CLEdBQUcsRUFBRTtZQUMvQjtZQUNBb0IsQ0FBQyxDQUFDcEIsb0JBQW9CLENBQUMrQixJQUFJLENBQUM7Z0JBQUVQO2dCQUFJQztnQkFBVUU7WUFBSztRQUNyRDtRQUNBSyxhQUFZaEIsT0FBTyxFQUFFaUIsTUFBTSxFQUFFQyxxQkFBcUIsRUFBRXhCLE9BQU8sRUFBRXlCLHdCQUF3QjtZQUNqRixNQUFNQyxPQUFPcEIsUUFBUXFCLE9BQU87WUFDNUIseUVBQXlFO1lBQ3pFLE1BQU1DLE1BQU1ILDJCQUNORixPQUFPTSxHQUFHLEdBQ1ZOLE9BQU9PLEdBQUcsR0FBR047WUFDbkIsSUFBSU8sU0FBU2hCO1lBQ2IsTUFBT1EsT0FBT08sR0FBRyxHQUFHRixJQUFLO2dCQUNyQixDQUFDRyxTQUFTaEIsU0FBUyxHQUFHUSxPQUFPVixHQUFHO2dCQUNoQyxJQUFJWSw2QkFBNkIsUUFDN0JWLFlBQVlsQyx5REFBUUEsQ0FBQ21ELFFBQVEsRUFBRTtvQkFDL0I7Z0JBQ0o7Z0JBQ0EsTUFBTUMsUUFBUVAsS0FBS1EsTUFBTSxDQUFDQyxJQUFJLENBQUNKO2dCQUMvQixJQUFJLENBQUNFLE9BQU87b0JBQ1IsTUFBTWhCLE9BQU9NLE9BQU9hLElBQUksQ0FBQ3JCLFVBQVVnQjtvQkFDbkMsSUFBSS9CLFFBQVFQLGlCQUFpQixFQUFFO3dCQUMzQixJQUFJLENBQUN5QixjQUFjLENBQUNaLFNBQVN5QixTQUFTaEIsVUFBVUU7b0JBQ3BEO29CQUNBO2dCQUNKO2dCQUNBb0IsVUFBVS9CLFNBQVNpQixRQUFRVSxPQUFPbEIsVUFBVWY7WUFDaEQ7WUFDQSxJQUFJeUIsNEJBQTRCLG9FQUFvRTtZQUMvRlYsQ0FBQUEsWUFBWWxDLHlEQUFRQSxDQUFDbUQsUUFBUSxJQUFJRCxZQUFZUCxxQkFBb0IsR0FBSTtnQkFDdEUsTUFBTSxJQUFJYyxNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDM0M7UUFDSjtRQUNBRDtRQUNBRSxjQUFhakMsT0FBTyxFQUFFRyxNQUFNLEVBQUVULE9BQU87WUFDakMsTUFBTTBCLE9BQU9wQixRQUFRcUIsT0FBTztZQUM1QixLQUFLLE1BQU1NLFNBQVNQLEtBQUtRLE1BQU0sQ0FBQ00sUUFBUSxHQUFJO2dCQUN4QyxJQUFJLENBQUN0RCx1REFBVUEsQ0FBQytDLE9BQU8zQixVQUFVO29CQUM3QixJQUFJMkIsTUFBTVEsR0FBRyxFQUFFO3dCQUNYLE1BQU0sSUFBSUgsTUFBTSxDQUFDLG9CQUFvQixFQUFFWixLQUFLZ0IsUUFBUSxDQUFDLENBQUMsRUFBRVQsTUFBTVUsSUFBSSxDQUFDLGtDQUFrQyxDQUFDO29CQUMxRztvQkFDQTtnQkFDSjtnQkFDQSxNQUFNQyxRQUFRWCxNQUFNWSxLQUFLLEdBQ25CdkMsT0FBTyxDQUFDMkIsTUFBTVksS0FBSyxDQUFDQyxTQUFTLENBQUMsQ0FBQ0YsS0FBSyxHQUNwQ3RDLE9BQU8sQ0FBQzJCLE1BQU1hLFNBQVMsQ0FBQztnQkFDOUJDLFdBQVdkLE9BQU9XLE9BQU9uQyxRQUFRVDtZQUNyQztZQUNBLElBQUlBLFFBQVFILGtCQUFrQixFQUFFO2dCQUM1QixJQUFJLENBQUNBLGtCQUFrQixDQUFDUyxTQUFTRztZQUNyQztZQUNBLE9BQU9BO1FBQ1g7UUFDQXNDLFlBQVdkLEtBQUssRUFBRVcsS0FBSyxFQUFFbkMsTUFBTSxFQUFFVCxPQUFPO1lBQ3BDLHVFQUF1RTtZQUN2RSx5REFBeUQ7WUFDekQsdUVBQXVFO1lBQ3ZFLHFEQUFxRDtZQUNyRCxJQUFJNEMsVUFBVUksV0FBVztnQkFDckIsT0FBT0E7WUFDWDtZQUNBRCxXQUFXZCxPQUFPVyxPQUFPbkMsUUFBUVQ7UUFDckM7SUFDSjtBQUNKO0FBQ0EsU0FBU3FDLFVBQVVZLE1BQU0sRUFDekIxQixNQUFNLEVBQUVVLEtBQUssRUFBRWxCLFFBQVEsRUFBRWYsT0FBTztJQUM1QixJQUFJLEVBQUVrRCxRQUFRLEVBQUVKLFNBQVMsRUFBRSxHQUFHYjtJQUM5QixJQUFJQSxNQUFNWSxLQUFLLEVBQUU7UUFDYkksU0FBU0EsTUFBTSxDQUFDaEIsTUFBTVksS0FBSyxDQUFDQyxTQUFTLENBQUM7UUFDdEMsSUFBSUcsT0FBT0UsSUFBSSxJQUFJTCxXQUFXO1lBQzFCLE9BQU9HLE9BQU9MLEtBQUs7UUFDdkI7UUFDQUssT0FBT0UsSUFBSSxHQUFHTDtRQUNkQSxZQUFZO0lBQ2hCO0lBQ0EsT0FBUWIsTUFBTW1CLElBQUk7UUFDZCxLQUFLO1FBQ0wsS0FBSztZQUNELE1BQU1DLGFBQWFwQixNQUFNbUIsSUFBSSxJQUFJLFNBQVNoRSxrREFBVUEsQ0FBQ2tFLEtBQUssR0FBR3JCLE1BQU1zQixDQUFDO1lBQ3BFLElBQUlDLE9BQU9DO1lBQ1gsa0hBQWtIO1lBQ2xILElBQUl4QixNQUFNbUIsSUFBSSxJQUFJLFlBQVluQixNQUFNeUIsQ0FBQyxHQUFHLEdBQUc7Z0JBQ3ZDRixPQUFPRztZQUNYO1lBQ0EsSUFBSVQsVUFBVTtnQkFDVixJQUFJVSxNQUFNWCxNQUFNLENBQUNILFVBQVUsRUFBRSx5RUFBeUU7Z0JBQ3RHLE1BQU1lLFdBQVc5QyxZQUFZbEMseURBQVFBLENBQUNpRixlQUFlLElBQ2pEVCxjQUFjakUsa0RBQVVBLENBQUMyRSxNQUFNLElBQy9CVixjQUFjakUsa0RBQVVBLENBQUM0RSxLQUFLO2dCQUNsQyxJQUFJSCxVQUFVO29CQUNWLElBQUlJLElBQUkxQyxPQUFPMkMsTUFBTSxLQUFLM0MsT0FBT08sR0FBRztvQkFDcEMsTUFBT1AsT0FBT08sR0FBRyxHQUFHbUMsRUFBRzt3QkFDbkJMLElBQUl2QyxJQUFJLENBQUNtQyxLQUFLakMsUUFBUThCO29CQUMxQjtnQkFDSixPQUNLO29CQUNETyxJQUFJdkMsSUFBSSxDQUFDbUMsS0FBS2pDLFFBQVE4QjtnQkFDMUI7WUFDSixPQUNLO2dCQUNESixNQUFNLENBQUNILFVBQVUsR0FBR1UsS0FBS2pDLFFBQVE4QjtZQUNyQztZQUNBO1FBQ0osS0FBSztZQUNELE1BQU1jLGNBQWNsQyxNQUFNc0IsQ0FBQztZQUMzQixJQUFJTCxVQUFVO2dCQUNWLHlFQUF5RTtnQkFDekVELE1BQU0sQ0FBQ0gsVUFBVSxDQUFDekIsSUFBSSxDQUFDK0MsaUJBQWlCN0MsUUFBUSxJQUFJNEMsZUFBZW5FLFNBQVNpQztZQUNoRixPQUNLO2dCQUNELElBQUk1Qyx5REFBU0EsQ0FBQzRELE1BQU0sQ0FBQ0gsVUFBVSxHQUFHO29CQUM5QnNCLGlCQUFpQjdDLFFBQVEwQixNQUFNLENBQUNILFVBQVUsRUFBRTlDLFNBQVNpQztnQkFDekQsT0FDSztvQkFDRGdCLE1BQU0sQ0FBQ0gsVUFBVSxHQUFHc0IsaUJBQWlCN0MsUUFBUSxJQUFJNEMsZUFBZW5FLFNBQVNpQztvQkFDekUsSUFBSWtDLFlBQVlFLFlBQVksSUFBSSxDQUFDcEMsTUFBTVksS0FBSyxJQUFJLENBQUNaLE1BQU1pQixRQUFRLEVBQUU7d0JBQzdERCxNQUFNLENBQUNILFVBQVUsR0FBR3FCLFlBQVlFLFlBQVksQ0FBQ0MsV0FBVyxDQUFDckIsTUFBTSxDQUFDSCxVQUFVO29CQUM5RTtnQkFDSjtZQUNKO1lBQ0E7UUFDSixLQUFLO1lBQ0QsSUFBSSxDQUFDeUIsUUFBUUMsT0FBTyxHQUFHQyxhQUFheEMsT0FBT1YsUUFBUXZCO1lBQ25ELDhFQUE4RTtZQUM5RWlELE1BQU0sQ0FBQ0gsVUFBVSxDQUFDeUIsT0FBTyxHQUFHQztZQUM1QjtJQUNSO0FBQ0o7QUFDQSxrRUFBa0U7QUFDbEUsMkNBQTJDO0FBQzNDLFNBQVNKLGlCQUFpQjdDLE1BQU0sRUFBRWpCLE9BQU8sRUFBRU4sT0FBTyxFQUFFaUMsS0FBSztJQUNyRCxNQUFNeUMsU0FBU3BFLFFBQVFxQixPQUFPLEdBQUdnRCxPQUFPLENBQUNDLEdBQUc7SUFDNUMsTUFBTUMsWUFBWTVDLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNNEMsU0FBUztJQUMvRUgsT0FBT3BELFdBQVcsQ0FBQ2hCLFNBQVNpQixRQUFRc0QsWUFBWTVDLE1BQU1uQixFQUFFLEdBQUdTLE9BQU8yQyxNQUFNLElBQ3hFbEUsU0FBUzZFO0lBQ1QsT0FBT3ZFO0FBQ1g7QUFDQSw2REFBNkQ7QUFDN0QsU0FBU21FLGFBQWF4QyxLQUFLLEVBQUVWLE1BQU0sRUFBRXZCLE9BQU87SUFDeEMsTUFBTThFLFNBQVN2RCxPQUFPMkMsTUFBTSxJQUFJdEMsTUFBTUwsT0FBT08sR0FBRyxHQUFHZ0Q7SUFDbkQsSUFBSUMsS0FBS0M7SUFDVCxNQUFPekQsT0FBT08sR0FBRyxHQUFHRixJQUFLO1FBQ3JCLE1BQU0sQ0FBQ0csUUFBUSxHQUFHUixPQUFPVixHQUFHO1FBQzVCLE9BQVFrQjtZQUNKLEtBQUs7Z0JBQ0RnRCxNQUFNdEIsV0FBV2xDLFFBQVFVLE1BQU1nRCxDQUFDO2dCQUNoQztZQUNKLEtBQUs7Z0JBQ0QsT0FBUWhELE1BQU1pRCxDQUFDLENBQUM5QixJQUFJO29CQUNoQixLQUFLO3dCQUNENEIsTUFBTXZCLFdBQVdsQyxRQUFRVSxNQUFNaUQsQ0FBQyxDQUFDM0IsQ0FBQzt3QkFDbEM7b0JBQ0osS0FBSzt3QkFDRHlCLE1BQU16RCxPQUFPNEQsS0FBSzt3QkFDbEI7b0JBQ0osS0FBSzt3QkFDREgsTUFBTVosaUJBQWlCN0MsUUFBUSxJQUFJVSxNQUFNaUQsQ0FBQyxDQUFDM0IsQ0FBQyxJQUFJdkQsU0FBU2dEO3dCQUN6RDtnQkFDUjtnQkFDQTtRQUNSO0lBQ0o7SUFDQSxJQUFJK0IsUUFBUS9CLFdBQVc7UUFDbkIrQixNQUFNL0YsNERBQWVBLENBQUNpRCxNQUFNZ0QsQ0FBQyxFQUFFOUYsZ0RBQVFBLENBQUNpRyxNQUFNO0lBQ2xEO0lBQ0EsSUFBSSxPQUFPTCxPQUFPLFlBQVksT0FBT0EsT0FBTyxVQUFVO1FBQ2xEQSxNQUFNQSxJQUFJTSxRQUFRO0lBQ3RCO0lBQ0EsSUFBSUwsUUFBUWhDLFdBQVc7UUFDbkIsT0FBUWYsTUFBTWlELENBQUMsQ0FBQzlCLElBQUk7WUFDaEIsS0FBSztnQkFDRDRCLE1BQU1oRyw0REFBZUEsQ0FBQ2lELE1BQU1pRCxDQUFDLENBQUMzQixDQUFDLEVBQUVwRSxnREFBUUEsQ0FBQ2lHLE1BQU07Z0JBQ2hEO1lBQ0osS0FBSztnQkFDREosTUFBTS9DLE1BQU1pRCxDQUFDLENBQUMzQixDQUFDLENBQUMrQixNQUFNLENBQUMsRUFBRSxDQUFDeEUsRUFBRTtnQkFDNUI7WUFDSixLQUFLO2dCQUNEa0UsTUFBTSxJQUFJL0MsTUFBTWlELENBQUMsQ0FBQzNCLENBQUM7Z0JBQ25CO1FBQ1I7SUFDSjtJQUNBLE9BQU87UUFBQ3dCO1FBQUtDO0tBQUk7QUFDckI7QUFDQSx3RUFBd0U7QUFDeEUsMERBQTBEO0FBQzFELFNBQVNyQixtQkFBbUJwQyxNQUFNLEVBQUVHLElBQUk7SUFDcEMsTUFBTTZELElBQUk5QixXQUFXbEMsUUFBUUc7SUFDN0IsT0FBTyxPQUFPNkQsS0FBSyxXQUFXQSxFQUFFRixRQUFRLEtBQUtFO0FBQ2pEO0FBQ0Esd0RBQXdEO0FBQ3hELFNBQVM5QixXQUFXbEMsTUFBTSxFQUFFRyxJQUFJO0lBQzVCLE9BQVFBO1FBQ0osS0FBS3RDLGtEQUFVQSxDQUFDMkUsTUFBTTtZQUNsQixPQUFPeEMsT0FBT2lFLE1BQU07UUFDeEIsS0FBS3BHLGtEQUFVQSxDQUFDcUcsSUFBSTtZQUNoQixPQUFPbEUsT0FBT21FLElBQUk7UUFDdEIsS0FBS3RHLGtEQUFVQSxDQUFDdUcsTUFBTTtZQUNsQixPQUFPcEUsT0FBT3FFLE1BQU07UUFDeEIsS0FBS3hHLGtEQUFVQSxDQUFDeUcsS0FBSztZQUNqQixPQUFPdEUsT0FBT3VFLEtBQUs7UUFDdkIsS0FBSzFHLGtEQUFVQSxDQUFDa0UsS0FBSztZQUNqQixPQUFPL0IsT0FBTzRELEtBQUs7UUFDdkIsS0FBSy9GLGtEQUFVQSxDQUFDMkcsS0FBSztZQUNqQixPQUFPeEUsT0FBT3lFLEtBQUs7UUFDdkIsS0FBSzVHLGtEQUFVQSxDQUFDNkcsTUFBTTtZQUNsQixPQUFPMUUsT0FBTzJFLE1BQU07UUFDeEIsS0FBSzlHLGtEQUFVQSxDQUFDK0csT0FBTztZQUNuQixPQUFPNUUsT0FBTzZFLE9BQU87UUFDekIsS0FBS2hILGtEQUFVQSxDQUFDNEUsS0FBSztZQUNqQixPQUFPekMsT0FBTzVCLEtBQUs7UUFDdkIsS0FBS1Asa0RBQVVBLENBQUNpSCxPQUFPO1lBQ25CLE9BQU85RSxPQUFPK0UsT0FBTztRQUN6QixLQUFLbEgsa0RBQVVBLENBQUNtSCxRQUFRO1lBQ3BCLE9BQU9oRixPQUFPaUYsUUFBUTtRQUMxQixLQUFLcEgsa0RBQVVBLENBQUNxSCxRQUFRO1lBQ3BCLE9BQU9sRixPQUFPbUYsUUFBUTtRQUMxQixLQUFLdEgsa0RBQVVBLENBQUN1SCxNQUFNO1lBQ2xCLE9BQU9wRixPQUFPcUYsTUFBTTtRQUN4QixLQUFLeEgsa0RBQVVBLENBQUN5SCxNQUFNO1lBQ2xCLE9BQU90RixPQUFPMkMsTUFBTTtRQUN4QixLQUFLOUUsa0RBQVVBLENBQUMwSCxNQUFNO1lBQ2xCLE9BQU92RixPQUFPd0YsTUFBTTtJQUM1QjtBQUNKO0FBQ0EsU0FBU2hFLFdBQVdkLEtBQUssRUFBRVcsS0FBSyxFQUFFbkMsTUFBTSxFQUFFVCxPQUFPO0lBQzdDZixrREFBTUEsQ0FBQzJELFVBQVVJO0lBQ2pCLE1BQU1FLFdBQVdqQixNQUFNaUIsUUFBUTtJQUMvQixPQUFRakIsTUFBTW1CLElBQUk7UUFDZCxLQUFLO1FBQ0wsS0FBSztZQUNELElBQUlDLGFBQWFwQixNQUFNbUIsSUFBSSxJQUFJLFNBQVNoRSxrREFBVUEsQ0FBQ2tFLEtBQUssR0FBR3JCLE1BQU1zQixDQUFDO1lBQ2xFLElBQUlMLFVBQVU7Z0JBQ1ZqRSxrREFBTUEsQ0FBQ2tDLE1BQU1DLE9BQU8sQ0FBQ3dCO2dCQUNyQixJQUFJWCxNQUFNK0UsTUFBTSxFQUFFO29CQUNkQyxZQUFZeEcsUUFBUTRDLFlBQVlwQixNQUFNbkIsRUFBRSxFQUFFOEI7Z0JBQzlDLE9BQ0s7b0JBQ0QsS0FBSyxNQUFNc0UsUUFBUXRFLE1BQU87d0JBQ3RCdUUsWUFBWTFHLFFBQVE0QyxZQUFZcEIsTUFBTW5CLEVBQUUsRUFBRW9HO29CQUM5QztnQkFDSjtZQUNKLE9BQ0s7Z0JBQ0RDLFlBQVkxRyxRQUFRNEMsWUFBWXBCLE1BQU1uQixFQUFFLEVBQUU4QjtZQUM5QztZQUNBO1FBQ0osS0FBSztZQUNELElBQUlNLFVBQVU7Z0JBQ1ZqRSxrREFBTUEsQ0FBQ2tDLE1BQU1DLE9BQU8sQ0FBQ3dCO2dCQUNyQixLQUFLLE1BQU1zRSxRQUFRdEUsTUFBTztvQkFDdEJ3RSxrQkFBa0IzRyxRQUFRVCxTQUFTaUMsT0FBT2lGO2dCQUM5QztZQUNKLE9BQ0s7Z0JBQ0RFLGtCQUFrQjNHLFFBQVFULFNBQVNpQyxPQUFPVztZQUM5QztZQUNBO1FBQ0osS0FBSztZQUNEM0Qsa0RBQU1BLENBQUMsT0FBTzJELFNBQVMsWUFBWUEsU0FBUztZQUM1QyxLQUFLLE1BQU0sQ0FBQ21DLEtBQUtDLElBQUksSUFBSS9FLE9BQU9vSCxPQUFPLENBQUN6RSxPQUFRO2dCQUM1QzBFLGNBQWM3RyxRQUFRVCxTQUFTaUMsT0FBTzhDLEtBQUtDO1lBQy9DO1lBQ0E7SUFDUjtBQUNKO0FBQ08sU0FBU3NDLGNBQWM3RyxNQUFNLEVBQUVULE9BQU8sRUFBRWlDLEtBQUssRUFBRThDLEdBQUcsRUFBRW5DLEtBQUs7SUFDNURuQyxPQUFPSSxHQUFHLENBQUNvQixNQUFNbkIsRUFBRSxFQUFFakMseURBQVFBLENBQUNpRixlQUFlO0lBQzdDckQsT0FBTzhHLElBQUk7SUFDWCxnRUFBZ0U7SUFDaEUsMERBQTBEO0lBQzFELElBQUlDLFdBQVd6QztJQUNmLHdJQUF3STtJQUN4SSxPQUFROUMsTUFBTWdELENBQUM7UUFDWCxLQUFLN0Ysa0RBQVVBLENBQUNrRSxLQUFLO1FBQ3JCLEtBQUtsRSxrREFBVUEsQ0FBQ2lILE9BQU87UUFDdkIsS0FBS2pILGtEQUFVQSxDQUFDeUgsTUFBTTtRQUN0QixLQUFLekgsa0RBQVVBLENBQUNtSCxRQUFRO1FBQ3hCLEtBQUtuSCxrREFBVUEsQ0FBQzBILE1BQU07WUFDbEJVLFdBQVdDLE9BQU9DLFFBQVEsQ0FBQzNDO1lBQzNCO1FBQ0osS0FBSzNGLGtEQUFVQSxDQUFDcUcsSUFBSTtZQUNoQnhHLGtEQUFNQSxDQUFDOEYsT0FBTyxVQUFVQSxPQUFPO1lBQy9CeUMsV0FBV3pDLE9BQU87WUFDbEI7SUFDUjtJQUNBLDRDQUE0QztJQUM1Q29DLFlBQVkxRyxRQUFRd0IsTUFBTWdELENBQUMsRUFBRSxHQUFHdUM7SUFDaEMsZ0RBQWdEO0lBQ2hELE9BQVF2RixNQUFNaUQsQ0FBQyxDQUFDOUIsSUFBSTtRQUNoQixLQUFLO1lBQ0QrRCxZQUFZMUcsUUFBUXdCLE1BQU1pRCxDQUFDLENBQUMzQixDQUFDLEVBQUUsR0FBR1g7WUFDbEM7UUFDSixLQUFLO1lBQ0R1RSxZQUFZMUcsUUFBUXJCLGtEQUFVQSxDQUFDa0UsS0FBSyxFQUFFLEdBQUdWO1lBQ3pDO1FBQ0osS0FBSztZQUNEM0Qsa0RBQU1BLENBQUMyRCxVQUFVSTtZQUNqQnZDLE9BQU9JLEdBQUcsQ0FBQyxHQUFHaEMseURBQVFBLENBQUNpRixlQUFlLEVBQUVuRSxLQUFLLENBQUNpRCxNQUFNK0UsUUFBUSxDQUFDM0g7WUFDN0Q7SUFDUjtJQUNBUyxPQUFPbUgsSUFBSTtBQUNmO0FBQ0EsOEJBQThCO0FBQzlCLFNBQVNSLGtCQUFrQjNHLE1BQU0sRUFBRVQsT0FBTyxFQUFFaUMsS0FBSyxFQUFFVyxLQUFLO0lBQ3BELE1BQU10QyxVQUFVdkIsNERBQVNBLENBQUNrRCxNQUFNc0IsQ0FBQyxFQUFFWDtJQUNuQyx5RUFBeUU7SUFDekUsSUFBSVgsTUFBTTRDLFNBQVMsRUFDZnBFLE9BQ0tJLEdBQUcsQ0FBQ29CLE1BQU1uQixFQUFFLEVBQUVqQyx5REFBUUEsQ0FBQ2dKLFVBQVUsRUFDakM3RyxHQUFHLENBQUNWLFFBQVFxSCxRQUFRLENBQUMzSCxVQUNyQmEsR0FBRyxDQUFDb0IsTUFBTW5CLEVBQUUsRUFBRWpDLHlEQUFRQSxDQUFDbUQsUUFBUTtTQUVwQ3ZCLE9BQ0tJLEdBQUcsQ0FBQ29CLE1BQU1uQixFQUFFLEVBQUVqQyx5REFBUUEsQ0FBQ2lGLGVBQWUsRUFDdENuRSxLQUFLLENBQUNXLFFBQVFxSCxRQUFRLENBQUMzSDtBQUNwQztBQUNBLFNBQVNtSCxZQUFZMUcsTUFBTSxFQUFFaUIsSUFBSSxFQUFFSyxPQUFPLEVBQUVhLEtBQUs7SUFDN0MzRCxrREFBTUEsQ0FBQzJELFVBQVVJO0lBQ2pCLElBQUksQ0FBQ2pDLFVBQVUrRyxPQUFPLEdBQUdDLGVBQWVyRztJQUN4Q2pCLE9BQU9JLEdBQUcsQ0FBQ2tCLFNBQVNoQixTQUFTLENBQUMrRyxPQUFPLENBQUNsRjtBQUMxQztBQUNBLFNBQVNxRSxZQUFZeEcsTUFBTSxFQUFFaUIsSUFBSSxFQUFFSyxPQUFPLEVBQUVhLEtBQUs7SUFDN0MsSUFBSSxDQUFDQSxNQUFNa0MsTUFBTSxFQUFFO1FBQ2Y7SUFDSjtJQUNBckUsT0FBT0ksR0FBRyxDQUFDa0IsU0FBU2xELHlEQUFRQSxDQUFDaUYsZUFBZSxFQUFFeUQsSUFBSTtJQUNsRCxJQUFJLEdBQUdPLE9BQU8sR0FBR0MsZUFBZXJHO0lBQ2hDLElBQUssSUFBSXNHLElBQUksR0FBR0EsSUFBSXBGLE1BQU1rQyxNQUFNLEVBQUVrRCxJQUFLO1FBQ25DdkgsTUFBTSxDQUFDcUgsT0FBTyxDQUFDbEYsS0FBSyxDQUFDb0YsRUFBRTtJQUMzQjtJQUNBdkgsT0FBT21ILElBQUk7QUFDZjtBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELHVFQUF1RTtBQUN2RSxTQUFTRyxlQUFlckcsSUFBSTtJQUN4QixJQUFJWCxXQUFXbEMseURBQVFBLENBQUNvSixNQUFNO0lBQzlCLCtIQUErSDtJQUMvSCxPQUFRdkc7UUFDSixLQUFLdEMsa0RBQVVBLENBQUM0RSxLQUFLO1FBQ3JCLEtBQUs1RSxrREFBVUEsQ0FBQzJFLE1BQU07WUFDbEJoRCxXQUFXbEMseURBQVFBLENBQUNpRixlQUFlO1lBQ25DO1FBQ0osS0FBSzFFLGtEQUFVQSxDQUFDdUcsTUFBTTtRQUN0QixLQUFLdkcsa0RBQVVBLENBQUMrRyxPQUFPO1FBQ3ZCLEtBQUsvRyxrREFBVUEsQ0FBQ3FILFFBQVE7WUFDcEIxRixXQUFXbEMseURBQVFBLENBQUNxSixLQUFLO1lBQ3pCO1FBQ0osS0FBSzlJLGtEQUFVQSxDQUFDaUgsT0FBTztRQUN2QixLQUFLakgsa0RBQVVBLENBQUNtSCxRQUFRO1FBQ3hCLEtBQUtuSCxrREFBVUEsQ0FBQ3lHLEtBQUs7WUFDakI5RSxXQUFXbEMseURBQVFBLENBQUNzSixLQUFLO1lBQ3pCO0lBQ1I7SUFDQSxNQUFNTCxTQUFTMUksa0RBQVUsQ0FBQ3NDLEtBQUssQ0FBQzBHLFdBQVc7SUFDM0MsT0FBTztRQUFDckg7UUFBVStHO0tBQU87QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvYmluYXJ5LWZvcm1hdC5qcz8zMjYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBCaW5hcnlSZWFkZXIsIEJpbmFyeVdyaXRlciwgV2lyZVR5cGUgfSBmcm9tIFwiLi4vYmluYXJ5LWVuY29kaW5nLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2UuanNcIjtcbmltcG9ydCB7IHdyYXBGaWVsZCB9IGZyb20gXCIuL2ZpZWxkLXdyYXBwZXIuanNcIjtcbmltcG9ydCB7IHNjYWxhclplcm9WYWx1ZSB9IGZyb20gXCIuL3NjYWxhcnMuanNcIjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiO1xuaW1wb3J0IHsgaXNGaWVsZFNldCB9IGZyb20gXCIuL3JlZmxlY3QuanNcIjtcbmltcG9ydCB7IExvbmdUeXBlLCBTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL3NjYWxhci5qc1wiO1xuaW1wb3J0IHsgaXNNZXNzYWdlIH0gZnJvbSBcIi4uL2lzLW1lc3NhZ2UuanNcIjtcbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci1jb25zdCxuby1jYXNlLWRlY2xhcmF0aW9ucyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnQsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm4gKi9cbmNvbnN0IHVua25vd25GaWVsZHNTeW1ib2wgPSBTeW1ib2woXCJAYnVmYnVpbGQvcHJvdG9idWYvdW5rbm93bi1maWVsZHNcIik7XG4vLyBEZWZhdWx0IG9wdGlvbnMgZm9yIHBhcnNpbmcgYmluYXJ5IGRhdGEuXG5jb25zdCByZWFkRGVmYXVsdHMgPSB7XG4gICAgcmVhZFVua25vd25GaWVsZHM6IHRydWUsXG4gICAgcmVhZGVyRmFjdG9yeTogKGJ5dGVzKSA9PiBuZXcgQmluYXJ5UmVhZGVyKGJ5dGVzKSxcbn07XG4vLyBEZWZhdWx0IG9wdGlvbnMgZm9yIHNlcmlhbGl6aW5nIGJpbmFyeSBkYXRhLlxuY29uc3Qgd3JpdGVEZWZhdWx0cyA9IHtcbiAgICB3cml0ZVVua25vd25GaWVsZHM6IHRydWUsXG4gICAgd3JpdGVyRmFjdG9yeTogKCkgPT4gbmV3IEJpbmFyeVdyaXRlcigpLFxufTtcbmZ1bmN0aW9uIG1ha2VSZWFkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlYWREZWZhdWx0cyksIG9wdGlvbnMpIDogcmVhZERlZmF1bHRzO1xufVxuZnVuY3Rpb24gbWFrZVdyaXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdyaXRlRGVmYXVsdHMpLCBvcHRpb25zKSA6IHdyaXRlRGVmYXVsdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZUJpbmFyeUZvcm1hdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlUmVhZE9wdGlvbnMsXG4gICAgICAgIG1ha2VXcml0ZU9wdGlvbnMsXG4gICAgICAgIGxpc3RVbmtub3duRmllbGRzKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSBtZXNzYWdlW3Vua25vd25GaWVsZHNTeW1ib2xdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzY2FyZFVua25vd25GaWVsZHMobWVzc2FnZSkge1xuICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdW5rbm93bkZpZWxkc1N5bWJvbF07XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRlVW5rbm93bkZpZWxkcyhtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtZXNzYWdlO1xuICAgICAgICAgICAgY29uc3QgYyA9IG1bdW5rbm93bkZpZWxkc1N5bWJvbF07XG4gICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci50YWcoZi5ubywgZi53aXJlVHlwZSkucmF3KGYuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblVua25vd25GaWVsZChtZXNzYWdlLCBubywgd2lyZVR5cGUsIGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtZXNzYWdlO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1bdW5rbm93bkZpZWxkc1N5bWJvbF0pKSB7XG4gICAgICAgICAgICAgICAgbVt1bmtub3duRmllbGRzU3ltYm9sXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbVt1bmtub3duRmllbGRzU3ltYm9sXS5wdXNoKHsgbm8sIHdpcmVUeXBlLCBkYXRhIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZWFkTWVzc2FnZShtZXNzYWdlLCByZWFkZXIsIGxlbmd0aE9yRW5kVGFnRmllbGRObywgb3B0aW9ucywgZGVsaW1pdGVkTWVzc2FnZUVuY29kaW5nKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBkZWxpbWl0ZWRNZXNzYWdlRW5jb2RpbmdcbiAgICAgICAgICAgICAgICA/IHJlYWRlci5sZW5cbiAgICAgICAgICAgICAgICA6IHJlYWRlci5wb3MgKyBsZW5ndGhPckVuZFRhZ0ZpZWxkTm87XG4gICAgICAgICAgICBsZXQgZmllbGRObywgd2lyZVR5cGU7XG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgIFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGltaXRlZE1lc3NhZ2VFbmNvZGluZyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICB3aXJlVHlwZSA9PSBXaXJlVHlwZS5FbmRHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0eXBlLmZpZWxkcy5maW5kKGZpZWxkTm8pO1xuICAgICAgICAgICAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlYWRlci5za2lwKHdpcmVUeXBlLCBmaWVsZE5vKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVhZFVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Vbmtub3duRmllbGQobWVzc2FnZSwgZmllbGRObywgd2lyZVR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWFkRmllbGQobWVzc2FnZSwgcmVhZGVyLCBmaWVsZCwgd2lyZVR5cGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbGltaXRlZE1lc3NhZ2VFbmNvZGluZyAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgICh3aXJlVHlwZSAhPSBXaXJlVHlwZS5FbmRHcm91cCB8fCBmaWVsZE5vICE9PSBsZW5ndGhPckVuZFRhZ0ZpZWxkTm8pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGVuZCBncm91cCB0YWdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVhZEZpZWxkLFxuICAgICAgICB3cml0ZU1lc3NhZ2UobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGUuZmllbGRzLmJ5TnVtYmVyKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmllbGRTZXQoZmllbGQsIG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZXEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSBmaWVsZCAke3R5cGUudHlwZU5hbWV9LiR7ZmllbGQubmFtZX0gdG8gYmluYXJ5OiByZXF1aXJlZCBmaWVsZCBub3Qgc2V0YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZmllbGQub25lb2ZcbiAgICAgICAgICAgICAgICAgICAgPyBtZXNzYWdlW2ZpZWxkLm9uZW9mLmxvY2FsTmFtZV0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiBtZXNzYWdlW2ZpZWxkLmxvY2FsTmFtZV07XG4gICAgICAgICAgICAgICAgd3JpdGVGaWVsZChmaWVsZCwgdmFsdWUsIHdyaXRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy53cml0ZVVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVW5rbm93bkZpZWxkcyhtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGVGaWVsZChmaWVsZCwgdmFsdWUsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgLy8gVGhlIGJlaGF2aW9yIG9mIG91ciBpbnRlcm5hbCBmdW5jdGlvbiBoYXMgY2hhbmdlZCwgaXQgZG9lcyBubyBsb25nZXJcbiAgICAgICAgICAgIC8vIGFjY2VwdCBgdW5kZWZpbmVkYCB2YWx1ZXMgZm9yIHNpbmd1bGFyIHNjYWxhciBhbmQgbWFwLlxuICAgICAgICAgICAgLy8gRm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCB3ZSBzdXBwb3J0IHRoZSBvbGQgZm9ybSB0aGF0IGlzIHBhcnQgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBwdWJsaWMgQVBJIHRocm91Z2ggdGhlIGludGVyZmFjZSBCaW5hcnlGb3JtYXQuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3cml0ZUZpZWxkKGZpZWxkLCB2YWx1ZSwgd3JpdGVyLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVhZEZpZWxkKHRhcmdldCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIGBhbnlgIGlzIHRoZSBiZXN0IGNob2ljZSBmb3IgZHluYW1pYyBhY2Nlc3NcbnJlYWRlciwgZmllbGQsIHdpcmVUeXBlLCBvcHRpb25zKSB7XG4gICAgbGV0IHsgcmVwZWF0ZWQsIGxvY2FsTmFtZSB9ID0gZmllbGQ7XG4gICAgaWYgKGZpZWxkLm9uZW9mKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldFtmaWVsZC5vbmVvZi5sb2NhbE5hbWVdO1xuICAgICAgICBpZiAodGFyZ2V0LmNhc2UgIT0gbG9jYWxOYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5jYXNlID0gbG9jYWxOYW1lO1xuICAgICAgICBsb2NhbE5hbWUgPSBcInZhbHVlXCI7XG4gICAgfVxuICAgIHN3aXRjaCAoZmllbGQua2luZCkge1xuICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICBjb25zdCBzY2FsYXJUeXBlID0gZmllbGQua2luZCA9PSBcImVudW1cIiA/IFNjYWxhclR5cGUuSU5UMzIgOiBmaWVsZC5UO1xuICAgICAgICAgICAgbGV0IHJlYWQgPSByZWFkU2NhbGFyO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uIC0tIGFjY2VwdGFibGUgc2luY2UgaXQncyBjb3ZlcmVkIGJ5IHRlc3RzXG4gICAgICAgICAgICBpZiAoZmllbGQua2luZCA9PSBcInNjYWxhclwiICYmIGZpZWxkLkwgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVhZCA9IHJlYWRTY2FsYXJMVFN0cmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgIGxldCBhcnIgPSB0YXJnZXRbbG9jYWxOYW1lXTsgLy8gc2FmZSB0byBhc3N1bWUgcHJlc2VuY2Ugb2YgYXJyYXksIG9uZW9mIGNhbm5vdCBjb250YWluIHJlcGVhdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUGFja2VkID0gd2lyZVR5cGUgPT0gV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkICYmXG4gICAgICAgICAgICAgICAgICAgIHNjYWxhclR5cGUgIT0gU2NhbGFyVHlwZS5TVFJJTkcgJiZcbiAgICAgICAgICAgICAgICAgICAgc2NhbGFyVHlwZSAhPSBTY2FsYXJUeXBlLkJZVEVTO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2gocmVhZChyZWFkZXIsIHNjYWxhclR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2gocmVhZChyZWFkZXIsIHNjYWxhclR5cGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IHJlYWQocmVhZGVyLCBzY2FsYXJUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZVR5cGUgPSBmaWVsZC5UO1xuICAgICAgICAgICAgaWYgKHJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gc2FmZSB0byBhc3N1bWUgcHJlc2VuY2Ugb2YgYXJyYXksIG9uZW9mIGNhbm5vdCBjb250YWluIHJlcGVhdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIHRhcmdldFtsb2NhbE5hbWVdLnB1c2gocmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIG5ldyBtZXNzYWdlVHlwZSgpLCBvcHRpb25zLCBmaWVsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTWVzc2FnZSh0YXJnZXRbbG9jYWxOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIHRhcmdldFtsb2NhbE5hbWVdLCBvcHRpb25zLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IHJlYWRNZXNzYWdlRmllbGQocmVhZGVyLCBuZXcgbWVzc2FnZVR5cGUoKSwgb3B0aW9ucywgZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVR5cGUuZmllbGRXcmFwcGVyICYmICFmaWVsZC5vbmVvZiAmJiAhZmllbGQucmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtsb2NhbE5hbWVdID0gbWVzc2FnZVR5cGUuZmllbGRXcmFwcGVyLnVud3JhcEZpZWxkKHRhcmdldFtsb2NhbE5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICBsZXQgW21hcEtleSwgbWFwVmFsXSA9IHJlYWRNYXBFbnRyeShmaWVsZCwgcmVhZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIC8vIHNhZmUgdG8gYXNzdW1lIHByZXNlbmNlIG9mIG1hcCBvYmplY3QsIG9uZW9mIGNhbm5vdCBjb250YWluIHJlcGVhdGVkIHZhbHVlc1xuICAgICAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV1bbWFwS2V5XSA9IG1hcFZhbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbi8vIFJlYWQgYSBtZXNzYWdlLCBhdm9pZGluZyBNZXNzYWdlVHlwZS5mcm9tQmluYXJ5KCkgdG8gcmUtdXNlIHRoZVxuLy8gQmluYXJ5UmVhZE9wdGlvbnMgYW5kIHRoZSBJQmluYXJ5UmVhZGVyLlxuZnVuY3Rpb24gcmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIG1lc3NhZ2UsIG9wdGlvbnMsIGZpZWxkKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gbWVzc2FnZS5nZXRUeXBlKCkucnVudGltZS5iaW47XG4gICAgY29uc3QgZGVsaW1pdGVkID0gZmllbGQgPT09IG51bGwgfHwgZmllbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkLmRlbGltaXRlZDtcbiAgICBmb3JtYXQucmVhZE1lc3NhZ2UobWVzc2FnZSwgcmVhZGVyLCBkZWxpbWl0ZWQgPyBmaWVsZC5ubyA6IHJlYWRlci51aW50MzIoKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnNcbiAgICBvcHRpb25zLCBkZWxpbWl0ZWQpO1xuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLy8gUmVhZCBhIG1hcCBmaWVsZCwgZXhwZWN0aW5nIGtleSBmaWVsZCA9IDEsIHZhbHVlIGZpZWxkID0gMlxuZnVuY3Rpb24gcmVhZE1hcEVudHJ5KGZpZWxkLCByZWFkZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZW5ndGggPSByZWFkZXIudWludDMyKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgbGV0IGtleSwgdmFsO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgIGNvbnN0IFtmaWVsZE5vXSA9IHJlYWRlci50YWcoKTtcbiAgICAgICAgc3dpdGNoIChmaWVsZE5vKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAga2V5ID0gcmVhZFNjYWxhcihyZWFkZXIsIGZpZWxkLkspO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZmllbGQuVi5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHJlYWRTY2FsYXIocmVhZGVyLCBmaWVsZC5WLlQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIG5ldyBmaWVsZC5WLlQoKSwgb3B0aW9ucywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5ID0gc2NhbGFyWmVyb1ZhbHVlKGZpZWxkLkssIExvbmdUeXBlLkJJR0lOVCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ICE9IFwic3RyaW5nXCIgJiYgdHlwZW9mIGtleSAhPSBcIm51bWJlclwiKSB7XG4gICAgICAgIGtleSA9IGtleS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZC5WLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBzY2FsYXJaZXJvVmFsdWUoZmllbGQuVi5ULCBMb25nVHlwZS5CSUdJTlQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBmaWVsZC5WLlQudmFsdWVzWzBdLm5vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICB2YWwgPSBuZXcgZmllbGQuVi5UKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtrZXksIHZhbF07XG59XG4vLyBSZWFkIGEgc2NhbGFyIHZhbHVlLCBidXQgcmV0dXJuIDY0IGJpdCBpbnRlZ3JhbCB0eXBlcyAoaW50NjQsIHVpbnQ2NCxcbi8vIHNpbnQ2NCwgZml4ZWQ2NCwgc2ZpeGVkNjQpIGFzIHN0cmluZyBpbnN0ZWFkIG9mIGJpZ2ludC5cbmZ1bmN0aW9uIHJlYWRTY2FsYXJMVFN0cmluZyhyZWFkZXIsIHR5cGUpIHtcbiAgICBjb25zdCB2ID0gcmVhZFNjYWxhcihyZWFkZXIsIHR5cGUpO1xuICAgIHJldHVybiB0eXBlb2YgdiA9PSBcImJpZ2ludFwiID8gdi50b1N0cmluZygpIDogdjtcbn1cbi8vIERvZXMgbm90IHVzZSBzY2FsYXJUeXBlSW5mbygpIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG5mdW5jdGlvbiByZWFkU2NhbGFyKHJlYWRlciwgdHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmJvb2woKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkRPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZG91YmxlKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZmxvYXQoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5pbnQzMigpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmludDY0KCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuZml4ZWQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5maXhlZDMyKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuc2ZpeGVkMzIoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zZml4ZWQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zaW50NjQoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIudWludDMyKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnNpbnQzMigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdyaXRlRmllbGQoZmllbGQsIHZhbHVlLCB3cml0ZXIsIG9wdGlvbnMpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCk7XG4gICAgY29uc3QgcmVwZWF0ZWQgPSBmaWVsZC5yZXBlYXRlZDtcbiAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgbGV0IHNjYWxhclR5cGUgPSBmaWVsZC5raW5kID09IFwiZW51bVwiID8gU2NhbGFyVHlwZS5JTlQzMiA6IGZpZWxkLlQ7XG4gICAgICAgICAgICBpZiAocmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5wYWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVQYWNrZWQod3JpdGVyLCBzY2FsYXJUeXBlLCBmaWVsZC5ubywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIHNjYWxhclR5cGUsIGZpZWxkLm5vLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdyaXRlU2NhbGFyKHdyaXRlciwgc2NhbGFyVHlwZSwgZmllbGQubm8sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgaWYgKHJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkodmFsdWUpKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVNZXNzYWdlRmllbGQod3JpdGVyLCBvcHRpb25zLCBmaWVsZCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd3JpdGVNZXNzYWdlRmllbGQod3JpdGVyLCBvcHRpb25zLCBmaWVsZCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPSBudWxsKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB3cml0ZU1hcEVudHJ5KHdyaXRlciwgb3B0aW9ucywgZmllbGQsIGtleSwgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZU1hcEVudHJ5KHdyaXRlciwgb3B0aW9ucywgZmllbGQsIGtleSwgdmFsdWUpIHtcbiAgICB3cml0ZXIudGFnKGZpZWxkLm5vLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpO1xuICAgIHdyaXRlci5mb3JrKCk7XG4gICAgLy8gamF2YXNjcmlwdCBvbmx5IGFsbG93cyBudW1iZXIgb3Igc3RyaW5nIGZvciBvYmplY3QgcHJvcGVydGllc1xuICAgIC8vIHdlIGNvbnZlcnQgZnJvbSBvdXIgcmVwcmVzZW50YXRpb24gdG8gdGhlIHByb3RvYnVmIHR5cGVcbiAgICBsZXQga2V5VmFsdWUgPSBrZXk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zd2l0Y2gtZXhoYXVzdGl2ZW5lc3MtY2hlY2sgLS0gd2UgZGVsaWJlcmF0ZWx5IGhhbmRsZSBqdXN0IHRoZSBzcGVjaWFsIGNhc2VzIGZvciBtYXAga2V5c1xuICAgIHN3aXRjaCAoZmllbGQuSykge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgICAgICBrZXlWYWx1ZSA9IE51bWJlci5wYXJzZUludChrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CT09MOlxuICAgICAgICAgICAgYXNzZXJ0KGtleSA9PSBcInRydWVcIiB8fCBrZXkgPT0gXCJmYWxzZVwiKTtcbiAgICAgICAgICAgIGtleVZhbHVlID0ga2V5ID09IFwidHJ1ZVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIHdyaXRlIGtleSwgZXhwZWN0aW5nIGtleSBmaWVsZCBudW1iZXIgPSAxXG4gICAgd3JpdGVTY2FsYXIod3JpdGVyLCBmaWVsZC5LLCAxLCBrZXlWYWx1ZSk7XG4gICAgLy8gd3JpdGUgdmFsdWUsIGV4cGVjdGluZyB2YWx1ZSBmaWVsZCBudW1iZXIgPSAyXG4gICAgc3dpdGNoIChmaWVsZC5WLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgd3JpdGVTY2FsYXIod3JpdGVyLCBmaWVsZC5WLlQsIDIsIHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgd3JpdGVTY2FsYXIod3JpdGVyLCBTY2FsYXJUeXBlLklOVDMyLCAyLCB2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHdyaXRlci50YWcoMiwgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5ieXRlcyh2YWx1ZS50b0JpbmFyeShvcHRpb25zKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgd3JpdGVyLmpvaW4oKTtcbn1cbi8vIFZhbHVlIG11c3Qgbm90IGJlIHVuZGVmaW5lZFxuZnVuY3Rpb24gd3JpdGVNZXNzYWdlRmllbGQod3JpdGVyLCBvcHRpb25zLCBmaWVsZCwgdmFsdWUpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gd3JhcEZpZWxkKGZpZWxkLlQsIHZhbHVlKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zXG4gICAgaWYgKGZpZWxkLmRlbGltaXRlZClcbiAgICAgICAgd3JpdGVyXG4gICAgICAgICAgICAudGFnKGZpZWxkLm5vLCBXaXJlVHlwZS5TdGFydEdyb3VwKVxuICAgICAgICAgICAgLnJhdyhtZXNzYWdlLnRvQmluYXJ5KG9wdGlvbnMpKVxuICAgICAgICAgICAgLnRhZyhmaWVsZC5ubywgV2lyZVR5cGUuRW5kR3JvdXApO1xuICAgIGVsc2VcbiAgICAgICAgd3JpdGVyXG4gICAgICAgICAgICAudGFnKGZpZWxkLm5vLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpXG4gICAgICAgICAgICAuYnl0ZXMobWVzc2FnZS50b0JpbmFyeShvcHRpb25zKSk7XG59XG5mdW5jdGlvbiB3cml0ZVNjYWxhcih3cml0ZXIsIHR5cGUsIGZpZWxkTm8sIHZhbHVlKSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQpO1xuICAgIGxldCBbd2lyZVR5cGUsIG1ldGhvZF0gPSBzY2FsYXJUeXBlSW5mbyh0eXBlKTtcbiAgICB3cml0ZXIudGFnKGZpZWxkTm8sIHdpcmVUeXBlKVttZXRob2RdKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHdyaXRlUGFja2VkKHdyaXRlciwgdHlwZSwgZmllbGRObywgdmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHdyaXRlci50YWcoZmllbGRObywgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkKS5mb3JrKCk7XG4gICAgbGV0IFssIG1ldGhvZF0gPSBzY2FsYXJUeXBlSW5mbyh0eXBlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdyaXRlclttZXRob2RdKHZhbHVlW2ldKTtcbiAgICB9XG4gICAgd3JpdGVyLmpvaW4oKTtcbn1cbi8qKlxuICogR2V0IGluZm9ybWF0aW9uIGZvciB3cml0aW5nIGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIFJldHVybnMgdHVwbGU6XG4gKiBbMF06IGFwcHJvcHJpYXRlIFdpcmVUeXBlXG4gKiBbMV06IG5hbWUgb2YgdGhlIGFwcHJvcHJpYXRlIG1ldGhvZCBvZiBJQmluYXJ5V3JpdGVyXG4gKiBbMl06IHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvdG8zIHNlbWFudGljc1xuICpcbiAqIElmIGFyZ3VtZW50IGB2YWx1ZWAgaXMgb21pdHRlZCwgWzJdIGlzIGFsd2F5cyBmYWxzZS5cbiAqL1xuLy8gVE9ETyByZXBsYWNlIGNhbGwtc2l0ZXMgd3JpdGVTY2FsYXIoKSBhbmQgd3JpdGVQYWNrZWQoKSwgdGhlbiByZW1vdmVcbmZ1bmN0aW9uIHNjYWxhclR5cGVJbmZvKHR5cGUpIHtcbiAgICBsZXQgd2lyZVR5cGUgPSBXaXJlVHlwZS5WYXJpbnQ7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zd2l0Y2gtZXhoYXVzdGl2ZW5lc3MtY2hlY2sgLS0gSU5UMzIsIFVJTlQzMiwgU0lOVDMyIGFyZSBjb3ZlcmVkIGJ5IHRoZSBkZWZhdWx0c1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICB3aXJlVHlwZSA9IFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgd2lyZVR5cGUgPSBXaXJlVHlwZS5CaXQ2NDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICB3aXJlVHlwZSA9IFdpcmVUeXBlLkJpdDMyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IFNjYWxhclR5cGVbdHlwZV0udG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gW3dpcmVUeXBlLCBtZXRob2RdO1xufVxuIl0sIm5hbWVzIjpbIkJpbmFyeVJlYWRlciIsIkJpbmFyeVdyaXRlciIsIldpcmVUeXBlIiwiTWVzc2FnZSIsIndyYXBGaWVsZCIsInNjYWxhclplcm9WYWx1ZSIsImFzc2VydCIsImlzRmllbGRTZXQiLCJMb25nVHlwZSIsIlNjYWxhclR5cGUiLCJpc01lc3NhZ2UiLCJ1bmtub3duRmllbGRzU3ltYm9sIiwiU3ltYm9sIiwicmVhZERlZmF1bHRzIiwicmVhZFVua25vd25GaWVsZHMiLCJyZWFkZXJGYWN0b3J5IiwiYnl0ZXMiLCJ3cml0ZURlZmF1bHRzIiwid3JpdGVVbmtub3duRmllbGRzIiwid3JpdGVyRmFjdG9yeSIsIm1ha2VSZWFkT3B0aW9ucyIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJtYWtlV3JpdGVPcHRpb25zIiwibWFrZUJpbmFyeUZvcm1hdCIsImxpc3RVbmtub3duRmllbGRzIiwibWVzc2FnZSIsIl9hIiwiZGlzY2FyZFVua25vd25GaWVsZHMiLCJ3cml0ZXIiLCJtIiwiYyIsImYiLCJ0YWciLCJubyIsIndpcmVUeXBlIiwicmF3IiwiZGF0YSIsIm9uVW5rbm93bkZpZWxkIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsInJlYWRNZXNzYWdlIiwicmVhZGVyIiwibGVuZ3RoT3JFbmRUYWdGaWVsZE5vIiwiZGVsaW1pdGVkTWVzc2FnZUVuY29kaW5nIiwidHlwZSIsImdldFR5cGUiLCJlbmQiLCJsZW4iLCJwb3MiLCJmaWVsZE5vIiwiRW5kR3JvdXAiLCJmaWVsZCIsImZpZWxkcyIsImZpbmQiLCJza2lwIiwicmVhZEZpZWxkIiwiRXJyb3IiLCJ3cml0ZU1lc3NhZ2UiLCJieU51bWJlciIsInJlcSIsInR5cGVOYW1lIiwibmFtZSIsInZhbHVlIiwib25lb2YiLCJsb2NhbE5hbWUiLCJ3cml0ZUZpZWxkIiwidW5kZWZpbmVkIiwidGFyZ2V0IiwicmVwZWF0ZWQiLCJjYXNlIiwia2luZCIsInNjYWxhclR5cGUiLCJJTlQzMiIsIlQiLCJyZWFkIiwicmVhZFNjYWxhciIsIkwiLCJyZWFkU2NhbGFyTFRTdHJpbmciLCJhcnIiLCJpc1BhY2tlZCIsIkxlbmd0aERlbGltaXRlZCIsIlNUUklORyIsIkJZVEVTIiwiZSIsInVpbnQzMiIsIm1lc3NhZ2VUeXBlIiwicmVhZE1lc3NhZ2VGaWVsZCIsImZpZWxkV3JhcHBlciIsInVud3JhcEZpZWxkIiwibWFwS2V5IiwibWFwVmFsIiwicmVhZE1hcEVudHJ5IiwiZm9ybWF0IiwicnVudGltZSIsImJpbiIsImRlbGltaXRlZCIsImxlbmd0aCIsImtleSIsInZhbCIsIksiLCJWIiwiaW50MzIiLCJCSUdJTlQiLCJ0b1N0cmluZyIsInZhbHVlcyIsInYiLCJzdHJpbmciLCJCT09MIiwiYm9vbCIsIkRPVUJMRSIsImRvdWJsZSIsIkZMT0FUIiwiZmxvYXQiLCJJTlQ2NCIsImludDY0IiwiVUlOVDY0IiwidWludDY0IiwiRklYRUQ2NCIsImZpeGVkNjQiLCJGSVhFRDMyIiwiZml4ZWQzMiIsIlNGSVhFRDMyIiwic2ZpeGVkMzIiLCJTRklYRUQ2NCIsInNmaXhlZDY0IiwiU0lOVDY0Iiwic2ludDY0IiwiVUlOVDMyIiwiU0lOVDMyIiwic2ludDMyIiwicGFja2VkIiwid3JpdGVQYWNrZWQiLCJpdGVtIiwid3JpdGVTY2FsYXIiLCJ3cml0ZU1lc3NhZ2VGaWVsZCIsImVudHJpZXMiLCJ3cml0ZU1hcEVudHJ5IiwiZm9yayIsImtleVZhbHVlIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJ0b0JpbmFyeSIsImpvaW4iLCJTdGFydEdyb3VwIiwibWV0aG9kIiwic2NhbGFyVHlwZUluZm8iLCJpIiwiVmFyaW50IiwiQml0NjQiLCJCaXQzMiIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnumType: () => (/* binding */ getEnumType),\n/* harmony export */   makeEnum: () => (/* binding */ makeEnum),\n/* harmony export */   makeEnumType: () => (/* binding */ makeEnumType),\n/* harmony export */   setEnumType: () => (/* binding */ setEnumType)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */ function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */ function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v)=>({\n            no: v.no,\n            name: v.name,\n            localName: enumObject[v.no]\n        })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */ function makeEnumType(typeName, values, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values){\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName (name) {\n            return names[name];\n        },\n        findNumber (no) {\n            return numbers[no];\n        }\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */ function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values){\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), {\n        localName: value.name\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2VudW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDSTtBQUNyQyxNQUFNQyxpQkFBaUJDLE9BQU87QUFDOUI7Ozs7Q0FJQyxHQUNNLFNBQVNDLFlBQVlDLFVBQVU7SUFDbEMsaUpBQWlKO0lBQ2pKLE1BQU1DLElBQUlELFVBQVUsQ0FBQ0gsZUFBZTtJQUNwQ0Qsa0RBQU1BLENBQUNLLEdBQUc7SUFDVixPQUFPQSxHQUFHLDBEQUEwRDtBQUN4RTtBQUNBOztDQUVDLEdBQ00sU0FBU0MsWUFBWUYsVUFBVSxFQUFFRyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsR0FBRztJQUN6RCwwR0FBMEc7SUFDMUdMLFVBQVUsQ0FBQ0gsZUFBZSxHQUFHUyxhQUFhSCxVQUFVQyxPQUFPRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTztZQUNuRUMsSUFBSUQsRUFBRUMsRUFBRTtZQUNSQyxNQUFNRixFQUFFRSxJQUFJO1lBQ1pDLFdBQVdYLFVBQVUsQ0FBQ1EsRUFBRUMsRUFBRSxDQUFDO1FBQy9CLEtBQUtKO0FBQ1Q7QUFDQTs7Q0FFQyxHQUNNLFNBQVNDLGFBQWFILFFBQVEsRUFBRUMsTUFBTSxFQUM3Qyw2REFBNkQ7QUFDN0RRLElBQUk7SUFDQSxNQUFNQyxRQUFRQyxPQUFPQyxNQUFNLENBQUM7SUFDNUIsTUFBTUMsVUFBVUYsT0FBT0MsTUFBTSxDQUFDO0lBQzlCLE1BQU1FLGVBQWUsRUFBRTtJQUN2QixLQUFLLE1BQU1DLFNBQVNkLE9BQVE7UUFDeEIseUNBQXlDO1FBQ3pDLGtGQUFrRjtRQUNsRixNQUFNZSxJQUFJQyxtQkFBbUJGO1FBQzdCRCxhQUFhSSxJQUFJLENBQUNGO1FBQ2xCTixLQUFLLENBQUNLLE1BQU1SLElBQUksQ0FBQyxHQUFHUztRQUNwQkgsT0FBTyxDQUFDRSxNQUFNVCxFQUFFLENBQUMsR0FBR1U7SUFDeEI7SUFDQSxPQUFPO1FBQ0hoQjtRQUNBQyxRQUFRYTtRQUNSLHlDQUF5QztRQUN6QyxnREFBZ0Q7UUFDaERLLFVBQVNaLElBQUk7WUFDVCxPQUFPRyxLQUFLLENBQUNILEtBQUs7UUFDdEI7UUFDQWEsWUFBV2QsRUFBRTtZQUNULE9BQU9PLE9BQU8sQ0FBQ1AsR0FBRztRQUN0QjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTZSxTQUFTckIsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLEdBQUc7SUFDMUMsTUFBTUwsYUFBYSxDQUFDO0lBQ3BCLEtBQUssTUFBTWtCLFNBQVNkLE9BQVE7UUFDeEIsTUFBTWUsSUFBSUMsbUJBQW1CRjtRQUM3QmxCLFVBQVUsQ0FBQ21CLEVBQUVSLFNBQVMsQ0FBQyxHQUFHUSxFQUFFVixFQUFFO1FBQzlCVCxVQUFVLENBQUNtQixFQUFFVixFQUFFLENBQUMsR0FBR1UsRUFBRVIsU0FBUztJQUNsQztJQUNBVCxZQUFZRixZQUFZRyxVQUFVQyxRQUFRQztJQUMxQyxPQUFPTDtBQUNYO0FBQ0EsU0FBU29CLG1CQUFtQkYsS0FBSztJQUM3QixJQUFJLGVBQWVBLE9BQU87UUFDdEIsT0FBT0E7SUFDWDtJQUNBLE9BQU9KLE9BQU9XLE1BQU0sQ0FBQ1gsT0FBT1csTUFBTSxDQUFDLENBQUMsR0FBR1AsUUFBUTtRQUFFUCxXQUFXTyxNQUFNUixJQUFJO0lBQUM7QUFDM0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvZW51bS5qcz81N2JlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi9hc3NlcnQuanNcIjtcbmNvbnN0IGVudW1UeXBlU3ltYm9sID0gU3ltYm9sKFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmL2VudW0tdHlwZVwiKTtcbi8qKlxuICogR2V0IHJlZmxlY3Rpb24gaW5mb3JtYXRpb24gZnJvbSBhIGdlbmVyYXRlZCBlbnVtLlxuICogSWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gc29tZXRoaW5nIG90aGVyIHRoYW4gYSBnZW5lcmF0ZWRcbiAqIGVudW0sIGl0IHJhaXNlcyBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVudW1UeXBlKGVudW1PYmplY3QpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QgdCA9IGVudW1PYmplY3RbZW51bVR5cGVTeW1ib2xdO1xuICAgIGFzc2VydCh0LCBcIm1pc3NpbmcgZW51bSB0eXBlIG9uIGVudW0gb2JqZWN0XCIpO1xuICAgIHJldHVybiB0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG59XG4vKipcbiAqIFNldHMgcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiBvbiBhIGdlbmVyYXRlZCBlbnVtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RW51bVR5cGUoZW51bU9iamVjdCwgdHlwZU5hbWUsIHZhbHVlcywgb3B0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGVudW1PYmplY3RbZW51bVR5cGVTeW1ib2xdID0gbWFrZUVudW1UeXBlKHR5cGVOYW1lLCB2YWx1ZXMubWFwKCh2KSA9PiAoe1xuICAgICAgICBubzogdi5ubyxcbiAgICAgICAgbmFtZTogdi5uYW1lLFxuICAgICAgICBsb2NhbE5hbWU6IGVudW1PYmplY3Rbdi5ub10sXG4gICAgfSkpLCBvcHQpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgRW51bVR5cGUgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUVudW1UeXBlKHR5cGVOYW1lLCB2YWx1ZXMsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuX29wdCkge1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBudW1iZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBub3JtYWxWYWx1ZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAvLyBXZSBkbyBub3Qgc3VyZmFjZSBvcHRpb25zIGF0IHRoaXMgdGltZVxuICAgICAgICAvLyBjb25zdCB2YWx1ZTogRW51bVZhbHVlSW5mbyA9IHsuLi52LCBvcHRpb25zOiB2Lm9wdGlvbnMgPz8gZW1wdHlSZWFkb25seU9iamVjdH07XG4gICAgICAgIGNvbnN0IG4gPSBub3JtYWxpemVFbnVtVmFsdWUodmFsdWUpO1xuICAgICAgICBub3JtYWxWYWx1ZXMucHVzaChuKTtcbiAgICAgICAgbmFtZXNbdmFsdWUubmFtZV0gPSBuO1xuICAgICAgICBudW1iZXJzW3ZhbHVlLm5vXSA9IG47XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVOYW1lLFxuICAgICAgICB2YWx1ZXM6IG5vcm1hbFZhbHVlcyxcbiAgICAgICAgLy8gV2UgZG8gbm90IHN1cmZhY2Ugb3B0aW9ucyBhdCB0aGlzIHRpbWVcbiAgICAgICAgLy8gb3B0aW9uczogb3B0Py5vcHRpb25zID8/IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICAgIGZpbmROYW1lKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lc1tuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluZE51bWJlcihubykge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnNbbm9dO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBlbnVtIG9iamVjdCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXMuXG4gKiBTZXRzIHJlZmxlY3Rpb24gaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRW51bSh0eXBlTmFtZSwgdmFsdWVzLCBvcHQpIHtcbiAgICBjb25zdCBlbnVtT2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgbiA9IG5vcm1hbGl6ZUVudW1WYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGVudW1PYmplY3Rbbi5sb2NhbE5hbWVdID0gbi5ubztcbiAgICAgICAgZW51bU9iamVjdFtuLm5vXSA9IG4ubG9jYWxOYW1lO1xuICAgIH1cbiAgICBzZXRFbnVtVHlwZShlbnVtT2JqZWN0LCB0eXBlTmFtZSwgdmFsdWVzLCBvcHQpO1xuICAgIHJldHVybiBlbnVtT2JqZWN0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRW51bVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKFwibG9jYWxOYW1lXCIgaW4gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSksIHsgbG9jYWxOYW1lOiB2YWx1ZS5uYW1lIH0pO1xufVxuIl0sIm5hbWVzIjpbImFzc2VydCIsImVudW1UeXBlU3ltYm9sIiwiU3ltYm9sIiwiZ2V0RW51bVR5cGUiLCJlbnVtT2JqZWN0IiwidCIsInNldEVudW1UeXBlIiwidHlwZU5hbWUiLCJ2YWx1ZXMiLCJvcHQiLCJtYWtlRW51bVR5cGUiLCJtYXAiLCJ2Iiwibm8iLCJuYW1lIiwibG9jYWxOYW1lIiwiX29wdCIsIm5hbWVzIiwiT2JqZWN0IiwiY3JlYXRlIiwibnVtYmVycyIsIm5vcm1hbFZhbHVlcyIsInZhbHVlIiwibiIsIm5vcm1hbGl6ZUVudW1WYWx1ZSIsInB1c2giLCJmaW5kTmFtZSIsImZpbmROdW1iZXIiLCJtYWtlRW51bSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExtensionContainer: () => (/* binding */ createExtensionContainer),\n/* harmony export */   filterUnknownFields: () => (/* binding */ filterUnknownFields),\n/* harmony export */   makeExtension: () => (/* binding */ makeExtension)\n/* harmony export */ });\n/* harmony import */ var _scalars_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Create a new extension using the given runtime.\n */ function makeExtension(runtime, typeName, extendee, field) {\n    let fi;\n    return {\n        typeName,\n        extendee,\n        get field () {\n            if (!fi) {\n                const i = typeof field == \"function\" ? field() : field;\n                i.name = typeName.split(\".\").pop();\n                i.jsonName = `[${typeName}]`;\n                fi = runtime.util.newFieldList([\n                    i\n                ]).list()[0];\n            }\n            return fi;\n        },\n        runtime\n    };\n}\n/**\n * Create a container that allows us to read extension fields into it with the\n * same logic as regular fields.\n */ function createExtensionContainer(extension) {\n    const localName = extension.field.localName;\n    const container = Object.create(null);\n    container[localName] = initExtensionField(extension);\n    return [\n        container,\n        ()=>container[localName]\n    ];\n}\nfunction initExtensionField(ext) {\n    const field = ext.field;\n    if (field.repeated) {\n        return [];\n    }\n    if (field.default !== undefined) {\n        return field.default;\n    }\n    switch(field.kind){\n        case \"enum\":\n            return field.T.values[0].no;\n        case \"scalar\":\n            return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_0__.scalarZeroValue)(field.T, field.L);\n        case \"message\":\n            // eslint-disable-next-line no-case-declarations\n            const T = field.T, value = new T();\n            return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;\n        case \"map\":\n            throw \"map fields are not allowed to be extensions\";\n    }\n}\n/**\n * Helper to filter unknown fields, optimized based on field type.\n */ function filterUnknownFields(unknownFields, field) {\n    if (!field.repeated && (field.kind == \"enum\" || field.kind == \"scalar\")) {\n        // singular scalar fields do not merge, we pick the last\n        for(let i = unknownFields.length - 1; i >= 0; --i){\n            if (unknownFields[i].no == field.no) {\n                return [\n                    unknownFields[i]\n                ];\n            }\n        }\n        return [];\n    }\n    return unknownFields.filter((uf)=>uf.no === field.no);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2V4dGVuc2lvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNjO0FBQ0U7QUFDakQ7O0NBRUMsR0FDTSxTQUFTRSxjQUFjQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxLQUFLO0lBQzVELElBQUlDO0lBQ0osT0FBTztRQUNISDtRQUNBQztRQUNBLElBQUlDLFNBQVE7WUFDUixJQUFJLENBQUNDLElBQUk7Z0JBQ0wsTUFBTUMsSUFBSyxPQUFPRixTQUFTLGFBQWFBLFVBQVVBO2dCQUNsREUsRUFBRUMsSUFBSSxHQUFHTCxTQUFTTSxLQUFLLENBQUMsS0FBS0MsR0FBRztnQkFDaENILEVBQUVJLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRVIsU0FBUyxDQUFDLENBQUM7Z0JBQzVCRyxLQUFLSixRQUFRVSxJQUFJLENBQUNDLFlBQVksQ0FBQztvQkFBQ047aUJBQUUsRUFBRU8sSUFBSSxFQUFFLENBQUMsRUFBRTtZQUNqRDtZQUNBLE9BQU9SO1FBQ1g7UUFDQUo7SUFDSjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sU0FBU2EseUJBQXlCQyxTQUFTO0lBQzlDLE1BQU1DLFlBQVlELFVBQVVYLEtBQUssQ0FBQ1ksU0FBUztJQUMzQyxNQUFNQyxZQUFZQyxPQUFPQyxNQUFNLENBQUM7SUFDaENGLFNBQVMsQ0FBQ0QsVUFBVSxHQUFHSSxtQkFBbUJMO0lBQzFDLE9BQU87UUFBQ0U7UUFBVyxJQUFNQSxTQUFTLENBQUNELFVBQVU7S0FBQztBQUNsRDtBQUNBLFNBQVNJLG1CQUFtQkMsR0FBRztJQUMzQixNQUFNakIsUUFBUWlCLElBQUlqQixLQUFLO0lBQ3ZCLElBQUlBLE1BQU1rQixRQUFRLEVBQUU7UUFDaEIsT0FBTyxFQUFFO0lBQ2I7SUFDQSxJQUFJbEIsTUFBTW1CLE9BQU8sS0FBS0MsV0FBVztRQUM3QixPQUFPcEIsTUFBTW1CLE9BQU87SUFDeEI7SUFDQSxPQUFRbkIsTUFBTXFCLElBQUk7UUFDZCxLQUFLO1lBQ0QsT0FBT3JCLE1BQU1zQixDQUFDLENBQUNDLE1BQU0sQ0FBQyxFQUFFLENBQUNDLEVBQUU7UUFDL0IsS0FBSztZQUNELE9BQU85Qiw0REFBZUEsQ0FBQ00sTUFBTXNCLENBQUMsRUFBRXRCLE1BQU15QixDQUFDO1FBQzNDLEtBQUs7WUFDRCxnREFBZ0Q7WUFDaEQsTUFBTUgsSUFBSXRCLE1BQU1zQixDQUFDLEVBQUVJLFFBQVEsSUFBSUo7WUFDL0IsT0FBT0EsRUFBRUssWUFBWSxHQUFHTCxFQUFFSyxZQUFZLENBQUNDLFdBQVcsQ0FBQ0YsU0FBU0E7UUFDaEUsS0FBSztZQUNELE1BQU07SUFDZDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRyxvQkFBb0JDLGFBQWEsRUFBRTlCLEtBQUs7SUFDcEQsSUFBSSxDQUFDQSxNQUFNa0IsUUFBUSxJQUFLbEIsQ0FBQUEsTUFBTXFCLElBQUksSUFBSSxVQUFVckIsTUFBTXFCLElBQUksSUFBSSxRQUFPLEdBQUk7UUFDckUsd0RBQXdEO1FBQ3hELElBQUssSUFBSW5CLElBQUk0QixjQUFjQyxNQUFNLEdBQUcsR0FBRzdCLEtBQUssR0FBRyxFQUFFQSxFQUFHO1lBQ2hELElBQUk0QixhQUFhLENBQUM1QixFQUFFLENBQUNzQixFQUFFLElBQUl4QixNQUFNd0IsRUFBRSxFQUFFO2dCQUNqQyxPQUFPO29CQUFDTSxhQUFhLENBQUM1QixFQUFFO2lCQUFDO1lBQzdCO1FBQ0o7UUFDQSxPQUFPLEVBQUU7SUFDYjtJQUNBLE9BQU80QixjQUFjRSxNQUFNLENBQUMsQ0FBQ0MsS0FBT0EsR0FBR1QsRUFBRSxLQUFLeEIsTUFBTXdCLEVBQUU7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvZXh0ZW5zaW9ucy5qcz80Njk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBzY2FsYXJaZXJvVmFsdWUgfSBmcm9tIFwiLi9zY2FsYXJzLmpzXCI7XG5pbXBvcnQgeyBXaXJlVHlwZSB9IGZyb20gXCIuLi9iaW5hcnktZW5jb2RpbmcuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGV4dGVuc2lvbiB1c2luZyB0aGUgZ2l2ZW4gcnVudGltZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFeHRlbnNpb24ocnVudGltZSwgdHlwZU5hbWUsIGV4dGVuZGVlLCBmaWVsZCkge1xuICAgIGxldCBmaTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlTmFtZSxcbiAgICAgICAgZXh0ZW5kZWUsXG4gICAgICAgIGdldCBmaWVsZCgpIHtcbiAgICAgICAgICAgIGlmICghZmkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gKHR5cGVvZiBmaWVsZCA9PSBcImZ1bmN0aW9uXCIgPyBmaWVsZCgpIDogZmllbGQpO1xuICAgICAgICAgICAgICAgIGkubmFtZSA9IHR5cGVOYW1lLnNwbGl0KFwiLlwiKS5wb3AoKTtcbiAgICAgICAgICAgICAgICBpLmpzb25OYW1lID0gYFske3R5cGVOYW1lfV1gO1xuICAgICAgICAgICAgICAgIGZpID0gcnVudGltZS51dGlsLm5ld0ZpZWxkTGlzdChbaV0pLmxpc3QoKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaTtcbiAgICAgICAgfSxcbiAgICAgICAgcnVudGltZSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBjb250YWluZXIgdGhhdCBhbGxvd3MgdXMgdG8gcmVhZCBleHRlbnNpb24gZmllbGRzIGludG8gaXQgd2l0aCB0aGVcbiAqIHNhbWUgbG9naWMgYXMgcmVndWxhciBmaWVsZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRlbnNpb25Db250YWluZXIoZXh0ZW5zaW9uKSB7XG4gICAgY29uc3QgbG9jYWxOYW1lID0gZXh0ZW5zaW9uLmZpZWxkLmxvY2FsTmFtZTtcbiAgICBjb25zdCBjb250YWluZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnRhaW5lcltsb2NhbE5hbWVdID0gaW5pdEV4dGVuc2lvbkZpZWxkKGV4dGVuc2lvbik7XG4gICAgcmV0dXJuIFtjb250YWluZXIsICgpID0+IGNvbnRhaW5lcltsb2NhbE5hbWVdXTtcbn1cbmZ1bmN0aW9uIGluaXRFeHRlbnNpb25GaWVsZChleHQpIHtcbiAgICBjb25zdCBmaWVsZCA9IGV4dC5maWVsZDtcbiAgICBpZiAoZmllbGQucmVwZWF0ZWQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoZmllbGQuZGVmYXVsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZC5kZWZhdWx0O1xuICAgIH1cbiAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgIHJldHVybiBmaWVsZC5ULnZhbHVlc1swXS5ubztcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgcmV0dXJuIHNjYWxhclplcm9WYWx1ZShmaWVsZC5ULCBmaWVsZC5MKTtcbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgY29uc3QgVCA9IGZpZWxkLlQsIHZhbHVlID0gbmV3IFQoKTtcbiAgICAgICAgICAgIHJldHVybiBULmZpZWxkV3JhcHBlciA/IFQuZmllbGRXcmFwcGVyLnVud3JhcEZpZWxkKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICB0aHJvdyBcIm1hcCBmaWVsZHMgYXJlIG5vdCBhbGxvd2VkIHRvIGJlIGV4dGVuc2lvbnNcIjtcbiAgICB9XG59XG4vKipcbiAqIEhlbHBlciB0byBmaWx0ZXIgdW5rbm93biBmaWVsZHMsIG9wdGltaXplZCBiYXNlZCBvbiBmaWVsZCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyVW5rbm93bkZpZWxkcyh1bmtub3duRmllbGRzLCBmaWVsZCkge1xuICAgIGlmICghZmllbGQucmVwZWF0ZWQgJiYgKGZpZWxkLmtpbmQgPT0gXCJlbnVtXCIgfHwgZmllbGQua2luZCA9PSBcInNjYWxhclwiKSkge1xuICAgICAgICAvLyBzaW5ndWxhciBzY2FsYXIgZmllbGRzIGRvIG5vdCBtZXJnZSwgd2UgcGljayB0aGUgbGFzdFxuICAgICAgICBmb3IgKGxldCBpID0gdW5rbm93bkZpZWxkcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgaWYgKHVua25vd25GaWVsZHNbaV0ubm8gPT0gZmllbGQubm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3Vua25vd25GaWVsZHNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHVua25vd25GaWVsZHMuZmlsdGVyKCh1ZikgPT4gdWYubm8gPT09IGZpZWxkLm5vKTtcbn1cbiJdLCJuYW1lcyI6WyJzY2FsYXJaZXJvVmFsdWUiLCJXaXJlVHlwZSIsIm1ha2VFeHRlbnNpb24iLCJydW50aW1lIiwidHlwZU5hbWUiLCJleHRlbmRlZSIsImZpZWxkIiwiZmkiLCJpIiwibmFtZSIsInNwbGl0IiwicG9wIiwianNvbk5hbWUiLCJ1dGlsIiwibmV3RmllbGRMaXN0IiwibGlzdCIsImNyZWF0ZUV4dGVuc2lvbkNvbnRhaW5lciIsImV4dGVuc2lvbiIsImxvY2FsTmFtZSIsImNvbnRhaW5lciIsIk9iamVjdCIsImNyZWF0ZSIsImluaXRFeHRlbnNpb25GaWVsZCIsImV4dCIsInJlcGVhdGVkIiwiZGVmYXVsdCIsInVuZGVmaW5lZCIsImtpbmQiLCJUIiwidmFsdWVzIiwibm8iLCJMIiwidmFsdWUiLCJmaWVsZFdyYXBwZXIiLCJ1bndyYXBGaWVsZCIsImZpbHRlclVua25vd25GaWVsZHMiLCJ1bmtub3duRmllbGRzIiwibGVuZ3RoIiwiZmlsdGVyIiwidWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js":
/*!**********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalFieldList: () => (/* binding */ InternalFieldList)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass InternalFieldList {\n    constructor(fields, normalizer){\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()){\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()){\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list().concat().sort((a, b)=>a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()){\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                } else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLWxpc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUMxQixNQUFNQTtJQUNUQyxZQUFZQyxNQUFNLEVBQUVDLFVBQVUsQ0FBRTtRQUM1QixJQUFJLENBQUNDLE9BQU8sR0FBR0Y7UUFDZixJQUFJLENBQUNHLFdBQVcsR0FBR0Y7SUFDdkI7SUFDQUcsYUFBYUMsUUFBUSxFQUFFO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtZQUNqQixNQUFNQyxJQUFJLENBQUM7WUFDWCxLQUFLLE1BQU1DLEtBQUssSUFBSSxDQUFDQyxJQUFJLEdBQUk7Z0JBQ3pCRixDQUFDLENBQUNDLEVBQUVILFFBQVEsQ0FBQyxHQUFHRSxDQUFDLENBQUNDLEVBQUVFLElBQUksQ0FBQyxHQUFHRjtZQUNoQztZQUNBLElBQUksQ0FBQ0YsU0FBUyxHQUFHQztRQUNyQjtRQUNBLE9BQU8sSUFBSSxDQUFDRCxTQUFTLENBQUNELFNBQVM7SUFDbkM7SUFDQU0sS0FBS0MsT0FBTyxFQUFFO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ2YsTUFBTU4sSUFBSSxDQUFDO1lBQ1gsS0FBSyxNQUFNQyxLQUFLLElBQUksQ0FBQ0MsSUFBSSxHQUFJO2dCQUN6QkYsQ0FBQyxDQUFDQyxFQUFFTSxFQUFFLENBQUMsR0FBR047WUFDZDtZQUNBLElBQUksQ0FBQ0ssT0FBTyxHQUFHTjtRQUNuQjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxPQUFPLENBQUNELFFBQVE7SUFDaEM7SUFDQUgsT0FBTztRQUNILElBQUksQ0FBQyxJQUFJLENBQUNNLEdBQUcsRUFBRTtZQUNYLElBQUksQ0FBQ0EsR0FBRyxHQUFHLElBQUksQ0FBQ1osV0FBVyxDQUFDLElBQUksQ0FBQ0QsT0FBTztRQUM1QztRQUNBLE9BQU8sSUFBSSxDQUFDYSxHQUFHO0lBQ25CO0lBQ0FDLFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDQyxVQUFVLEVBQUU7WUFDbEIsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDUixJQUFJLEdBQ3RCUyxNQUFNLEdBQ05DLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFTixFQUFFLEdBQUdPLEVBQUVQLEVBQUU7UUFDbkM7UUFDQSxPQUFPLElBQUksQ0FBQ0csVUFBVTtJQUMxQjtJQUNBSyxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ2YsSUFBSSxDQUFDQSxPQUFPLEdBQUcsRUFBRTtZQUNqQixNQUFNSCxJQUFJLElBQUksQ0FBQ0csT0FBTztZQUN0QixJQUFJQztZQUNKLEtBQUssTUFBTWhCLEtBQUssSUFBSSxDQUFDQyxJQUFJLEdBQUk7Z0JBQ3pCLElBQUlELEVBQUVpQixLQUFLLEVBQUU7b0JBQ1QsSUFBSWpCLEVBQUVpQixLQUFLLEtBQUtELEdBQUc7d0JBQ2ZBLElBQUloQixFQUFFaUIsS0FBSzt3QkFDWEwsRUFBRU0sSUFBSSxDQUFDRjtvQkFDWDtnQkFDSixPQUNLO29CQUNESixFQUFFTSxJQUFJLENBQUNsQjtnQkFDWDtZQUNKO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQ2UsT0FBTztJQUN2QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLWxpc3QuanM/NTE2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuZXhwb3J0IGNsYXNzIEludGVybmFsRmllbGRMaXN0IHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIG5vcm1hbGl6ZXIpIHtcbiAgICAgICAgdGhpcy5fZmllbGRzID0gZmllbGRzO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVyID0gbm9ybWFsaXplcjtcbiAgICB9XG4gICAgZmluZEpzb25OYW1lKGpzb25OYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5qc29uTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiB0aGlzLmxpc3QoKSkge1xuICAgICAgICAgICAgICAgIHRbZi5qc29uTmFtZV0gPSB0W2YubmFtZV0gPSBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5qc29uTmFtZXMgPSB0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmpzb25OYW1lc1tqc29uTmFtZV07XG4gICAgfVxuICAgIGZpbmQoZmllbGRObykge1xuICAgICAgICBpZiAoIXRoaXMubnVtYmVycykge1xuICAgICAgICAgICAgY29uc3QgdCA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBmIG9mIHRoaXMubGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgdFtmLm5vXSA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm51bWJlcnMgPSB0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm51bWJlcnNbZmllbGROb107XG4gICAgfVxuICAgIGxpc3QoKSB7XG4gICAgICAgIGlmICghdGhpcy5hbGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWxsID0gdGhpcy5fbm9ybWFsaXplcih0aGlzLl9maWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFsbDtcbiAgICB9XG4gICAgYnlOdW1iZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5udW1iZXJzQXNjKSB7XG4gICAgICAgICAgICB0aGlzLm51bWJlcnNBc2MgPSB0aGlzLmxpc3QoKVxuICAgICAgICAgICAgICAgIC5jb25jYXQoKVxuICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm5vIC0gYi5ubyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyc0FzYztcbiAgICB9XG4gICAgYnlNZW1iZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5tZW1iZXJzKSB7XG4gICAgICAgICAgICB0aGlzLm1lbWJlcnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLm1lbWJlcnM7XG4gICAgICAgICAgICBsZXQgbztcbiAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiB0aGlzLmxpc3QoKSkge1xuICAgICAgICAgICAgICAgIGlmIChmLm9uZW9mKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmLm9uZW9mICE9PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gZi5vbmVvZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaChvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJJbnRlcm5hbEZpZWxkTGlzdCIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwibm9ybWFsaXplciIsIl9maWVsZHMiLCJfbm9ybWFsaXplciIsImZpbmRKc29uTmFtZSIsImpzb25OYW1lIiwianNvbk5hbWVzIiwidCIsImYiLCJsaXN0IiwibmFtZSIsImZpbmQiLCJmaWVsZE5vIiwibnVtYmVycyIsIm5vIiwiYWxsIiwiYnlOdW1iZXIiLCJudW1iZXJzQXNjIiwiY29uY2F0Iiwic29ydCIsImEiLCJiIiwiYnlNZW1iZXIiLCJtZW1iZXJzIiwibyIsIm9uZW9mIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js":
/*!***************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeFieldInfos: () => (/* binding */ normalizeFieldInfos)\n/* harmony export */ });\n/* harmony import */ var _field_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./field.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field.js\");\n/* harmony import */ var _names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./names.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/names.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * Convert a collection of field info to an array of normalized FieldInfo.\n *\n * The argument `packedByDefault` specifies whether fields that do not specify\n * `packed` should be packed (proto3) or unpacked (proto2).\n */ function normalizeFieldInfos(fieldInfos, packedByDefault) {\n    var _a, _b, _c, _d, _e, _f;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\" ? fieldInfos() : fieldInfos){\n        const f = field;\n        f.localName = (0,_names_js__WEBPACK_IMPORTED_MODULE_0__.localFieldName)(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : (0,_names_js__WEBPACK_IMPORTED_MODULE_0__.fieldJsonName)(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : _scalar_js__WEBPACK_IMPORTED_MODULE_1__.LongType.BIGINT;\n        }\n        f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;\n        f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;\n        f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;\n        if (field.packed === undefined) {\n            if (packedByDefault) {\n                f.packed = field.kind == \"enum\" || field.kind == \"scalar\" && field.T != _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.BYTES && field.T != _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.STRING;\n            } else {\n                f.packed = false;\n            }\n        }\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new _field_js__WEBPACK_IMPORTED_MODULE_2__.InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLW5vcm1hbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2M7QUFDWTtBQUNQO0FBQ3BEOzs7OztDQUtDLEdBQ00sU0FBU0ssb0JBQW9CQyxVQUFVLEVBQUVDLGVBQWU7SUFDM0QsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUM7SUFDeEIsTUFBTUMsSUFBSSxFQUFFO0lBQ1osSUFBSUM7SUFDSixLQUFLLE1BQU1DLFNBQVMsT0FBT1YsY0FBYyxhQUNuQ0EsZUFDQUEsV0FBWTtRQUNkLE1BQU1XLElBQUlEO1FBQ1ZDLEVBQUVDLFNBQVMsR0FBR2hCLHlEQUFjQSxDQUFDYyxNQUFNRyxJQUFJLEVBQUVILE1BQU1JLEtBQUssS0FBS0M7UUFDekRKLEVBQUVLLFFBQVEsR0FBRyxDQUFDZCxLQUFLUSxNQUFNTSxRQUFRLE1BQU0sUUFBUWQsT0FBTyxLQUFLLElBQUlBLEtBQUtQLHdEQUFhQSxDQUFDZSxNQUFNRyxJQUFJO1FBQzVGRixFQUFFTSxRQUFRLEdBQUcsQ0FBQ2QsS0FBS08sTUFBTU8sUUFBUSxNQUFNLFFBQVFkLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQ3BFLElBQUlPLE1BQU1RLElBQUksSUFBSSxVQUFVO1lBQ3hCUCxFQUFFUSxDQUFDLEdBQUcsQ0FBQ2YsS0FBS00sTUFBTVMsQ0FBQyxNQUFNLFFBQVFmLE9BQU8sS0FBSyxJQUFJQSxLQUFLUCxnREFBUUEsQ0FBQ3VCLE1BQU07UUFDekU7UUFDQVQsRUFBRVUsU0FBUyxHQUFHLENBQUNoQixLQUFLSyxNQUFNVyxTQUFTLE1BQU0sUUFBUWhCLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQ3RFTSxFQUFFVyxHQUFHLEdBQUcsQ0FBQ2hCLEtBQUtJLE1BQU1ZLEdBQUcsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDMURLLEVBQUVZLEdBQUcsR0FBRyxDQUFDaEIsS0FBS0csTUFBTWEsR0FBRyxNQUFNLFFBQVFoQixPQUFPLEtBQUssSUFBSUEsS0FBSztRQUMxRCxJQUFJRyxNQUFNYyxNQUFNLEtBQUtULFdBQVc7WUFDNUIsSUFBSWQsaUJBQWlCO2dCQUNqQlUsRUFBRWEsTUFBTSxHQUNKZCxNQUFNUSxJQUFJLElBQUksVUFDVFIsTUFBTVEsSUFBSSxJQUFJLFlBQ1hSLE1BQU1lLENBQUMsSUFBSTNCLGtEQUFVQSxDQUFDNEIsS0FBSyxJQUMzQmhCLE1BQU1lLENBQUMsSUFBSTNCLGtEQUFVQSxDQUFDNkIsTUFBTTtZQUM1QyxPQUNLO2dCQUNEaEIsRUFBRWEsTUFBTSxHQUFHO1lBQ2Y7UUFDSjtRQUNBLHlDQUF5QztRQUN6QyxvREFBb0Q7UUFDcEQsSUFBSWQsTUFBTUksS0FBSyxLQUFLQyxXQUFXO1lBQzNCLE1BQU1hLFNBQVMsT0FBT2xCLE1BQU1JLEtBQUssSUFBSSxXQUFXSixNQUFNSSxLQUFLLEdBQUdKLE1BQU1JLEtBQUssQ0FBQ0QsSUFBSTtZQUM5RSxJQUFJLENBQUNKLEtBQUtBLEVBQUVJLElBQUksSUFBSWUsUUFBUTtnQkFDeEJuQixJQUFJLElBQUlmLHdEQUFpQkEsQ0FBQ2tDO1lBQzlCO1lBQ0FqQixFQUFFRyxLQUFLLEdBQUdMO1lBQ1ZBLEVBQUVvQixRQUFRLENBQUNsQjtRQUNmO1FBQ0FILEVBQUVzQixJQUFJLENBQUNuQjtJQUNYO0lBQ0EsT0FBT0g7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9maWVsZC1ub3JtYWxpemUuanM/MjZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgSW50ZXJuYWxPbmVvZkluZm8gfSBmcm9tIFwiLi9maWVsZC5qc1wiO1xuaW1wb3J0IHsgZmllbGRKc29uTmFtZSwgbG9jYWxGaWVsZE5hbWUgfSBmcm9tIFwiLi9uYW1lcy5qc1wiO1xuaW1wb3J0IHsgTG9uZ1R5cGUsIFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vc2NhbGFyLmpzXCI7XG4vKipcbiAqIENvbnZlcnQgYSBjb2xsZWN0aW9uIG9mIGZpZWxkIGluZm8gdG8gYW4gYXJyYXkgb2Ygbm9ybWFsaXplZCBGaWVsZEluZm8uXG4gKlxuICogVGhlIGFyZ3VtZW50IGBwYWNrZWRCeURlZmF1bHRgIHNwZWNpZmllcyB3aGV0aGVyIGZpZWxkcyB0aGF0IGRvIG5vdCBzcGVjaWZ5XG4gKiBgcGFja2VkYCBzaG91bGQgYmUgcGFja2VkIChwcm90bzMpIG9yIHVucGFja2VkIChwcm90bzIpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRmllbGRJbmZvcyhmaWVsZEluZm9zLCBwYWNrZWRCeURlZmF1bHQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICBjb25zdCByID0gW107XG4gICAgbGV0IG87XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlb2YgZmllbGRJbmZvcyA9PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBmaWVsZEluZm9zKClcbiAgICAgICAgOiBmaWVsZEluZm9zKSB7XG4gICAgICAgIGNvbnN0IGYgPSBmaWVsZDtcbiAgICAgICAgZi5sb2NhbE5hbWUgPSBsb2NhbEZpZWxkTmFtZShmaWVsZC5uYW1lLCBmaWVsZC5vbmVvZiAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgZi5qc29uTmFtZSA9IChfYSA9IGZpZWxkLmpzb25OYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmaWVsZEpzb25OYW1lKGZpZWxkLm5hbWUpO1xuICAgICAgICBmLnJlcGVhdGVkID0gKF9iID0gZmllbGQucmVwZWF0ZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICBpZiAoZmllbGQua2luZCA9PSBcInNjYWxhclwiKSB7XG4gICAgICAgICAgICBmLkwgPSAoX2MgPSBmaWVsZC5MKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBMb25nVHlwZS5CSUdJTlQ7XG4gICAgICAgIH1cbiAgICAgICAgZi5kZWxpbWl0ZWQgPSAoX2QgPSBmaWVsZC5kZWxpbWl0ZWQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZhbHNlO1xuICAgICAgICBmLnJlcSA9IChfZSA9IGZpZWxkLnJlcSkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogZmFsc2U7XG4gICAgICAgIGYub3B0ID0gKF9mID0gZmllbGQub3B0KSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiBmYWxzZTtcbiAgICAgICAgaWYgKGZpZWxkLnBhY2tlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAocGFja2VkQnlEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgZi5wYWNrZWQgPVxuICAgICAgICAgICAgICAgICAgICBmaWVsZC5raW5kID09IFwiZW51bVwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZmllbGQua2luZCA9PSBcInNjYWxhclwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuVCAhPSBTY2FsYXJUeXBlLkJZVEVTICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuVCAhPSBTY2FsYXJUeXBlLlNUUklORyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmLnBhY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGRvIG5vdCBzdXJmYWNlIG9wdGlvbnMgYXQgdGhpcyB0aW1lXG4gICAgICAgIC8vIGYub3B0aW9ucyA9IGZpZWxkLm9wdGlvbnMgPz8gZW1wdHlSZWFkb25seU9iamVjdDtcbiAgICAgICAgaWYgKGZpZWxkLm9uZW9mICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9vbmFtZSA9IHR5cGVvZiBmaWVsZC5vbmVvZiA9PSBcInN0cmluZ1wiID8gZmllbGQub25lb2YgOiBmaWVsZC5vbmVvZi5uYW1lO1xuICAgICAgICAgICAgaWYgKCFvIHx8IG8ubmFtZSAhPSBvb25hbWUpIHtcbiAgICAgICAgICAgICAgICBvID0gbmV3IEludGVybmFsT25lb2ZJbmZvKG9vbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmLm9uZW9mID0gbztcbiAgICAgICAgICAgIG8uYWRkRmllbGQoZik7XG4gICAgICAgIH1cbiAgICAgICAgci5wdXNoKGYpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbiJdLCJuYW1lcyI6WyJJbnRlcm5hbE9uZW9mSW5mbyIsImZpZWxkSnNvbk5hbWUiLCJsb2NhbEZpZWxkTmFtZSIsIkxvbmdUeXBlIiwiU2NhbGFyVHlwZSIsIm5vcm1hbGl6ZUZpZWxkSW5mb3MiLCJmaWVsZEluZm9zIiwicGFja2VkQnlEZWZhdWx0IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiciIsIm8iLCJmaWVsZCIsImYiLCJsb2NhbE5hbWUiLCJuYW1lIiwib25lb2YiLCJ1bmRlZmluZWQiLCJqc29uTmFtZSIsInJlcGVhdGVkIiwia2luZCIsIkwiLCJCSUdJTlQiLCJkZWxpbWl0ZWQiLCJyZXEiLCJvcHQiLCJwYWNrZWQiLCJUIiwiQllURVMiLCJTVFJJTkciLCJvb25hbWUiLCJhZGRGaWVsZCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUnwrappedFieldType: () => (/* binding */ getUnwrappedFieldType),\n/* harmony export */   wrapField: () => (/* binding */ wrapField)\n/* harmony export */ });\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n/* harmony import */ var _is_message_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../is-message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */ function wrapField(type, value) {\n    if ((0,_is_message_js__WEBPACK_IMPORTED_MODULE_0__.isMessage)(value) || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */ function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.BOOL,\n    \"google.protobuf.StringValue\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.STRING,\n    \"google.protobuf.BytesValue\": _scalar_js__WEBPACK_IMPORTED_MODULE_1__.ScalarType.BYTES\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLXdyYXBwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNPO0FBQ0U7QUFDRztBQUM3Qzs7O0NBR0MsR0FDTSxTQUFTRyxVQUFVQyxJQUFJLEVBQUVDLEtBQUs7SUFDakMsSUFBSUgseURBQVNBLENBQUNHLFVBQVUsQ0FBQ0QsS0FBS0UsWUFBWSxFQUFFO1FBQ3hDLE9BQU9EO0lBQ1g7SUFDQSxPQUFPRCxLQUFLRSxZQUFZLENBQUNILFNBQVMsQ0FBQ0U7QUFDdkM7QUFDQTs7O0NBR0MsR0FDTSxTQUFTRSxzQkFBc0JDLEtBQUs7SUFDdkMsSUFBSUEsTUFBTUMsU0FBUyxLQUFLLFdBQVc7UUFDL0IsT0FBT0M7SUFDWDtJQUNBLElBQUlGLE1BQU1HLFFBQVEsRUFBRTtRQUNoQixPQUFPRDtJQUNYO0lBQ0EsSUFBSUYsTUFBTUksS0FBSyxJQUFJRixXQUFXO1FBQzFCLE9BQU9BO0lBQ1g7SUFDQSxPQUFPRyxzQkFBc0IsQ0FBQ0wsTUFBTU0sT0FBTyxDQUFDQyxRQUFRLENBQUM7QUFDekQ7QUFDQSxNQUFNRix5QkFBeUI7SUFDM0IsK0JBQStCWixrREFBVUEsQ0FBQ2UsTUFBTTtJQUNoRCw4QkFBOEJmLGtEQUFVQSxDQUFDZ0IsS0FBSztJQUM5Qyw4QkFBOEJoQixrREFBVUEsQ0FBQ2lCLEtBQUs7SUFDOUMsK0JBQStCakIsa0RBQVVBLENBQUNrQixNQUFNO0lBQ2hELDhCQUE4QmxCLGtEQUFVQSxDQUFDbUIsS0FBSztJQUM5QywrQkFBK0JuQixrREFBVUEsQ0FBQ29CLE1BQU07SUFDaEQsNkJBQTZCcEIsa0RBQVVBLENBQUNxQixJQUFJO0lBQzVDLCtCQUErQnJCLGtEQUFVQSxDQUFDc0IsTUFBTTtJQUNoRCw4QkFBOEJ0QixrREFBVUEsQ0FBQ3VCLEtBQUs7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvZmllbGQtd3JhcHBlci5qcz9jOWM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2UuanNcIjtcbmltcG9ydCB7IFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vc2NhbGFyLmpzXCI7XG5pbXBvcnQgeyBpc01lc3NhZ2UgfSBmcm9tIFwiLi4vaXMtbWVzc2FnZS5qc1wiO1xuLyoqXG4gKiBXcmFwIGEgcHJpbWl0aXZlIG1lc3NhZ2UgZmllbGQgdmFsdWUgaW4gaXRzIGNvcnJlc3BvbmRpbmcgd3JhcHBlclxuICogbWVzc2FnZS4gVGhpcyBmdW5jdGlvbiBpcyBpZGVtcG90ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcEZpZWxkKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKGlzTWVzc2FnZSh2YWx1ZSkgfHwgIXR5cGUuZmllbGRXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGUuZmllbGRXcmFwcGVyLndyYXBGaWVsZCh2YWx1ZSk7XG59XG4vKipcbiAqIElmIHRoZSBnaXZlbiBmaWVsZCB1c2VzIG9uZSBvZiB0aGUgd2VsbC1rbm93biB3cmFwcGVyIHR5cGVzLCByZXR1cm5cbiAqIHRoZSBwcmltaXRpdmUgdHlwZSBpdCB3cmFwcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVud3JhcHBlZEZpZWxkVHlwZShmaWVsZCkge1xuICAgIGlmIChmaWVsZC5maWVsZEtpbmQgIT09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChmaWVsZC5yZXBlYXRlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoZmllbGQub25lb2YgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB3a3RXcmFwcGVyVG9TY2FsYXJUeXBlW2ZpZWxkLm1lc3NhZ2UudHlwZU5hbWVdO1xufVxuY29uc3Qgd2t0V3JhcHBlclRvU2NhbGFyVHlwZSA9IHtcbiAgICBcImdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZVwiOiBTY2FsYXJUeXBlLkRPVUJMRSxcbiAgICBcImdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlXCI6IFNjYWxhclR5cGUuRkxPQVQsXG4gICAgXCJnb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZVwiOiBTY2FsYXJUeXBlLklOVDY0LFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLlVJbnQ2NFZhbHVlXCI6IFNjYWxhclR5cGUuVUlOVDY0LFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWVcIjogU2NhbGFyVHlwZS5JTlQzMixcbiAgICBcImdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZVwiOiBTY2FsYXJUeXBlLlVJTlQzMixcbiAgICBcImdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVcIjogU2NhbGFyVHlwZS5CT09MLFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlXCI6IFNjYWxhclR5cGUuU1RSSU5HLFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLkJ5dGVzVmFsdWVcIjogU2NhbGFyVHlwZS5CWVRFUyxcbn07XG4iXSwibmFtZXMiOlsiTWVzc2FnZSIsIlNjYWxhclR5cGUiLCJpc01lc3NhZ2UiLCJ3cmFwRmllbGQiLCJ0eXBlIiwidmFsdWUiLCJmaWVsZFdyYXBwZXIiLCJnZXRVbndyYXBwZWRGaWVsZFR5cGUiLCJmaWVsZCIsImZpZWxkS2luZCIsInVuZGVmaW5lZCIsInJlcGVhdGVkIiwib25lb2YiLCJ3a3RXcmFwcGVyVG9TY2FsYXJUeXBlIiwibWVzc2FnZSIsInR5cGVOYW1lIiwiRE9VQkxFIiwiRkxPQVQiLCJJTlQ2NCIsIlVJTlQ2NCIsIklOVDMyIiwiVUlOVDMyIiwiQk9PTCIsIlNUUklORyIsIkJZVEVTIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InternalOneofInfo: () => (/* binding */ InternalOneofInfo)\n/* harmony export */ });\n/* harmony import */ var _names_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./names.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/names.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nclass InternalOneofInfo {\n    constructor(name){\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.req = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = (0,_names_js__WEBPACK_IMPORTED_MODULE_0__.localOneofName)(name);\n    }\n    addField(field) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for(let i = 0; i < this.fields.length; i++){\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNXO0FBQ1A7QUFDOUIsTUFBTUU7SUFDVEMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUNDLE9BQU8sR0FBR0M7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hCLElBQUksQ0FBQ1IsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ1MsU0FBUyxHQUFHYix5REFBY0EsQ0FBQ0k7SUFDcEM7SUFDQVUsU0FBU0MsS0FBSyxFQUFFO1FBQ1pkLGtEQUFNQSxDQUFDYyxNQUFNQyxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFRCxNQUFNWCxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQ0EsSUFBSSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDUSxNQUFNLENBQUNLLElBQUksQ0FBQ0Y7SUFDckI7SUFDQUcsVUFBVUwsU0FBUyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNNLE9BQU8sRUFBRTtZQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHQyxPQUFPQyxNQUFNLENBQUM7WUFDN0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDVixNQUFNLENBQUNXLE1BQU0sRUFBRUQsSUFBSztnQkFDekMsSUFBSSxDQUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDUCxNQUFNLENBQUNVLEVBQUUsQ0FBQ1QsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNVLEVBQUU7WUFDM0Q7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNOLFVBQVU7SUFDbEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9maWVsZC5qcz9hNmYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBsb2NhbE9uZW9mTmFtZSB9IGZyb20gXCIuL25hbWVzLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi9hc3NlcnQuanNcIjtcbmV4cG9ydCBjbGFzcyBJbnRlcm5hbE9uZW9mSW5mbyB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLmtpbmQgPSBcIm9uZW9mXCI7XG4gICAgICAgIHRoaXMucmVwZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wYWNrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXEgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IFtdO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmxvY2FsTmFtZSA9IGxvY2FsT25lb2ZOYW1lKG5hbWUpO1xuICAgIH1cbiAgICBhZGRGaWVsZChmaWVsZCkge1xuICAgICAgICBhc3NlcnQoZmllbGQub25lb2YgPT09IHRoaXMsIGBmaWVsZCAke2ZpZWxkLm5hbWV9IG5vdCBvbmUgb2YgJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIHRoaXMuZmllbGRzLnB1c2goZmllbGQpO1xuICAgIH1cbiAgICBmaW5kRmllbGQobG9jYWxOYW1lKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9va3VwKSB7XG4gICAgICAgICAgICB0aGlzLl9sb29rdXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvb2t1cFt0aGlzLmZpZWxkc1tpXS5sb2NhbE5hbWVdID0gdGhpcy5maWVsZHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvb2t1cFtsb2NhbE5hbWVdO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJsb2NhbE9uZW9mTmFtZSIsImFzc2VydCIsIkludGVybmFsT25lb2ZJbmZvIiwiY29uc3RydWN0b3IiLCJuYW1lIiwia2luZCIsInJlcGVhdGVkIiwicGFja2VkIiwib3B0IiwicmVxIiwiZGVmYXVsdCIsInVuZGVmaW5lZCIsImZpZWxkcyIsImxvY2FsTmFtZSIsImFkZEZpZWxkIiwiZmllbGQiLCJvbmVvZiIsInB1c2giLCJmaW5kRmllbGQiLCJfbG9va3VwIiwiT2JqZWN0IiwiY3JlYXRlIiwiaSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeJsonFormat: () => (/* binding */ makeJsonFormat)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n/* harmony import */ var _proto_int64_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../proto-int64.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\");\n/* harmony import */ var _proto_base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../proto-base64.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js\");\n/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js\");\n/* harmony import */ var _extension_accessor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extension-accessor.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js\");\n/* harmony import */ var _reflect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reflect.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js\");\n/* harmony import */ var _field_wrapper_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./field-wrapper.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js\");\n/* harmony import */ var _scalars_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n/* harmony import */ var _is_message_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../is-message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */ // Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nconst tokenNull = Symbol();\nconst tokenIgnoredUnknownEnum = Symbol();\nfunction makeJsonFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage (type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = new Map();\n            const registry = options.typeRegistry;\n            for (const [jsonKey, jsonValue] of Object.entries(json)){\n                const field = type.fields.findJsonName(jsonKey);\n                if (field) {\n                    if (field.oneof) {\n                        if (jsonValue === null && field.kind == \"scalar\") {\n                            continue;\n                        }\n                        const seen = oneofSeen.get(field.oneof);\n                        if (seen !== undefined) {\n                            throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                        }\n                        oneofSeen.set(field.oneof, jsonKey);\n                    }\n                    readField(message, jsonValue, field, options, type);\n                } else {\n                    let found = false;\n                    if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) && jsonKey.startsWith(\"[\") && jsonKey.endsWith(\"]\")) {\n                        const ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));\n                        if (ext && ext.extendee.typeName == type.typeName) {\n                            found = true;\n                            const [container, get] = (0,_extensions_js__WEBPACK_IMPORTED_MODULE_0__.createExtensionContainer)(ext);\n                            readField(container, jsonValue, ext.field, options, ext);\n                            // We pass on the options as BinaryReadOptions/BinaryWriteOptions,\n                            // so that users can bring their own binary reader and writer factories\n                            // if necessary.\n                            (0,_extension_accessor_js__WEBPACK_IMPORTED_MODULE_1__.setExtension)(message, ext, get(), options);\n                        }\n                    }\n                    if (!found && !options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage (message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (field of type.fields.byNumber()){\n                    if (!(0,_reflect_js__WEBPACK_IMPORTED_MODULE_2__.isFieldSet)(field, message)) {\n                        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                        if (field.req) {\n                            throw `required field not set`;\n                        }\n                        if (!options.emitDefaultValues) {\n                            continue;\n                        }\n                        if (!canEmitFieldDefaultValue(field)) {\n                            continue;\n                        }\n                    }\n                    const value = field.oneof ? message[field.oneof.localName].value : message[field.localName];\n                    const jsonValue = writeField(field, value, options);\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                    }\n                }\n                const registry = options.typeRegistry;\n                if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {\n                    for (const uf of type.runtime.bin.listUnknownFields(message)){\n                        const ext = registry.findExtensionFor(type.typeName, uf.no);\n                        if (ext && (0,_extension_accessor_js__WEBPACK_IMPORTED_MODULE_1__.hasExtension)(message, ext)) {\n                            // We pass on the options as BinaryReadOptions, so that users can bring their own\n                            // binary reader factory if necessary.\n                            const value = (0,_extension_accessor_js__WEBPACK_IMPORTED_MODULE_1__.getExtension)(message, ext, options);\n                            const jsonValue = writeField(ext.field, value, options);\n                            if (jsonValue !== undefined) {\n                                json[ext.field.jsonName] = jsonValue;\n                            }\n                        }\n                    }\n                }\n            } catch (e) {\n                const m = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar (type, json, longType) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            return readScalar(type, json, longType !== null && longType !== void 0 ? longType : _scalar_js__WEBPACK_IMPORTED_MODULE_3__.LongType.BIGINT, true);\n        },\n        writeScalar (type, value, emitDefaultValues) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            if (emitDefaultValues || (0,_scalars_js__WEBPACK_IMPORTED_MODULE_4__.isScalarZeroValue)(type, value)) {\n                return writeScalar(type, value);\n            }\n            return undefined;\n        },\n        debug: debugJsonValue\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch(typeof json){\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// Read a JSON value for a field.\n// The \"parentType\" argument is only used to provide context in errors.\nfunction readField(target, jsonValue, field, options, parentType) {\n    let localName = field.localName;\n    if (field.repeated) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(field.kind != \"map\");\n        if (jsonValue === null) {\n            return;\n        }\n        if (!Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetArray = target[localName];\n        for (const jsonItem of jsonValue){\n            if (jsonItem === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`);\n            }\n            switch(field.kind){\n                case \"message\":\n                    targetArray.push(field.T.fromJson(jsonItem, options));\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetArray.push(enumValue);\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetArray.push(readScalar(field.T, jsonItem, field.L, true));\n                    } catch (e) {\n                        let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    } else if (field.kind == \"map\") {\n        if (jsonValue === null) {\n            return;\n        }\n        if (typeof jsonValue != \"object\" || Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetMap = target[localName];\n        for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)){\n            if (jsonMapValue === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: map value null`);\n            }\n            let key;\n            try {\n                key = readMapKey(field.K, jsonMapKey);\n            } catch (e) {\n                let m = `cannot decode map key for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                if (e instanceof Error && e.message.length > 0) {\n                    m += `: ${e.message}`;\n                }\n                throw new Error(m);\n            }\n            switch(field.V.kind){\n                case \"message\":\n                    targetMap[key] = field.V.T.fromJson(jsonMapValue, options);\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetMap[key] = enumValue;\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetMap[key] = readScalar(field.V.T, jsonMapValue, _scalar_js__WEBPACK_IMPORTED_MODULE_3__.LongType.BIGINT, true);\n                    } catch (e) {\n                        let m = `cannot decode map value for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    } else {\n        if (field.oneof) {\n            target = target[field.oneof.localName] = {\n                case: localName\n            };\n            localName = \"value\";\n        }\n        switch(field.kind){\n            case \"message\":\n                const messageType = field.T;\n                if (jsonValue === null && messageType.typeName != \"google.protobuf.Value\") {\n                    return;\n                }\n                let currentValue = target[localName];\n                if ((0,_is_message_js__WEBPACK_IMPORTED_MODULE_6__.isMessage)(currentValue)) {\n                    currentValue.fromJson(jsonValue, options);\n                } else {\n                    target[localName] = currentValue = messageType.fromJson(jsonValue, options);\n                    if (messageType.fieldWrapper && !field.oneof) {\n                        target[localName] = messageType.fieldWrapper.unwrapField(currentValue);\n                    }\n                }\n                break;\n            case \"enum\":\n                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);\n                switch(enumValue){\n                    case tokenNull:\n                        (0,_reflect_js__WEBPACK_IMPORTED_MODULE_2__.clearField)(field, target);\n                        break;\n                    case tokenIgnoredUnknownEnum:\n                        break;\n                    default:\n                        target[localName] = enumValue;\n                        break;\n                }\n                break;\n            case \"scalar\":\n                try {\n                    const scalarValue = readScalar(field.T, jsonValue, field.L, false);\n                    switch(scalarValue){\n                        case tokenNull:\n                            (0,_reflect_js__WEBPACK_IMPORTED_MODULE_2__.clearField)(field, target);\n                            break;\n                        default:\n                            target[localName] = scalarValue;\n                            break;\n                    }\n                } catch (e) {\n                    let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                    if (e instanceof Error && e.message.length > 0) {\n                        m += `: ${e.message}`;\n                    }\n                    throw new Error(m);\n                }\n                break;\n        }\n    }\n}\nfunction readMapKey(type, json) {\n    if (type === _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.BOOL) {\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        switch(json){\n            case \"true\":\n                json = true;\n                break;\n            case \"false\":\n                json = false;\n                break;\n        }\n    }\n    return readScalar(type, json, _scalar_js__WEBPACK_IMPORTED_MODULE_3__.LongType.BIGINT, true).toString();\n}\nfunction readScalar(type, json, longType, nullAsZeroValue) {\n    if (json === null) {\n        if (nullAsZeroValue) {\n            return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_4__.scalarZeroValue)(type, longType);\n        }\n        return tokenNull;\n    }\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch(type){\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.DOUBLE:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FLOAT:\n            if (json === \"NaN\") return Number.NaN;\n            if (json === \"Infinity\") return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\") return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                break;\n            }\n            if (type == _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FLOAT) (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertFloat32)(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.INT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SFIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SINT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.UINT32:\n            let int32;\n            if (typeof json == \"number\") int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length) int32 = Number(json);\n            }\n            if (int32 === undefined) break;\n            if (type == _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.UINT32 || type == _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FIXED32) (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertUInt32)(int32);\n            else (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertInt32)(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.INT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SFIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SINT64:\n            if (typeof json != \"number\" && typeof json != \"string\") break;\n            const long = _proto_int64_js__WEBPACK_IMPORTED_MODULE_7__.protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.UINT64:\n            if (typeof json != \"number\" && typeof json != \"string\") break;\n            const uLong = _proto_int64_js__WEBPACK_IMPORTED_MODULE_7__.protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.BOOL:\n            if (typeof json !== \"boolean\") break;\n            return json;\n        // string:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.STRING:\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            } catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.BYTES:\n            if (json === \"\") return new Uint8Array(0);\n            if (typeof json !== \"string\") break;\n            return _proto_base64_js__WEBPACK_IMPORTED_MODULE_8__.protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {\n    if (json === null) {\n        if (type.typeName == \"google.protobuf.NullValue\") {\n            return 0; // google.protobuf.NullValue.NULL_VALUE = 0\n        }\n        return nullAsZeroValue ? type.values[0].no : tokenNull;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch(typeof json){\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            if (value !== undefined) {\n                return value.no;\n            }\n            if (ignoreUnknownFields) {\n                return tokenIgnoredUnknownEnum;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\n// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`\nfunction canEmitFieldDefaultValue(field) {\n    if (field.repeated || field.kind == \"map\") {\n        // maps are {}, repeated fields are []\n        return true;\n    }\n    if (field.oneof) {\n        // oneof fields are never emitted\n        return false;\n    }\n    if (field.kind == \"message\") {\n        // singular message field are allowed to emit JSON null, but we do not\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.opt || field.req) {\n        // the field uses explicit presence, so we cannot emit a zero value\n        return false;\n    }\n    return true;\n}\nfunction writeField(field, value, options) {\n    if (field.kind == \"map\") {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"object\" && value != null);\n        const jsonObj = {};\n        const entries = Object.entries(value);\n        switch(field.V.kind){\n            case \"scalar\":\n                for (const [entryKey, entryValue] of entries){\n                    jsonObj[entryKey.toString()] = writeScalar(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key\n                }\n                break;\n            case \"message\":\n                for (const [entryKey, entryValue] of entries){\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                }\n                break;\n            case \"enum\":\n                const enumType = field.V.T;\n                for (const [entryKey, entryValue] of entries){\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = writeEnum(enumType, entryValue, options.enumAsInteger);\n                }\n                break;\n        }\n        return options.emitDefaultValues || entries.length > 0 ? jsonObj : undefined;\n    }\n    if (field.repeated) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(Array.isArray(value));\n        const jsonArr = [];\n        switch(field.kind){\n            case \"scalar\":\n                for(let i = 0; i < value.length; i++){\n                    jsonArr.push(writeScalar(field.T, value[i]));\n                }\n                break;\n            case \"enum\":\n                for(let i = 0; i < value.length; i++){\n                    jsonArr.push(writeEnum(field.T, value[i], options.enumAsInteger));\n                }\n                break;\n            case \"message\":\n                for(let i = 0; i < value.length; i++){\n                    jsonArr.push(value[i].toJson(options));\n                }\n                break;\n        }\n        return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : undefined;\n    }\n    switch(field.kind){\n        case \"scalar\":\n            return writeScalar(field.T, value);\n        case \"enum\":\n            return writeEnum(field.T, value, options.enumAsInteger);\n        case \"message\":\n            return (0,_field_wrapper_js__WEBPACK_IMPORTED_MODULE_9__.wrapField)(field.T, value).toJson(options);\n    }\n}\nfunction writeEnum(type, value, enumAsInteger) {\n    var _a;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"number\");\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value) {\n    switch(type){\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.INT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SFIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SINT32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FIXED32:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.UINT32:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"number\");\n            return value;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FLOAT:\n        // assertFloat32(value);\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.DOUBLE:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"number\");\n            if (Number.isNaN(value)) return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY) return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY) return \"-Infinity\";\n            return value;\n        // string:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.STRING:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"string\");\n            return value;\n        // bool:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.BOOL:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"boolean\");\n            return value;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.UINT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.FIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.INT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SFIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.SINT64:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(typeof value == \"bigint\" || typeof value == \"string\" || typeof value == \"number\");\n            return value.toString();\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_3__.ScalarType.BYTES:\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_5__.assert)(value instanceof Uint8Array);\n            return _proto_base64_js__WEBPACK_IMPORTED_MODULE_8__.protoBase64.enc(value);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js":
/*!************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeMessageType: () => (/* binding */ makeMessageType)\n/* harmony export */ });\n/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Create a new message type using the given runtime.\n */ function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function(data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        }\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new _message_js__WEBPACK_IMPORTED_MODULE_0__.Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary (bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson (jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString (jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals (a, b) {\n            return runtime.util.equals(type, a, b);\n        }\n    });\n    return type;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL21lc3NhZ2UtdHlwZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNPO0FBQ3hDOztDQUVDLEdBQ00sU0FBU0MsZ0JBQWdCQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxHQUFHO0lBQzFELElBQUlDO0lBQ0osTUFBTUMsWUFBWSxDQUFDRCxLQUFLRCxRQUFRLFFBQVFBLFFBQVEsS0FBSyxJQUFJLEtBQUssSUFBSUEsSUFBSUUsU0FBUyxNQUFNLFFBQVFELE9BQU8sS0FBSyxJQUFJQSxLQUFLSCxTQUFTSyxTQUFTLENBQUNMLFNBQVNNLFdBQVcsQ0FBQyxPQUFPO0lBQ2pLLE1BQU1DLE9BQU87UUFDVCxDQUFDSCxVQUFVLEVBQUUsU0FBVUksSUFBSTtZQUN2QlQsUUFBUVUsSUFBSSxDQUFDQyxVQUFVLENBQUMsSUFBSTtZQUM1QlgsUUFBUVUsSUFBSSxDQUFDRSxXQUFXLENBQUNILE1BQU0sSUFBSTtRQUN2QztJQUNKLENBQUMsQ0FBQ0osVUFBVTtJQUNaUSxPQUFPQyxjQUFjLENBQUNOLEtBQUtPLFNBQVMsRUFBRSxJQUFJakIsZ0RBQU9BO0lBQ2pEZSxPQUFPRyxNQUFNLENBQUNSLE1BQU07UUFDaEJSO1FBQ0FDO1FBQ0FDLFFBQVFGLFFBQVFVLElBQUksQ0FBQ08sWUFBWSxDQUFDZjtRQUNsQ2dCLFlBQVdDLEtBQUssRUFBRUMsT0FBTztZQUNyQixPQUFPLElBQUlaLE9BQU9VLFVBQVUsQ0FBQ0MsT0FBT0M7UUFDeEM7UUFDQUMsVUFBU0MsU0FBUyxFQUFFRixPQUFPO1lBQ3ZCLE9BQU8sSUFBSVosT0FBT2EsUUFBUSxDQUFDQyxXQUFXRjtRQUMxQztRQUNBRyxnQkFBZUMsVUFBVSxFQUFFSixPQUFPO1lBQzlCLE9BQU8sSUFBSVosT0FBT2UsY0FBYyxDQUFDQyxZQUFZSjtRQUNqRDtRQUNBSyxRQUFPQyxDQUFDLEVBQUVDLENBQUM7WUFDUCxPQUFPM0IsUUFBUVUsSUFBSSxDQUFDZSxNQUFNLENBQUNqQixNQUFNa0IsR0FBR0M7UUFDeEM7SUFDSjtJQUNBLE9BQU9uQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL21lc3NhZ2UtdHlwZS5qcz8xMWNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2UuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IG1lc3NhZ2UgdHlwZSB1c2luZyB0aGUgZ2l2ZW4gcnVudGltZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VNZXNzYWdlVHlwZShydW50aW1lLCB0eXBlTmFtZSwgZmllbGRzLCBvcHQpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgbG9jYWxOYW1lID0gKF9hID0gb3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0LmxvY2FsTmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHlwZU5hbWUuc3Vic3RyaW5nKHR5cGVOYW1lLmxhc3RJbmRleE9mKFwiLlwiKSArIDEpO1xuICAgIGNvbnN0IHR5cGUgPSB7XG4gICAgICAgIFtsb2NhbE5hbWVdOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcnVudGltZS51dGlsLmluaXRGaWVsZHModGhpcyk7XG4gICAgICAgICAgICBydW50aW1lLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgICAgIH0sXG4gICAgfVtsb2NhbE5hbWVdO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0eXBlLnByb3RvdHlwZSwgbmV3IE1lc3NhZ2UoKSk7XG4gICAgT2JqZWN0LmFzc2lnbih0eXBlLCB7XG4gICAgICAgIHJ1bnRpbWUsXG4gICAgICAgIHR5cGVOYW1lLFxuICAgICAgICBmaWVsZHM6IHJ1bnRpbWUudXRpbC5uZXdGaWVsZExpc3QoZmllbGRzKSxcbiAgICAgICAgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0eXBlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0eXBlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0eXBlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVxdWFscyhhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVudGltZS51dGlsLmVxdWFscyh0eXBlLCBhLCBiKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdHlwZTtcbn1cbiJdLCJuYW1lcyI6WyJNZXNzYWdlIiwibWFrZU1lc3NhZ2VUeXBlIiwicnVudGltZSIsInR5cGVOYW1lIiwiZmllbGRzIiwib3B0IiwiX2EiLCJsb2NhbE5hbWUiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsInR5cGUiLCJkYXRhIiwidXRpbCIsImluaXRGaWVsZHMiLCJpbml0UGFydGlhbCIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiYXNzaWduIiwibmV3RmllbGRMaXN0IiwiZnJvbUJpbmFyeSIsImJ5dGVzIiwib3B0aW9ucyIsImZyb21Kc29uIiwianNvblZhbHVlIiwiZnJvbUpzb25TdHJpbmciLCJqc29uU3RyaW5nIiwiZXF1YWxzIiwiYSIsImIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/names.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/names.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fieldJsonName: () => (/* binding */ fieldJsonName),\n/* harmony export */   findEnumSharedPrefix: () => (/* binding */ findEnumSharedPrefix),\n/* harmony export */   localFieldName: () => (/* binding */ localFieldName),\n/* harmony export */   localName: () => (/* binding */ localName),\n/* harmony export */   localOneofName: () => (/* binding */ localOneofName),\n/* harmony export */   safeIdentifier: () => (/* binding */ safeIdentifier),\n/* harmony export */   safeObjectProperty: () => (/* binding */ safeObjectProperty)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */ function localName(desc) {\n    switch(desc.kind){\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\":\n        case \"extension\":\n            {\n                const pkg = desc.file.proto.package;\n                const offset = pkg === undefined ? 0 : pkg.length + 1;\n                const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n                // For services, we only care about safe identifiers, not safe object properties,\n                // but we have shipped v1 with a bug that respected object properties, and we\n                // do not want to introduce a breaking change, so we continue to escape for\n                // safe object properties.\n                // See https://github.com/bufbuild/protobuf-es/pull/391\n                return safeObjectProperty(safeIdentifier(name));\n            }\n        case \"enum_value\":\n            {\n                let name = desc.name;\n                const sharedPrefix = desc.parent.sharedPrefix;\n                if (sharedPrefix !== undefined) {\n                    name = name.substring(sharedPrefix.length);\n                }\n                return safeObjectProperty(name);\n            }\n        case \"rpc\":\n            {\n                let name = desc.name;\n                if (name.length == 0) {\n                    return name;\n                }\n                name = name[0].toLowerCase() + name.substring(1);\n                return safeObjectProperty(name);\n            }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */ function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */ function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */ const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */ function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames){\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */ function camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c)=>\"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */ function protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for(let i = 0; i < snakeCase.length; i++){\n        let c = snakeCase.charAt(i);\n        switch(c){\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */ const reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\"\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */ const reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\"\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */ const reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\"\n]);\nconst fallback = (name)=>`${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */ const safeMessageProperty = (name)=>{\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */ const safeObjectProperty = (name)=>{\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */ const safeIdentifier = (name)=>{\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/names.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js":
/*!*************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeProtoRuntime: () => (/* binding */ makeProtoRuntime)\n/* harmony export */ });\n/* harmony import */ var _enum_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./enum.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js\");\n/* harmony import */ var _message_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-type.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js\");\n/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extensions.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js\");\n/* harmony import */ var _json_format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json-format.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js\");\n/* harmony import */ var _binary_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./binary-format.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js\");\n/* harmony import */ var _util_common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util-common.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\nfunction makeProtoRuntime(syntax, newFieldList, initFields) {\n    return {\n        syntax,\n        json: (0,_json_format_js__WEBPACK_IMPORTED_MODULE_0__.makeJsonFormat)(),\n        bin: (0,_binary_format_js__WEBPACK_IMPORTED_MODULE_1__.makeBinaryFormat)(),\n        util: Object.assign(Object.assign({}, (0,_util_common_js__WEBPACK_IMPORTED_MODULE_2__.makeUtilCommon)()), {\n            newFieldList,\n            initFields\n        }),\n        makeMessageType (typeName, fields, opt) {\n            return (0,_message_type_js__WEBPACK_IMPORTED_MODULE_3__.makeMessageType)(this, typeName, fields, opt);\n        },\n        makeEnum: _enum_js__WEBPACK_IMPORTED_MODULE_4__.makeEnum,\n        makeEnumType: _enum_js__WEBPACK_IMPORTED_MODULE_4__.makeEnumType,\n        getEnumType: _enum_js__WEBPACK_IMPORTED_MODULE_4__.getEnumType,\n        makeExtension (typeName, extendee, field) {\n            return (0,_extensions_js__WEBPACK_IMPORTED_MODULE_5__.makeExtension)(this, typeName, extendee, field);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL3Byb3RvLXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUMrQjtBQUNaO0FBQ0o7QUFDRTtBQUNJO0FBQ0o7QUFDM0MsU0FBU1EsaUJBQWlCQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsVUFBVTtJQUM3RCxPQUFPO1FBQ0hGO1FBQ0FHLE1BQU1QLCtEQUFjQTtRQUNwQlEsS0FBS1AsbUVBQWdCQTtRQUNyQlEsTUFBTUMsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHVCwrREFBY0EsS0FBSztZQUFFRztZQUN2REM7UUFBVztRQUNmUixpQkFBZ0JjLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxHQUFHO1lBQ2pDLE9BQU9oQixpRUFBZUEsQ0FBQyxJQUFJLEVBQUVjLFVBQVVDLFFBQVFDO1FBQ25EO1FBQ0FsQixRQUFRQSxnREFBQUE7UUFDUkMsWUFBWUEsb0RBQUFBO1FBQ1pGLFdBQVdBLG1EQUFBQTtRQUNYSSxlQUFjYSxRQUFRLEVBQUVHLFFBQVEsRUFBRUMsS0FBSztZQUNuQyxPQUFPakIsNkRBQWFBLENBQUMsSUFBSSxFQUFFYSxVQUFVRyxVQUFVQztRQUNuRDtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvcHJvdG8tcnVudGltZS5qcz85MmI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBnZXRFbnVtVHlwZSwgbWFrZUVudW0sIG1ha2VFbnVtVHlwZSB9IGZyb20gXCIuL2VudW0uanNcIjtcbmltcG9ydCB7IG1ha2VNZXNzYWdlVHlwZSB9IGZyb20gXCIuL21lc3NhZ2UtdHlwZS5qc1wiO1xuaW1wb3J0IHsgbWFrZUV4dGVuc2lvbiB9IGZyb20gXCIuL2V4dGVuc2lvbnMuanNcIjtcbmltcG9ydCB7IG1ha2VKc29uRm9ybWF0IH0gZnJvbSBcIi4vanNvbi1mb3JtYXQuanNcIjtcbmltcG9ydCB7IG1ha2VCaW5hcnlGb3JtYXQgfSBmcm9tIFwiLi9iaW5hcnktZm9ybWF0LmpzXCI7XG5pbXBvcnQgeyBtYWtlVXRpbENvbW1vbiB9IGZyb20gXCIuL3V0aWwtY29tbW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWFrZVByb3RvUnVudGltZShzeW50YXgsIG5ld0ZpZWxkTGlzdCwgaW5pdEZpZWxkcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN5bnRheCxcbiAgICAgICAganNvbjogbWFrZUpzb25Gb3JtYXQoKSxcbiAgICAgICAgYmluOiBtYWtlQmluYXJ5Rm9ybWF0KCksXG4gICAgICAgIHV0aWw6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWFrZVV0aWxDb21tb24oKSksIHsgbmV3RmllbGRMaXN0LFxuICAgICAgICAgICAgaW5pdEZpZWxkcyB9KSxcbiAgICAgICAgbWFrZU1lc3NhZ2VUeXBlKHR5cGVOYW1lLCBmaWVsZHMsIG9wdCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VNZXNzYWdlVHlwZSh0aGlzLCB0eXBlTmFtZSwgZmllbGRzLCBvcHQpO1xuICAgICAgICB9LFxuICAgICAgICBtYWtlRW51bSxcbiAgICAgICAgbWFrZUVudW1UeXBlLFxuICAgICAgICBnZXRFbnVtVHlwZSxcbiAgICAgICAgbWFrZUV4dGVuc2lvbih0eXBlTmFtZSwgZXh0ZW5kZWUsIGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUV4dGVuc2lvbih0aGlzLCB0eXBlTmFtZSwgZXh0ZW5kZWUsIGZpZWxkKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbImdldEVudW1UeXBlIiwibWFrZUVudW0iLCJtYWtlRW51bVR5cGUiLCJtYWtlTWVzc2FnZVR5cGUiLCJtYWtlRXh0ZW5zaW9uIiwibWFrZUpzb25Gb3JtYXQiLCJtYWtlQmluYXJ5Rm9ybWF0IiwibWFrZVV0aWxDb21tb24iLCJtYWtlUHJvdG9SdW50aW1lIiwic3ludGF4IiwibmV3RmllbGRMaXN0IiwiaW5pdEZpZWxkcyIsImpzb24iLCJiaW4iLCJ1dGlsIiwiT2JqZWN0IiwiYXNzaWduIiwidHlwZU5hbWUiLCJmaWVsZHMiLCJvcHQiLCJleHRlbmRlZSIsImZpZWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearField: () => (/* binding */ clearField),\n/* harmony export */   isFieldSet: () => (/* binding */ isFieldSet)\n/* harmony export */ });\n/* harmony import */ var _scalars_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Returns true if the field is set.\n */ function isFieldSet(field, target) {\n    const localName = field.localName;\n    if (field.repeated) {\n        return target[localName].length > 0;\n    }\n    if (field.oneof) {\n        return target[field.oneof.localName].case === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    }\n    switch(field.kind){\n        case \"enum\":\n        case \"scalar\":\n            if (field.opt || field.req) {\n                // explicit presence\n                return target[localName] !== undefined;\n            }\n            // implicit presence\n            if (field.kind == \"enum\") {\n                return target[localName] !== field.T.values[0].no;\n            }\n            return !(0,_scalars_js__WEBPACK_IMPORTED_MODULE_0__.isScalarZeroValue)(field.T, target[localName]);\n        case \"message\":\n            return target[localName] !== undefined;\n        case \"map\":\n            return Object.keys(target[localName]).length > 0; // eslint-disable-line @typescript-eslint/no-unsafe-argument\n    }\n}\n/**\n * Resets the field, so that isFieldSet() will return false.\n */ function clearField(field, target) {\n    const localName = field.localName;\n    const implicitPresence = !field.opt && !field.req;\n    if (field.repeated) {\n        target[localName] = [];\n    } else if (field.oneof) {\n        target[field.oneof.localName] = {\n            case: undefined\n        };\n    } else {\n        switch(field.kind){\n            case \"map\":\n                target[localName] = {};\n                break;\n            case \"enum\":\n                target[localName] = implicitPresence ? field.T.values[0].no : undefined;\n                break;\n            case \"scalar\":\n                target[localName] = implicitPresence ? (0,_scalars_js__WEBPACK_IMPORTED_MODULE_0__.scalarZeroValue)(field.T, field.L) : undefined;\n                break;\n            case \"message\":\n                target[localName] = undefined;\n                break;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL3JlZmxlY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkNBQTZDO0FBQzdDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2lDO0FBQ2xFOztDQUVDLEdBQ00sU0FBU0UsV0FBV0MsS0FBSyxFQUFFQyxNQUFNO0lBQ3BDLE1BQU1DLFlBQVlGLE1BQU1FLFNBQVM7SUFDakMsSUFBSUYsTUFBTUcsUUFBUSxFQUFFO1FBQ2hCLE9BQU9GLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRSxNQUFNLEdBQUc7SUFDdEM7SUFDQSxJQUFJSixNQUFNSyxLQUFLLEVBQUU7UUFDYixPQUFPSixNQUFNLENBQUNELE1BQU1LLEtBQUssQ0FBQ0gsU0FBUyxDQUFDLENBQUNJLElBQUksS0FBS0osV0FBVyxpRUFBaUU7SUFDOUg7SUFDQSxPQUFRRixNQUFNTyxJQUFJO1FBQ2QsS0FBSztRQUNMLEtBQUs7WUFDRCxJQUFJUCxNQUFNUSxHQUFHLElBQUlSLE1BQU1TLEdBQUcsRUFBRTtnQkFDeEIsb0JBQW9CO2dCQUNwQixPQUFPUixNQUFNLENBQUNDLFVBQVUsS0FBS1E7WUFDakM7WUFDQSxvQkFBb0I7WUFDcEIsSUFBSVYsTUFBTU8sSUFBSSxJQUFJLFFBQVE7Z0JBQ3RCLE9BQU9OLE1BQU0sQ0FBQ0MsVUFBVSxLQUFLRixNQUFNVyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxFQUFFLENBQUNDLEVBQUU7WUFDckQ7WUFDQSxPQUFPLENBQUNoQiw4REFBaUJBLENBQUNHLE1BQU1XLENBQUMsRUFBRVYsTUFBTSxDQUFDQyxVQUFVO1FBQ3hELEtBQUs7WUFDRCxPQUFPRCxNQUFNLENBQUNDLFVBQVUsS0FBS1E7UUFDakMsS0FBSztZQUNELE9BQU9JLE9BQU9DLElBQUksQ0FBQ2QsTUFBTSxDQUFDQyxVQUFVLEVBQUVFLE1BQU0sR0FBRyxHQUFHLDREQUE0RDtJQUN0SDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTWSxXQUFXaEIsS0FBSyxFQUFFQyxNQUFNO0lBQ3BDLE1BQU1DLFlBQVlGLE1BQU1FLFNBQVM7SUFDakMsTUFBTWUsbUJBQW1CLENBQUNqQixNQUFNUSxHQUFHLElBQUksQ0FBQ1IsTUFBTVMsR0FBRztJQUNqRCxJQUFJVCxNQUFNRyxRQUFRLEVBQUU7UUFDaEJGLE1BQU0sQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7SUFDMUIsT0FDSyxJQUFJRixNQUFNSyxLQUFLLEVBQUU7UUFDbEJKLE1BQU0sQ0FBQ0QsTUFBTUssS0FBSyxDQUFDSCxTQUFTLENBQUMsR0FBRztZQUFFSSxNQUFNSTtRQUFVO0lBQ3RELE9BQ0s7UUFDRCxPQUFRVixNQUFNTyxJQUFJO1lBQ2QsS0FBSztnQkFDRE4sTUFBTSxDQUFDQyxVQUFVLEdBQUcsQ0FBQztnQkFDckI7WUFDSixLQUFLO2dCQUNERCxNQUFNLENBQUNDLFVBQVUsR0FBR2UsbUJBQW1CakIsTUFBTVcsQ0FBQyxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDQyxFQUFFLEdBQUdIO2dCQUM5RDtZQUNKLEtBQUs7Z0JBQ0RULE1BQU0sQ0FBQ0MsVUFBVSxHQUFHZSxtQkFDZG5CLDREQUFlQSxDQUFDRSxNQUFNVyxDQUFDLEVBQUVYLE1BQU1rQixDQUFDLElBQ2hDUjtnQkFDTjtZQUNKLEtBQUs7Z0JBQ0RULE1BQU0sQ0FBQ0MsVUFBVSxHQUFHUTtnQkFDcEI7UUFDUjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvcmVmbGVjdC5qcz9mZjRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBpc1NjYWxhclplcm9WYWx1ZSwgc2NhbGFyWmVyb1ZhbHVlIH0gZnJvbSBcIi4vc2NhbGFycy5qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGZpZWxkIGlzIHNldC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmllbGRTZXQoZmllbGQsIHRhcmdldCkge1xuICAgIGNvbnN0IGxvY2FsTmFtZSA9IGZpZWxkLmxvY2FsTmFtZTtcbiAgICBpZiAoZmllbGQucmVwZWF0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtsb2NhbE5hbWVdLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIGlmIChmaWVsZC5vbmVvZikge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W2ZpZWxkLm9uZW9mLmxvY2FsTmFtZV0uY2FzZSA9PT0gbG9jYWxOYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIH1cbiAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgaWYgKGZpZWxkLm9wdCB8fCBmaWVsZC5yZXEpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBsaWNpdCBwcmVzZW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbbG9jYWxOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW1wbGljaXQgcHJlc2VuY2VcbiAgICAgICAgICAgIGlmIChmaWVsZC5raW5kID09IFwiZW51bVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtsb2NhbE5hbWVdICE9PSBmaWVsZC5ULnZhbHVlc1swXS5ubztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhaXNTY2FsYXJaZXJvVmFsdWUoZmllbGQuVCwgdGFyZ2V0W2xvY2FsTmFtZV0pO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtsb2NhbE5hbWVdICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXRbbG9jYWxOYW1lXSkubGVuZ3RoID4gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgfVxufVxuLyoqXG4gKiBSZXNldHMgdGhlIGZpZWxkLCBzbyB0aGF0IGlzRmllbGRTZXQoKSB3aWxsIHJldHVybiBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyRmllbGQoZmllbGQsIHRhcmdldCkge1xuICAgIGNvbnN0IGxvY2FsTmFtZSA9IGZpZWxkLmxvY2FsTmFtZTtcbiAgICBjb25zdCBpbXBsaWNpdFByZXNlbmNlID0gIWZpZWxkLm9wdCAmJiAhZmllbGQucmVxO1xuICAgIGlmIChmaWVsZC5yZXBlYXRlZCkge1xuICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChmaWVsZC5vbmVvZikge1xuICAgICAgICB0YXJnZXRbZmllbGQub25lb2YubG9jYWxOYW1lXSA9IHsgY2FzZTogdW5kZWZpbmVkIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IHt9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IGltcGxpY2l0UHJlc2VuY2UgPyBmaWVsZC5ULnZhbHVlc1swXS5ubyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IGltcGxpY2l0UHJlc2VuY2VcbiAgICAgICAgICAgICAgICAgICAgPyBzY2FsYXJaZXJvVmFsdWUoZmllbGQuVCwgZmllbGQuTClcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgIHRhcmdldFtsb2NhbE5hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlzU2NhbGFyWmVyb1ZhbHVlIiwic2NhbGFyWmVyb1ZhbHVlIiwiaXNGaWVsZFNldCIsImZpZWxkIiwidGFyZ2V0IiwibG9jYWxOYW1lIiwicmVwZWF0ZWQiLCJsZW5ndGgiLCJvbmVvZiIsImNhc2UiLCJraW5kIiwib3B0IiwicmVxIiwidW5kZWZpbmVkIiwiVCIsInZhbHVlcyIsIm5vIiwiT2JqZWN0Iiwia2V5cyIsImNsZWFyRmllbGQiLCJpbXBsaWNpdFByZXNlbmNlIiwiTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js":
/*!*******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isScalarZeroValue: () => (/* binding */ isScalarZeroValue),\n/* harmony export */   scalarEquals: () => (/* binding */ scalarEquals),\n/* harmony export */   scalarZeroValue: () => (/* binding */ scalarZeroValue)\n/* harmony export */ });\n/* harmony import */ var _proto_int64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../proto-int64.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Returns true if both scalar values are equal.\n */ function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch(type){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.UINT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.FIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.INT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.SFIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the zero value for the given scalar type.\n */ function scalarZeroValue(type, longType) {\n    switch(type){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.BOOL:\n            return false;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.UINT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.FIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.INT64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.SFIXED64:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return longType == 0 ? _proto_int64_js__WEBPACK_IMPORTED_MODULE_1__.protoInt64.zero : \"0\";\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.DOUBLE:\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.FLOAT:\n            return 0.0;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.BYTES:\n            return new Uint8Array(0);\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\n *\n * In proto3, zero-values are not written to the wire, unless the field is\n * optional or repeated.\n */ function isScalarZeroValue(type, value) {\n    switch(type){\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.BOOL:\n            return value === false;\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.STRING:\n            return value === \"\";\n        case _scalar_js__WEBPACK_IMPORTED_MODULE_0__.ScalarType.BYTES:\n            return value instanceof Uint8Array && !value.byteLength;\n        default:\n            return value == 0; // Loose comparison matches 0n, 0 and \"0\"\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js":
/*!***********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUtilCommon: () => (/* binding */ makeUtilCommon)\n/* harmony export */ });\n/* harmony import */ var _enum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enum.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/enum.js\");\n/* harmony import */ var _scalars_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scalar.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\");\n/* harmony import */ var _is_message_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../is-message.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/is-message.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */ function makeUtilCommon() {\n    return {\n        setEnumType: _enum_js__WEBPACK_IMPORTED_MODULE_0__.setEnumType,\n        initPartial (source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()){\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] == null) {\n                    continue;\n                }\n                switch(member.kind){\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField && sourceField.kind == \"message\" && !(0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(val, sourceField.T)) {\n                            val = new sourceField.T(val);\n                        } else if (sourceField && sourceField.kind === \"scalar\" && sourceField.T === _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = {\n                            case: sk,\n                            value: val\n                        };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES) {\n                            copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch(member.V.kind){\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === _scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])){\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                } else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])){\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val)=>(0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(val, mt) ? val : new mt(val));\n                        } else {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (// We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                } else {\n                                    t[localName] = val;\n                                }\n                            } else {\n                                t[localName] = (0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(val, mt) ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        // TODO use isFieldSet() here to support future field presence\n        equals (type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m)=>{\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch(m.kind){\n                        case \"message\":\n                            return va.every((a, i)=>m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i)=>(0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i)=>(0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(_scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch(m.kind){\n                    case \"message\":\n                        let a1 = va;\n                        let b1 = vb;\n                        if (m.T.fieldWrapper) {\n                            if (a1 !== undefined && !(0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(a1)) {\n                                a1 = m.T.fieldWrapper.wrapField(a1);\n                            }\n                            if (b1 !== undefined && !(0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(b1)) {\n                                b1 = m.T.fieldWrapper.wrapField(b1);\n                            }\n                        }\n                        return m.T.equals(a1, b1);\n                    case \"enum\":\n                        return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(_scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch(s.kind){\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(_scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return (0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch(m.V.kind){\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k)=>messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k)=>(0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(_scalar_js__WEBPACK_IMPORTED_MODULE_2__.ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k)=>(0,_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarEquals)(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        // TODO use isFieldSet() here to support future field presence\n        clone (message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()){\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                } else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)){\n                        copy[key] = cloneSingularField(v);\n                    }\n                } else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f ? {\n                        case: source.case,\n                        value: cloneSingularField(source.value)\n                    } : {\n                        case: undefined\n                    };\n                } else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            for (const uf of type.runtime.bin.listUnknownFields(message)){\n                type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);\n            }\n            return target;\n        }\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if ((0,_is_message_js__WEBPACK_IMPORTED_MODULE_1__.isMessage)(value)) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   protoBase64: () => (/* binding */ protoBase64)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */ // lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor(let i = 0; i < encTable.length; i++)decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nconst protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */ dec (base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = base64Str.length * 3 / 4;\n        if (base64Str[base64Str.length - 2] == \"=\") es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\") es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b, p = 0; // previous byte\n        for(let i = 0; i < base64Str.length; i++){\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch(base64Str[i]){\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch(groupPos){\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = (p & 3) << 6 | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1) throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */ enc (bytes) {\n        let base64 = \"\", groupPos = 0, b, p = 0; // carry over from previous byte\n        for(let i = 0; i < bytes.length; i++){\n            b = bytes[i];\n            switch(groupPos){\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | b >> 4];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | b >> 6];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1) base64 += \"=\";\n        }\n        return base64;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90by1iYXNlNjQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQywrR0FBK0csR0FDL0csNkNBQTZDO0FBQzdDLElBQUlBLFdBQVcsbUVBQW1FQyxLQUFLLENBQUM7QUFDeEYscUZBQXFGO0FBQ3JGLElBQUlDLFdBQVcsRUFBRTtBQUNqQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsU0FBU0ksTUFBTSxFQUFFRCxJQUNqQ0QsUUFBUSxDQUFDRixRQUFRLENBQUNHLEVBQUUsQ0FBQ0UsVUFBVSxDQUFDLEdBQUcsR0FBR0Y7QUFDMUMsNkJBQTZCO0FBQzdCRCxRQUFRLENBQUMsSUFBSUcsVUFBVSxDQUFDLEdBQUcsR0FBR0wsU0FBU00sT0FBTyxDQUFDO0FBQy9DSixRQUFRLENBQUMsSUFBSUcsVUFBVSxDQUFDLEdBQUcsR0FBR0wsU0FBU00sT0FBTyxDQUFDO0FBQ3hDLE1BQU1DLGNBQWM7SUFDdkI7Ozs7Ozs7Ozs7S0FVQyxHQUNEQyxLQUFJQyxTQUFTO1FBQ1Qsc0VBQXNFO1FBQ3RFLElBQUlDLEtBQUssVUFBV04sTUFBTSxHQUFHLElBQUs7UUFDbEMsSUFBSUssU0FBUyxDQUFDQSxVQUFVTCxNQUFNLEdBQUcsRUFBRSxJQUFJLEtBQ25DTSxNQUFNO2FBQ0wsSUFBSUQsU0FBUyxDQUFDQSxVQUFVTCxNQUFNLEdBQUcsRUFBRSxJQUFJLEtBQ3hDTSxNQUFNO1FBQ1YsSUFBSUMsUUFBUSxJQUFJQyxXQUFXRixLQUFLRyxVQUFVLEdBQzFDQyxXQUFXLEdBQ1hDLEdBQ0FDLElBQUksR0FBRyxnQkFBZ0I7UUFDdkIsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlNLFVBQVVMLE1BQU0sRUFBRUQsSUFBSztZQUN2Q1ksSUFBSWIsUUFBUSxDQUFDTyxVQUFVSixVQUFVLENBQUNGLEdBQUc7WUFDckMsSUFBSVksTUFBTUUsV0FBVztnQkFDakIsT0FBUVIsU0FBUyxDQUFDTixFQUFFO29CQUNoQixnREFBZ0Q7b0JBQ2hELEtBQUs7d0JBQ0RXLFdBQVcsR0FBRyxpQ0FBaUM7b0JBQ25ELGdEQUFnRDtvQkFDaEQsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSzt3QkFDRCxVQUFVLGdDQUFnQztvQkFDOUM7d0JBQ0ksTUFBTUksTUFBTTtnQkFDcEI7WUFDSjtZQUNBLE9BQVFKO2dCQUNKLEtBQUs7b0JBQ0RFLElBQUlEO29CQUNKRCxXQUFXO29CQUNYO2dCQUNKLEtBQUs7b0JBQ0RILEtBQUssQ0FBQ0UsVUFBVSxHQUFHLEtBQU0sSUFBTSxDQUFDRSxJQUFJLEVBQUMsS0FBTTtvQkFDM0NDLElBQUlEO29CQUNKRCxXQUFXO29CQUNYO2dCQUNKLEtBQUs7b0JBQ0RILEtBQUssQ0FBQ0UsVUFBVSxHQUFHLENBQUVHLElBQUksRUFBQyxLQUFNLElBQU0sQ0FBQ0QsSUFBSSxFQUFDLEtBQU07b0JBQ2xEQyxJQUFJRDtvQkFDSkQsV0FBVztvQkFDWDtnQkFDSixLQUFLO29CQUNESCxLQUFLLENBQUNFLFVBQVUsR0FBRyxDQUFFRyxJQUFJLE1BQU0sSUFBS0Q7b0JBQ3BDRCxXQUFXO29CQUNYO1lBQ1I7UUFDSjtRQUNBLElBQUlBLFlBQVksR0FDWixNQUFNSSxNQUFNO1FBQ2hCLE9BQU9QLE1BQU1RLFFBQVEsQ0FBQyxHQUFHTjtJQUM3QjtJQUNBOztLQUVDLEdBQ0RPLEtBQUlULEtBQUs7UUFDTCxJQUFJVSxTQUFTLElBQUlQLFdBQVcsR0FDNUJDLEdBQ0FDLElBQUksR0FBRyxnQ0FBZ0M7UUFDdkMsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlRLE1BQU1QLE1BQU0sRUFBRUQsSUFBSztZQUNuQ1ksSUFBSUosS0FBSyxDQUFDUixFQUFFO1lBQ1osT0FBUVc7Z0JBQ0osS0FBSztvQkFDRE8sVUFBVXJCLFFBQVEsQ0FBQ2UsS0FBSyxFQUFFO29CQUMxQkMsSUFBSSxDQUFDRCxJQUFJLE1BQU07b0JBQ2ZELFdBQVc7b0JBQ1g7Z0JBQ0osS0FBSztvQkFDRE8sVUFBVXJCLFFBQVEsQ0FBQ2dCLElBQUtELEtBQUssRUFBRztvQkFDaENDLElBQUksQ0FBQ0QsSUFBSSxFQUFDLEtBQU07b0JBQ2hCRCxXQUFXO29CQUNYO2dCQUNKLEtBQUs7b0JBQ0RPLFVBQVVyQixRQUFRLENBQUNnQixJQUFLRCxLQUFLLEVBQUc7b0JBQ2hDTSxVQUFVckIsUUFBUSxDQUFDZSxJQUFJLEdBQUc7b0JBQzFCRCxXQUFXO29CQUNYO1lBQ1I7UUFDSjtRQUNBLHFCQUFxQjtRQUNyQixJQUFJQSxVQUFVO1lBQ1ZPLFVBQVVyQixRQUFRLENBQUNnQixFQUFFO1lBQ3JCSyxVQUFVO1lBQ1YsSUFBSVAsWUFBWSxHQUNaTyxVQUFVO1FBQ2xCO1FBQ0EsT0FBT0E7SUFDWDtBQUNKLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3Byb3RvLWJhc2U2NC5qcz80N2IwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24sIHByZWZlci1jb25zdCAqL1xuLy8gbG9va3VwIHRhYmxlIGZyb20gYmFzZTY0IGNoYXJhY3RlciB0byBieXRlXG5sZXQgZW5jVGFibGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5zcGxpdChcIlwiKTtcbi8vIGxvb2t1cCB0YWJsZSBmcm9tIGJhc2U2NCBjaGFyYWN0ZXIgKmNvZGUqIHRvIGJ5dGUgYmVjYXVzZSBsb29rdXAgYnkgbnVtYmVyIGlzIGZhc3RcbmxldCBkZWNUYWJsZSA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNUYWJsZS5sZW5ndGg7IGkrKylcbiAgICBkZWNUYWJsZVtlbmNUYWJsZVtpXS5jaGFyQ29kZUF0KDApXSA9IGk7XG4vLyBzdXBwb3J0IGJhc2U2NHVybCB2YXJpYW50c1xuZGVjVGFibGVbXCItXCIuY2hhckNvZGVBdCgwKV0gPSBlbmNUYWJsZS5pbmRleE9mKFwiK1wiKTtcbmRlY1RhYmxlW1wiX1wiLmNoYXJDb2RlQXQoMCldID0gZW5jVGFibGUuaW5kZXhPZihcIi9cIik7XG5leHBvcnQgY29uc3QgcHJvdG9CYXNlNjQgPSB7XG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICAgICAqXG4gICAgICogLSBpZ25vcmVzIHdoaXRlLXNwYWNlLCBpbmNsdWRpbmcgbGluZSBicmVha3MgYW5kIHRhYnNcbiAgICAgKiAtIGFsbG93cyBpbm5lciBwYWRkaW5nIChjYW4gZGVjb2RlIGNvbmNhdGVuYXRlZCBiYXNlNjQgc3RyaW5ncylcbiAgICAgKiAtIGRvZXMgbm90IHJlcXVpcmUgcGFkZGluZ1xuICAgICAqIC0gdW5kZXJzdGFuZHMgYmFzZTY0dXJsIGVuY29kaW5nOlxuICAgICAqICAgXCItXCIgaW5zdGVhZCBvZiBcIitcIixcbiAgICAgKiAgIFwiX1wiIGluc3RlYWQgb2YgXCIvXCIsXG4gICAgICogICBubyBwYWRkaW5nXG4gICAgICovXG4gICAgZGVjKGJhc2U2NFN0cikge1xuICAgICAgICAvLyBlc3RpbWF0ZSBieXRlIHNpemUsIG5vdCBhY2NvdW50aW5nIGZvciBpbm5lciBwYWRkaW5nIGFuZCB3aGl0ZXNwYWNlXG4gICAgICAgIGxldCBlcyA9IChiYXNlNjRTdHIubGVuZ3RoICogMykgLyA0O1xuICAgICAgICBpZiAoYmFzZTY0U3RyW2Jhc2U2NFN0ci5sZW5ndGggLSAyXSA9PSBcIj1cIilcbiAgICAgICAgICAgIGVzIC09IDI7XG4gICAgICAgIGVsc2UgaWYgKGJhc2U2NFN0cltiYXNlNjRTdHIubGVuZ3RoIC0gMV0gPT0gXCI9XCIpXG4gICAgICAgICAgICBlcyAtPSAxO1xuICAgICAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShlcyksIGJ5dGVQb3MgPSAwLCAvLyBwb3NpdGlvbiBpbiBieXRlIGFycmF5XG4gICAgICAgIGdyb3VwUG9zID0gMCwgLy8gcG9zaXRpb24gaW4gYmFzZTY0IGdyb3VwXG4gICAgICAgIGIsIC8vIGN1cnJlbnQgYnl0ZVxuICAgICAgICBwID0gMDsgLy8gcHJldmlvdXMgYnl0ZVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2U2NFN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYiA9IGRlY1RhYmxlW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGJhc2U2NFN0cltpXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRTNzAyOTogRmFsbHRocm91Z2ggY2FzZSBpbiBzd2l0Y2hcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIj1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMDsgLy8gcmVzZXQgc3RhdGUgd2hlbiBwYWRkaW5nIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVFM3MDI5OiBGYWxsdGhyb3VnaCBjYXNlIGluIHN3aXRjaFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxuXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXHJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgd2hpdGUtc3BhY2UsIGFuZCBwYWRkaW5nXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImludmFsaWQgYmFzZTY0IHN0cmluZy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChncm91cFBvcykge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGI7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBieXRlc1tieXRlUG9zKytdID0gKHAgPDwgMikgfCAoKGIgJiA0OCkgPj4gNCk7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBiO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbYnl0ZVBvcysrXSA9ICgocCAmIDE1KSA8PCA0KSB8ICgoYiAmIDYwKSA+PiAyKTtcbiAgICAgICAgICAgICAgICAgICAgcCA9IGI7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBieXRlc1tieXRlUG9zKytdID0gKChwICYgMykgPDwgNikgfCBiO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cFBvcyA9PSAxKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGJhc2U2NCBzdHJpbmcuXCIpO1xuICAgICAgICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkoMCwgYnl0ZVBvcyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYSBieXRlIGFycmF5IHRvIGEgYmFzZTY0IHN0cmluZy5cbiAgICAgKi9cbiAgICBlbmMoYnl0ZXMpIHtcbiAgICAgICAgbGV0IGJhc2U2NCA9IFwiXCIsIGdyb3VwUG9zID0gMCwgLy8gcG9zaXRpb24gaW4gYmFzZTY0IGdyb3VwXG4gICAgICAgIGIsIC8vIGN1cnJlbnQgYnl0ZVxuICAgICAgICBwID0gMDsgLy8gY2Fycnkgb3ZlciBmcm9tIHByZXZpb3VzIGJ5dGVcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYiA9IGJ5dGVzW2ldO1xuICAgICAgICAgICAgc3dpdGNoIChncm91cFBvcykge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0ICs9IGVuY1RhYmxlW2IgPj4gMl07XG4gICAgICAgICAgICAgICAgICAgIHAgPSAoYiAmIDMpIDw8IDQ7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBiYXNlNjQgKz0gZW5jVGFibGVbcCB8IChiID4+IDQpXTtcbiAgICAgICAgICAgICAgICAgICAgcCA9IChiICYgMTUpIDw8IDI7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBiYXNlNjQgKz0gZW5jVGFibGVbcCB8IChiID4+IDYpXTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0ICs9IGVuY1RhYmxlW2IgJiA2M107XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwUG9zID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIG91dHB1dCBwYWRkaW5nXG4gICAgICAgIGlmIChncm91cFBvcykge1xuICAgICAgICAgICAgYmFzZTY0ICs9IGVuY1RhYmxlW3BdO1xuICAgICAgICAgICAgYmFzZTY0ICs9IFwiPVwiO1xuICAgICAgICAgICAgaWYgKGdyb3VwUG9zID09IDEpXG4gICAgICAgICAgICAgICAgYmFzZTY0ICs9IFwiPVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlNjQ7XG4gICAgfSxcbn07XG4iXSwibmFtZXMiOlsiZW5jVGFibGUiLCJzcGxpdCIsImRlY1RhYmxlIiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJpbmRleE9mIiwicHJvdG9CYXNlNjQiLCJkZWMiLCJiYXNlNjRTdHIiLCJlcyIsImJ5dGVzIiwiVWludDhBcnJheSIsImJ5dGVQb3MiLCJncm91cFBvcyIsImIiLCJwIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJzdWJhcnJheSIsImVuYyIsImJhc2U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   protoInt64: () => (/* binding */ protoInt64)\n/* harmony export */ });\n/* harmony import */ var _private_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/assert.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/assert.js\");\n/* harmony import */ var _google_varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./google/varint.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/google/varint.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" && typeof dv.getBigInt64 === \"function\" && typeof dv.getBigUint64 === \"function\" && typeof dv.setBigInt64 === \"function\" && typeof dv.setBigUint64 === \"function\" && (typeof process != \"object\" || typeof process.env != \"object\" || process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse (value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse (value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc (value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true)\n                };\n            },\n            uEnc (value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true)\n                };\n            },\n            dec (lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec (lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            }\n        };\n    }\n    const assertInt64String = (value)=>(0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value)=>(0,_private_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.int64FromString)(value);\n        },\n        uEnc (value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.int64FromString)(value);\n        },\n        dec (lo, hi) {\n            return (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.int64ToString)(lo, hi);\n        },\n        uDec (lo, hi) {\n            return (0,_google_varint_js__WEBPACK_IMPORTED_MODULE_1__.uInt64ToString)(lo, hi);\n        }\n    };\n}\nconst protoInt64 = makeInt64Support();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto3.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto3.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   proto3: () => (/* binding */ proto3)\n/* harmony export */ });\n/* harmony import */ var _private_proto_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private/proto-runtime.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js\");\n/* harmony import */ var _private_field_list_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./private/field-list.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js\");\n/* harmony import */ var _private_scalars_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./private/scalars.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js\");\n/* harmony import */ var _private_field_normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./private/field-normalize.js */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js\");\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */ const proto3 = (0,_private_proto_runtime_js__WEBPACK_IMPORTED_MODULE_0__.makeProtoRuntime)(\"proto3\", (fields)=>{\n    return new _private_field_list_js__WEBPACK_IMPORTED_MODULE_1__.InternalFieldList(fields, (source)=>(0,_private_field_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalizeFieldInfos)(source, true));\n}, // TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone\n(target)=>{\n    for (const member of target.getType().fields.byMember()){\n        if (member.opt) {\n            continue;\n        }\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch(member.kind){\n            case \"oneof\":\n                t[name] = {\n                    case: undefined\n                };\n                break;\n            case \"enum\":\n                t[name] = 0;\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n                t[name] = (0,_private_scalars_js__WEBPACK_IMPORTED_MODULE_3__.scalarZeroValue)(member.T, member.L);\n                break;\n            case \"message\":\n                break;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90bzMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDNkI7QUFDRjtBQUNMO0FBQ1k7QUFDbkU7O0NBRUMsR0FDTSxNQUFNSSxTQUFTSiwyRUFBZ0JBLENBQUMsVUFBVSxDQUFDSztJQUM5QyxPQUFPLElBQUlKLHFFQUFpQkEsQ0FBQ0ksUUFBUSxDQUFDQyxTQUFXSCxnRkFBbUJBLENBQUNHLFFBQVE7QUFDakYsR0FDQSxxRkFBcUY7QUFDckYsQ0FBQ0M7SUFDRyxLQUFLLE1BQU1DLFVBQVVELE9BQU9FLE9BQU8sR0FBR0osTUFBTSxDQUFDSyxRQUFRLEdBQUk7UUFDckQsSUFBSUYsT0FBT0csR0FBRyxFQUFFO1lBQ1o7UUFDSjtRQUNBLE1BQU1DLE9BQU9KLE9BQU9LLFNBQVMsRUFBRUMsSUFBSVA7UUFDbkMsSUFBSUMsT0FBT08sUUFBUSxFQUFFO1lBQ2pCRCxDQUFDLENBQUNGLEtBQUssR0FBRyxFQUFFO1lBQ1o7UUFDSjtRQUNBLE9BQVFKLE9BQU9RLElBQUk7WUFDZixLQUFLO2dCQUNERixDQUFDLENBQUNGLEtBQUssR0FBRztvQkFBRUssTUFBTUM7Z0JBQVU7Z0JBQzVCO1lBQ0osS0FBSztnQkFDREosQ0FBQyxDQUFDRixLQUFLLEdBQUc7Z0JBQ1Y7WUFDSixLQUFLO2dCQUNERSxDQUFDLENBQUNGLEtBQUssR0FBRyxDQUFDO2dCQUNYO1lBQ0osS0FBSztnQkFDREUsQ0FBQyxDQUFDRixLQUFLLEdBQUdWLG9FQUFlQSxDQUFDTSxPQUFPVyxDQUFDLEVBQUVYLE9BQU9ZLENBQUM7Z0JBQzVDO1lBQ0osS0FBSztnQkFFRDtRQUNSO0lBQ0o7QUFDSixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90bzMuanM/MGNjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgbWFrZVByb3RvUnVudGltZSB9IGZyb20gXCIuL3ByaXZhdGUvcHJvdG8tcnVudGltZS5qc1wiO1xuaW1wb3J0IHsgSW50ZXJuYWxGaWVsZExpc3QgfSBmcm9tIFwiLi9wcml2YXRlL2ZpZWxkLWxpc3QuanNcIjtcbmltcG9ydCB7IHNjYWxhclplcm9WYWx1ZSB9IGZyb20gXCIuL3ByaXZhdGUvc2NhbGFycy5qc1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplRmllbGRJbmZvcyB9IGZyb20gXCIuL3ByaXZhdGUvZmllbGQtbm9ybWFsaXplLmpzXCI7XG4vKipcbiAqIFByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIG1lc3NhZ2VzIGRlZmluZWQgd2l0aCB0aGUgcHJvdG8zIHN5bnRheC5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvMyA9IG1ha2VQcm90b1J1bnRpbWUoXCJwcm90bzNcIiwgKGZpZWxkcykgPT4ge1xuICAgIHJldHVybiBuZXcgSW50ZXJuYWxGaWVsZExpc3QoZmllbGRzLCAoc291cmNlKSA9PiBub3JtYWxpemVGaWVsZEluZm9zKHNvdXJjZSwgdHJ1ZSkpO1xufSwgXG4vLyBUT0RPIG1lcmdlIHdpdGggcHJvdG8yIGFuZCBpbml0RXh0ZW5zaW9uRmllbGQsIGFsc28gc2VlIGluaXRQYXJ0aWFsLCBlcXVhbHMsIGNsb25lXG4odGFyZ2V0KSA9PiB7XG4gICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdGFyZ2V0LmdldFR5cGUoKS5maWVsZHMuYnlNZW1iZXIoKSkge1xuICAgICAgICBpZiAobWVtYmVyLm9wdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZSA9IG1lbWJlci5sb2NhbE5hbWUsIHQgPSB0YXJnZXQ7XG4gICAgICAgIGlmIChtZW1iZXIucmVwZWF0ZWQpIHtcbiAgICAgICAgICAgIHRbbmFtZV0gPSBbXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAobWVtYmVyLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJvbmVvZlwiOlxuICAgICAgICAgICAgICAgIHRbbmFtZV0gPSB7IGNhc2U6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICB0W25hbWVdID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICB0W25hbWVdID0ge307XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgdFtuYW1lXSA9IHNjYWxhclplcm9WYWx1ZShtZW1iZXIuVCwgbWVtYmVyLkwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlIGZpZWxkcyBhcmUgYWx3YXlzIG9wdGlvbmFsIGluIHByb3RvM1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iXSwibmFtZXMiOlsibWFrZVByb3RvUnVudGltZSIsIkludGVybmFsRmllbGRMaXN0Iiwic2NhbGFyWmVyb1ZhbHVlIiwibm9ybWFsaXplRmllbGRJbmZvcyIsInByb3RvMyIsImZpZWxkcyIsInNvdXJjZSIsInRhcmdldCIsIm1lbWJlciIsImdldFR5cGUiLCJieU1lbWJlciIsIm9wdCIsIm5hbWUiLCJsb2NhbE5hbWUiLCJ0IiwicmVwZWF0ZWQiLCJraW5kIiwiY2FzZSIsInVuZGVmaW5lZCIsIlQiLCJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto3.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LongType: () => (/* binding */ LongType),\n/* harmony export */   ScalarType: () => (/* binding */ ScalarType)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */ var ScalarType;\n(function(ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */ var LongType;\n(function(LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */ LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */ LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9zY2FsYXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakM7Ozs7Q0FJQyxHQUNNLElBQUlBLFdBQVc7QUFDckIsVUFBVUEsVUFBVTtJQUNqQiw0QkFBNEI7SUFDNUIseUNBQXlDO0lBQ3pDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQ3ZDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQ3RDLDJFQUEyRTtJQUMzRSw4QkFBOEI7SUFDOUJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDdENBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkMsMkVBQTJFO0lBQzNFLDhCQUE4QjtJQUM5QkEsVUFBVSxDQUFDQSxVQUFVLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUN0Q0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUN4Q0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUN4Q0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUNyQ0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUN2QywyQkFBMkI7SUFDM0Isd0VBQXdFO0lBQ3hFLDBFQUEwRTtJQUMxRSx3Q0FBd0M7SUFDeEMsbUJBQW1CO0lBQ25CLHFEQUFxRDtJQUNyRCxvQkFBb0I7SUFDcEJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUc7SUFDeEMsa0JBQWtCO0lBQ2xCQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHO0lBQ3hDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHO0FBQzVDLEdBQUdBLGNBQWVBLENBQUFBLGFBQWEsQ0FBQztBQUNoQzs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNNLElBQUlDLFNBQVM7QUFDbkIsVUFBVUEsUUFBUTtJQUNmOztLQUVDLEdBQ0RBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDbkM7Ozs7S0FJQyxHQUNEQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQ3ZDLEdBQUdBLFlBQWFBLENBQUFBLFdBQVcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vc2NhbGFyLmpzPzRjMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogU2NhbGFyIHZhbHVlIHR5cGVzLiBUaGlzIGlzIGEgc3Vic2V0IG9mIGZpZWxkIHR5cGVzIGRlY2xhcmVkIGJ5IHByb3RvYnVmXG4gKiBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlIFRoZSB0eXBlcyBHUk9VUCBhbmQgTUVTU0FHRVxuICogYXJlIG9taXR0ZWQsIGJ1dCB0aGUgbnVtZXJpY2FsIHZhbHVlcyBhcmUgaWRlbnRpY2FsLlxuICovXG5leHBvcnQgdmFyIFNjYWxhclR5cGU7XG4oZnVuY3Rpb24gKFNjYWxhclR5cGUpIHtcbiAgICAvLyAwIGlzIHJlc2VydmVkIGZvciBlcnJvcnMuXG4gICAgLy8gT3JkZXIgaXMgd2VpcmQgZm9yIGhpc3RvcmljYWwgcmVhc29ucy5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJET1VCTEVcIl0gPSAxXSA9IFwiRE9VQkxFXCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiRkxPQVRcIl0gPSAyXSA9IFwiRkxPQVRcIjtcbiAgICAvLyBOb3QgWmlnWmFnIGVuY29kZWQuICBOZWdhdGl2ZSBudW1iZXJzIHRha2UgMTAgYnl0ZXMuICBVc2UgVFlQRV9TSU5UNjQgaWZcbiAgICAvLyBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGxpa2VseS5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJJTlQ2NFwiXSA9IDNdID0gXCJJTlQ2NFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlVJTlQ2NFwiXSA9IDRdID0gXCJVSU5UNjRcIjtcbiAgICAvLyBOb3QgWmlnWmFnIGVuY29kZWQuICBOZWdhdGl2ZSBudW1iZXJzIHRha2UgMTAgYnl0ZXMuICBVc2UgVFlQRV9TSU5UMzIgaWZcbiAgICAvLyBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGxpa2VseS5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJJTlQzMlwiXSA9IDVdID0gXCJJTlQzMlwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkZJWEVENjRcIl0gPSA2XSA9IFwiRklYRUQ2NFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkZJWEVEMzJcIl0gPSA3XSA9IFwiRklYRUQzMlwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkJPT0xcIl0gPSA4XSA9IFwiQk9PTFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlNUUklOR1wiXSA9IDldID0gXCJTVFJJTkdcIjtcbiAgICAvLyBUYWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAvLyBHcm91cCB0eXBlIGlzIGRlcHJlY2F0ZWQgYW5kIG5vdCBzdXBwb3J0ZWQgaW4gcHJvdG8zLiBIb3dldmVyLCBQcm90bzNcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHN0aWxsIGJlIGFibGUgdG8gcGFyc2UgdGhlIGdyb3VwIHdpcmUgZm9ybWF0IGFuZFxuICAgIC8vIHRyZWF0IGdyb3VwIGZpZWxkcyBhcyB1bmtub3duIGZpZWxkcy5cbiAgICAvLyBUWVBFX0dST1VQID0gMTAsXG4gICAgLy8gVFlQRV9NRVNTQUdFID0gMTEsICAvLyBMZW5ndGgtZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAvLyBOZXcgaW4gdmVyc2lvbiAyLlxuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkJZVEVTXCJdID0gMTJdID0gXCJCWVRFU1wiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlVJTlQzMlwiXSA9IDEzXSA9IFwiVUlOVDMyXCI7XG4gICAgLy8gVFlQRV9FTlVNID0gMTQsXG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0ZJWEVEMzJcIl0gPSAxNV0gPSBcIlNGSVhFRDMyXCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0ZJWEVENjRcIl0gPSAxNl0gPSBcIlNGSVhFRDY0XCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0lOVDMyXCJdID0gMTddID0gXCJTSU5UMzJcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJTSU5UNjRcIl0gPSAxOF0gPSBcIlNJTlQ2NFwiO1xufSkoU2NhbGFyVHlwZSB8fCAoU2NhbGFyVHlwZSA9IHt9KSk7XG4vKipcbiAqIEphdmFTY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgZmllbGRzIHdpdGggNjQgYml0IGludGVncmFsIHR5cGVzIChpbnQ2NCwgdWludDY0LFxuICogc2ludDY0LCBmaXhlZDY0LCBzZml4ZWQ2NCkuXG4gKlxuICogVGhpcyBpcyBhIHN1YnNldCBvZiBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZSwgd2hpY2ggZGVmaW5lcyBKU19OT1JNQUwsXG4gKiBKU19TVFJJTkcsIGFuZCBKU19OVU1CRVIuIFByb3RvYnVmLUVTIHVzZXMgQmlnSW50IGJ5IGRlZmF1bHQsIGJ1dCB3aWxsIHVzZVxuICogU3RyaW5nIGlmIGBbanN0eXBlID0gSlNfU1RSSU5HXWAgaXMgc3BlY2lmaWVkLlxuICpcbiAqIGBgYHByb3RvYnVmXG4gKiB1aW50NjQgZmllbGRfYSA9IDE7IC8vIEJpZ0ludFxuICogdWludDY0IGZpZWxkX2IgPSAyIFtqc3R5cGUgPSBKU19OT1JNQUxdOyAvLyBCaWdJbnRcbiAqIHVpbnQ2NCBmaWVsZF9iID0gMiBbanN0eXBlID0gSlNfTlVNQkVSXTsgLy8gQmlnSW50XG4gKiB1aW50NjQgZmllbGRfYiA9IDIgW2pzdHlwZSA9IEpTX1NUUklOR107IC8vIFN0cmluZ1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgTG9uZ1R5cGU7XG4oZnVuY3Rpb24gKExvbmdUeXBlKSB7XG4gICAgLyoqXG4gICAgICogVXNlIEphdmFTY3JpcHQgQmlnSW50LlxuICAgICAqL1xuICAgIExvbmdUeXBlW0xvbmdUeXBlW1wiQklHSU5UXCJdID0gMF0gPSBcIkJJR0lOVFwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBKYXZhU2NyaXB0IFN0cmluZy5cbiAgICAgKlxuICAgICAqIEZpZWxkIG9wdGlvbiBgW2pzdHlwZSA9IEpTX1NUUklOR11gLlxuICAgICAqL1xuICAgIExvbmdUeXBlW0xvbmdUeXBlW1wiU1RSSU5HXCJdID0gMV0gPSBcIlNUUklOR1wiO1xufSkoTG9uZ1R5cGUgfHwgKExvbmdUeXBlID0ge30pKTtcbiJdLCJuYW1lcyI6WyJTY2FsYXJUeXBlIiwiTG9uZ1R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/scalar.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js":
/*!****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MethodIdempotency: () => (/* binding */ MethodIdempotency),\n/* harmony export */   MethodKind: () => (/* binding */ MethodKind)\n/* harmony export */ });\n// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */ var MethodKind;\n(function(MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */ var MethodIdempotency;\n(function(MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */ MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */ MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9zZXJ2aWNlLXR5cGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakM7Ozs7Ozs7O0NBUUMsR0FDTSxJQUFJQSxXQUFXO0FBQ3JCLFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDdENBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsR0FBRztJQUNoREEsVUFBVSxDQUFDQSxVQUFVLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxHQUFHO0lBQ2hEQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEdBQUc7QUFDbEQsR0FBR0EsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDO0FBQ2hDOzs7Ozs7Ozs7Q0FTQyxHQUNNLElBQUlDLGtCQUFrQjtBQUM1QixVQUFVQSxpQkFBaUI7SUFDeEI7O0tBRUMsR0FDREEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGdCQUFnQixHQUFHLEVBQUUsR0FBRztJQUM1RDs7S0FFQyxHQUNEQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsYUFBYSxHQUFHLEVBQUUsR0FBRztBQUM3RCxHQUFHQSxxQkFBc0JBLENBQUFBLG9CQUFvQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9zZXJ2aWNlLXR5cGUuanM/NmMzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBNZXRob2RLaW5kIHJlcHJlc2VudHMgdGhlIGZvdXIgbWV0aG9kIHR5cGVzIHRoYXQgY2FuIGJlIGRlY2xhcmVkIGluXG4gKiBwcm90b2J1ZiB3aXRoIHRoZSBgc3RyZWFtYCBrZXl3b3JkOlxuICpcbiAqIDEuIFVuYXJ5OiAgICAgICAgICAgcnBjIChJbnB1dCkgcmV0dXJucyAoT3V0cHV0KVxuICogMi4gU2VydmVyU3RyZWFtaW5nOiBycGMgKElucHV0KSByZXR1cm5zIChzdHJlYW0gT3V0cHV0KVxuICogMy4gQ2xpZW50U3RyZWFtaW5nOiBycGMgKHN0cmVhbSBJbnB1dCkgcmV0dXJucyAoT3V0cHV0KVxuICogNC4gQmlEaVN0cmVhbWluZzogICBycGMgKHN0cmVhbSBJbnB1dCkgcmV0dXJucyAoc3RyZWFtIE91dHB1dClcbiAqL1xuZXhwb3J0IHZhciBNZXRob2RLaW5kO1xuKGZ1bmN0aW9uIChNZXRob2RLaW5kKSB7XG4gICAgTWV0aG9kS2luZFtNZXRob2RLaW5kW1wiVW5hcnlcIl0gPSAwXSA9IFwiVW5hcnlcIjtcbiAgICBNZXRob2RLaW5kW01ldGhvZEtpbmRbXCJTZXJ2ZXJTdHJlYW1pbmdcIl0gPSAxXSA9IFwiU2VydmVyU3RyZWFtaW5nXCI7XG4gICAgTWV0aG9kS2luZFtNZXRob2RLaW5kW1wiQ2xpZW50U3RyZWFtaW5nXCJdID0gMl0gPSBcIkNsaWVudFN0cmVhbWluZ1wiO1xuICAgIE1ldGhvZEtpbmRbTWV0aG9kS2luZFtcIkJpRGlTdHJlYW1pbmdcIl0gPSAzXSA9IFwiQmlEaVN0cmVhbWluZ1wiO1xufSkoTWV0aG9kS2luZCB8fCAoTWV0aG9kS2luZCA9IHt9KSk7XG4vKipcbiAqIElzIHRoaXMgbWV0aG9kIHNpZGUtZWZmZWN0LWZyZWUgKG9yIHNhZmUgaW4gSFRUUCBwYXJsYW5jZSksIG9yIGp1c3RcbiAqIGlkZW1wb3RlbnQsIG9yIG5laXRoZXI/IEhUVFAgYmFzZWQgUlBDIGltcGxlbWVudGF0aW9uIG1heSBjaG9vc2UgR0VUIHZlcmJcbiAqIGZvciBzYWZlIG1ldGhvZHMsIGFuZCBQVVQgdmVyYiBmb3IgaWRlbXBvdGVudCBtZXRob2RzIGluc3RlYWQgb2YgdGhlXG4gKiBkZWZhdWx0IFBPU1QuXG4gKlxuICogVGhpcyBlbnVtIG1hdGNoZXMgdGhlIHByb3RvYnVmIGVudW0gZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbCxcbiAqIGRlZmluZWQgaW4gdGhlIHdlbGwta25vd24gdHlwZSBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bywgYnV0XG4gKiBkcm9wcyBVTktOT1dOLlxuICovXG5leHBvcnQgdmFyIE1ldGhvZElkZW1wb3RlbmN5O1xuKGZ1bmN0aW9uIChNZXRob2RJZGVtcG90ZW5jeSkge1xuICAgIC8qKlxuICAgICAqIElkZW1wb3RlbnQsIG5vIHNpZGUgZWZmZWN0cy5cbiAgICAgKi9cbiAgICBNZXRob2RJZGVtcG90ZW5jeVtNZXRob2RJZGVtcG90ZW5jeVtcIk5vU2lkZUVmZmVjdHNcIl0gPSAxXSA9IFwiTm9TaWRlRWZmZWN0c1wiO1xuICAgIC8qKlxuICAgICAqIElkZW1wb3RlbnQsIGJ1dCBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAgICovXG4gICAgTWV0aG9kSWRlbXBvdGVuY3lbTWV0aG9kSWRlbXBvdGVuY3lbXCJJZGVtcG90ZW50XCJdID0gMl0gPSBcIklkZW1wb3RlbnRcIjtcbn0pKE1ldGhvZElkZW1wb3RlbmN5IHx8IChNZXRob2RJZGVtcG90ZW5jeSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiTWV0aG9kS2luZCIsIk1ldGhvZElkZW1wb3RlbmN5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js\n");

/***/ })

};
;