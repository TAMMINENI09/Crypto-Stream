"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1";
exports.ids = ["vendor-chunks/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/any-client.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/any-client.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeAnyClient: () => (/* binding */ makeAnyClient)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create any client for the given service.\n *\n * The given createMethod function is called for each method definition\n * of the service. The function it returns is added to the client object\n * as a method.\n */ function makeAnyClient(service, createMethod) {\n    const client = {};\n    for (const [localName, methodInfo] of Object.entries(service.methods)){\n        const method = createMethod(Object.assign(Object.assign({}, methodInfo), {\n            localName,\n            service\n        }));\n        if (method != null) {\n            client[localName] = method;\n        }\n    }\n    return client;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9hbnktY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakM7Ozs7OztDQU1DLEdBQ00sU0FBU0EsY0FBY0MsT0FBTyxFQUFFQyxZQUFZO0lBQy9DLE1BQU1DLFNBQVMsQ0FBQztJQUNoQixLQUFLLE1BQU0sQ0FBQ0MsV0FBV0MsV0FBVyxJQUFJQyxPQUFPQyxPQUFPLENBQUNOLFFBQVFPLE9BQU8sRUFBRztRQUNuRSxNQUFNQyxTQUFTUCxhQUFhSSxPQUFPSSxNQUFNLENBQUNKLE9BQU9JLE1BQU0sQ0FBQyxDQUFDLEdBQUdMLGFBQWE7WUFBRUQ7WUFDdkVIO1FBQVE7UUFDWixJQUFJUSxVQUFVLE1BQU07WUFDaEJOLE1BQU0sQ0FBQ0MsVUFBVSxHQUFHSztRQUN4QjtJQUNKO0lBQ0EsT0FBT047QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vYW55LWNsaWVudC5qcz82ODJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIENyZWF0ZSBhbnkgY2xpZW50IGZvciB0aGUgZ2l2ZW4gc2VydmljZS5cbiAqXG4gKiBUaGUgZ2l2ZW4gY3JlYXRlTWV0aG9kIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBtZXRob2QgZGVmaW5pdGlvblxuICogb2YgdGhlIHNlcnZpY2UuIFRoZSBmdW5jdGlvbiBpdCByZXR1cm5zIGlzIGFkZGVkIHRvIHRoZSBjbGllbnQgb2JqZWN0XG4gKiBhcyBhIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBbnlDbGllbnQoc2VydmljZSwgY3JlYXRlTWV0aG9kKSB7XG4gICAgY29uc3QgY2xpZW50ID0ge307XG4gICAgZm9yIChjb25zdCBbbG9jYWxOYW1lLCBtZXRob2RJbmZvXSBvZiBPYmplY3QuZW50cmllcyhzZXJ2aWNlLm1ldGhvZHMpKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGNyZWF0ZU1ldGhvZChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1ldGhvZEluZm8pLCB7IGxvY2FsTmFtZSxcbiAgICAgICAgICAgIHNlcnZpY2UgfSkpO1xuICAgICAgICBpZiAobWV0aG9kICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsaWVudFtsb2NhbE5hbWVdID0gbWV0aG9kO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGllbnQ7XG59XG4iXSwibmFtZXMiOlsibWFrZUFueUNsaWVudCIsInNlcnZpY2UiLCJjcmVhdGVNZXRob2QiLCJjbGllbnQiLCJsb2NhbE5hbWUiLCJtZXRob2RJbmZvIiwiT2JqZWN0IiwiZW50cmllcyIsIm1ldGhvZHMiLCJtZXRob2QiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/any-client.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js":
/*!***********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Connect represents categories of errors as codes, and each code maps to a\n * specific HTTP status code. The codes and their semantics were chosen to\n * match gRPC. Only the codes below are valid â€” there are no user-defined\n * codes.\n *\n * See the specification at https://connectrpc.com/docs/protocol#error-codes\n * for details.\n */ var Code;\n(function(Code) {\n    /**\n     * Canceled, usually be the user\n     */ Code[Code[\"Canceled\"] = 1] = \"Canceled\";\n    /**\n     * Unknown error\n     */ Code[Code[\"Unknown\"] = 2] = \"Unknown\";\n    /**\n     * Argument invalid regardless of system state\n     */ Code[Code[\"InvalidArgument\"] = 3] = \"InvalidArgument\";\n    /**\n     * Operation expired, may or may not have completed.\n     */ Code[Code[\"DeadlineExceeded\"] = 4] = \"DeadlineExceeded\";\n    /**\n     * Entity not found.\n     */ Code[Code[\"NotFound\"] = 5] = \"NotFound\";\n    /**\n     * Entity already exists.\n     */ Code[Code[\"AlreadyExists\"] = 6] = \"AlreadyExists\";\n    /**\n     * Operation not authorized.\n     */ Code[Code[\"PermissionDenied\"] = 7] = \"PermissionDenied\";\n    /**\n     * Quota exhausted.\n     */ Code[Code[\"ResourceExhausted\"] = 8] = \"ResourceExhausted\";\n    /**\n     * Argument invalid in current system state.\n     */ Code[Code[\"FailedPrecondition\"] = 9] = \"FailedPrecondition\";\n    /**\n     * Operation aborted.\n     */ Code[Code[\"Aborted\"] = 10] = \"Aborted\";\n    /**\n     * Out of bounds, use instead of FailedPrecondition.\n     */ Code[Code[\"OutOfRange\"] = 11] = \"OutOfRange\";\n    /**\n     * Operation not implemented or disabled.\n     */ Code[Code[\"Unimplemented\"] = 12] = \"Unimplemented\";\n    /**\n     * Internal error, reserved for \"serious errors\".\n     */ Code[Code[\"Internal\"] = 13] = \"Internal\";\n    /**\n     * Unavailable, client should back off and retry.\n     */ Code[Code[\"Unavailable\"] = 14] = \"Unavailable\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */ Code[Code[\"DataLoss\"] = 15] = \"DataLoss\";\n    /**\n     * Request isn't authenticated.\n     */ Code[Code[\"Unauthenticated\"] = 16] = \"Unauthenticated\";\n})(Code || (Code = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9jb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakM7Ozs7Ozs7O0NBUUMsR0FDTSxJQUFJQSxLQUFLO0FBQ2YsVUFBVUEsSUFBSTtJQUNYOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM1Qjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLEdBQUc7SUFDcEM7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ3JDOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHO0lBQ2xDOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsR0FBRztJQUNyQzs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUc7SUFDdEM7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMscUJBQXFCLEdBQUcsRUFBRSxHQUFHO0lBQ3ZDOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUc7SUFDN0I7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsR0FBRztJQUNoQzs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkM7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRztJQUM5Qjs7S0FFQyxHQUNEQSxJQUFJLENBQUNBLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxHQUFHO0lBQ2pDOztLQUVDLEdBQ0RBLElBQUksQ0FBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUc7SUFDOUI7O0tBRUMsR0FDREEsSUFBSSxDQUFDQSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0FBQ3pDLEdBQUdBLFFBQVNBLENBQUFBLE9BQU8sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vY29kZS5qcz8zNzgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIENvbm5lY3QgcmVwcmVzZW50cyBjYXRlZ29yaWVzIG9mIGVycm9ycyBhcyBjb2RlcywgYW5kIGVhY2ggY29kZSBtYXBzIHRvIGFcbiAqIHNwZWNpZmljIEhUVFAgc3RhdHVzIGNvZGUuIFRoZSBjb2RlcyBhbmQgdGhlaXIgc2VtYW50aWNzIHdlcmUgY2hvc2VuIHRvXG4gKiBtYXRjaCBnUlBDLiBPbmx5IHRoZSBjb2RlcyBiZWxvdyBhcmUgdmFsaWQg4oCUIHRoZXJlIGFyZSBubyB1c2VyLWRlZmluZWRcbiAqIGNvZGVzLlxuICpcbiAqIFNlZSB0aGUgc3BlY2lmaWNhdGlvbiBhdCBodHRwczovL2Nvbm5lY3RycGMuY29tL2RvY3MvcHJvdG9jb2wjZXJyb3ItY29kZXNcbiAqIGZvciBkZXRhaWxzLlxuICovXG5leHBvcnQgdmFyIENvZGU7XG4oZnVuY3Rpb24gKENvZGUpIHtcbiAgICAvKipcbiAgICAgKiBDYW5jZWxlZCwgdXN1YWxseSBiZSB0aGUgdXNlclxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkNhbmNlbGVkXCJdID0gMV0gPSBcIkNhbmNlbGVkXCI7XG4gICAgLyoqXG4gICAgICogVW5rbm93biBlcnJvclxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIlVua25vd25cIl0gPSAyXSA9IFwiVW5rbm93blwiO1xuICAgIC8qKlxuICAgICAqIEFyZ3VtZW50IGludmFsaWQgcmVnYXJkbGVzcyBvZiBzeXN0ZW0gc3RhdGVcbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJJbnZhbGlkQXJndW1lbnRcIl0gPSAzXSA9IFwiSW52YWxpZEFyZ3VtZW50XCI7XG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9uIGV4cGlyZWQsIG1heSBvciBtYXkgbm90IGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkRlYWRsaW5lRXhjZWVkZWRcIl0gPSA0XSA9IFwiRGVhZGxpbmVFeGNlZWRlZFwiO1xuICAgIC8qKlxuICAgICAqIEVudGl0eSBub3QgZm91bmQuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiTm90Rm91bmRcIl0gPSA1XSA9IFwiTm90Rm91bmRcIjtcbiAgICAvKipcbiAgICAgKiBFbnRpdHkgYWxyZWFkeSBleGlzdHMuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiQWxyZWFkeUV4aXN0c1wiXSA9IDZdID0gXCJBbHJlYWR5RXhpc3RzXCI7XG4gICAgLyoqXG4gICAgICogT3BlcmF0aW9uIG5vdCBhdXRob3JpemVkLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIlBlcm1pc3Npb25EZW5pZWRcIl0gPSA3XSA9IFwiUGVybWlzc2lvbkRlbmllZFwiO1xuICAgIC8qKlxuICAgICAqIFF1b3RhIGV4aGF1c3RlZC5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJSZXNvdXJjZUV4aGF1c3RlZFwiXSA9IDhdID0gXCJSZXNvdXJjZUV4aGF1c3RlZFwiO1xuICAgIC8qKlxuICAgICAqIEFyZ3VtZW50IGludmFsaWQgaW4gY3VycmVudCBzeXN0ZW0gc3RhdGUuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiRmFpbGVkUHJlY29uZGl0aW9uXCJdID0gOV0gPSBcIkZhaWxlZFByZWNvbmRpdGlvblwiO1xuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiBhYm9ydGVkLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkFib3J0ZWRcIl0gPSAxMF0gPSBcIkFib3J0ZWRcIjtcbiAgICAvKipcbiAgICAgKiBPdXQgb2YgYm91bmRzLCB1c2UgaW5zdGVhZCBvZiBGYWlsZWRQcmVjb25kaXRpb24uXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiT3V0T2ZSYW5nZVwiXSA9IDExXSA9IFwiT3V0T2ZSYW5nZVwiO1xuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiBub3QgaW1wbGVtZW50ZWQgb3IgZGlzYWJsZWQuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiVW5pbXBsZW1lbnRlZFwiXSA9IDEyXSA9IFwiVW5pbXBsZW1lbnRlZFwiO1xuICAgIC8qKlxuICAgICAqIEludGVybmFsIGVycm9yLCByZXNlcnZlZCBmb3IgXCJzZXJpb3VzIGVycm9yc1wiLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkludGVybmFsXCJdID0gMTNdID0gXCJJbnRlcm5hbFwiO1xuICAgIC8qKlxuICAgICAqIFVuYXZhaWxhYmxlLCBjbGllbnQgc2hvdWxkIGJhY2sgb2ZmIGFuZCByZXRyeS5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJVbmF2YWlsYWJsZVwiXSA9IDE0XSA9IFwiVW5hdmFpbGFibGVcIjtcbiAgICAvKipcbiAgICAgKiBVbnJlY292ZXJhYmxlIGRhdGEgbG9zcyBvciBjb3JydXB0aW9uLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkRhdGFMb3NzXCJdID0gMTVdID0gXCJEYXRhTG9zc1wiO1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgaXNuJ3QgYXV0aGVudGljYXRlZC5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJVbmF1dGhlbnRpY2F0ZWRcIl0gPSAxNl0gPSBcIlVuYXV0aGVudGljYXRlZFwiO1xufSkoQ29kZSB8fCAoQ29kZSA9IHt9KSk7XG4iXSwibmFtZXMiOlsiQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js":
/*!********************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectError: () => (/* binding */ ConnectError)\n/* harmony export */ });\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _protocol_connect_code_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol-connect/code-string.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * ConnectError captures four pieces of information: a Code, an error\n * message, an optional cause of the error, and an optional collection of\n * arbitrary Protobuf messages called  \"details\".\n *\n * Because developer tools typically show just the error message, we prefix\n * it with the status code, so that the most important information is always\n * visible immediately.\n *\n * Error details are wrapped with google.protobuf.Any on the wire, so that\n * a server or middleware can attach arbitrary data to an error. Use the\n * method findDetails() to retrieve the details.\n */ class ConnectError extends Error {\n    /**\n     * Create a new ConnectError.\n     * If no code is provided, code \"unknown\" is used.\n     * Outgoing details are only relevant for the server side - a service may\n     * raise an error with details, and it is up to the protocol implementation\n     * to encode and send the details along with error.\n     */ constructor(message, code = _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unknown, metadata, outgoingDetails, cause){\n        super(createMessage(message, code));\n        this.name = \"ConnectError\";\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.rawMessage = message;\n        this.code = code;\n        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});\n        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];\n        this.cause = cause;\n    }\n    /**\n     * Convert any value - typically a caught error into a ConnectError,\n     * following these rules:\n     * - If the value is already a ConnectError, return it as is.\n     * - If the value is an AbortError from the fetch API, return the message\n     *   of the AbortError with code Canceled.\n     * - For other Errors, return the error message with code Unknown by default.\n     * - For other values, return the values String representation as a message,\n     *   with the code Unknown by default.\n     * The original value will be used for the \"cause\" property for the new\n     * ConnectError.\n     */ static from(reason, code = _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unknown) {\n        if (reason instanceof ConnectError) {\n            return reason;\n        }\n        if (reason instanceof Error) {\n            if (reason.name == \"AbortError\") {\n                // Fetch requests can only be canceled with an AbortController.\n                // We detect that condition by looking at the name of the raised\n                // error object, and translate to the appropriate status code.\n                return new ConnectError(reason.message, _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Canceled);\n            }\n            return new ConnectError(reason.message, code, undefined, undefined, reason);\n        }\n        return new ConnectError(String(reason), code, undefined, undefined, reason);\n    }\n    static [Symbol.hasInstance](v) {\n        if (!(v instanceof Error)) {\n            return false;\n        }\n        if (Object.getPrototypeOf(v) === ConnectError.prototype) {\n            return true;\n        }\n        return v.name === \"ConnectError\" && \"code\" in v && typeof v.code === \"number\" && \"metadata\" in v && \"details\" in v && Array.isArray(v.details) && \"rawMessage\" in v && typeof v.rawMessage == \"string\" && \"cause\" in v;\n    }\n    findDetails(typeOrRegistry) {\n        const registry = \"typeName\" in typeOrRegistry ? {\n            findMessage: (typeName)=>typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined\n        } : typeOrRegistry;\n        const details = [];\n        for (const data of this.details){\n            if (\"getType\" in data) {\n                if (registry.findMessage(data.getType().typeName)) {\n                    details.push(data);\n                }\n                continue;\n            }\n            const type = registry.findMessage(data.type);\n            if (type) {\n                try {\n                    details.push(type.fromBinary(data.value));\n                } catch (_) {\n                // We silently give up if we are unable to parse the detail, because\n                // that appears to be the least worst behavior.\n                // It is very unlikely that a user surrounds a catch body handling the\n                // error with another try-catch statement, and we do not want to\n                // recommend doing so.\n                }\n            }\n        }\n        return details;\n    }\n}\n/**\n * Create an error message, prefixing the given code.\n */ function createMessage(message, code) {\n    return message.length ? `[${(0,_protocol_connect_code_string_js__WEBPACK_IMPORTED_MODULE_1__.codeToString)(code)}] ${message}` : `[${(0,_protocol_connect_code_string_js__WEBPACK_IMPORTED_MODULE_1__.codeToString)(code)}]`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/context-values.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/context-values.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createContextKey: () => (/* binding */ createContextKey),\n/* harmony export */   createContextValues: () => (/* binding */ createContextValues)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * createContextValues creates a new ContextValues.\n */ function createContextValues() {\n    return {\n        get (key) {\n            return key.id in this ? this[key.id] : key.defaultValue;\n        },\n        set (key, value) {\n            this[key.id] = value;\n            return this;\n        },\n        delete (key) {\n            delete this[key.id];\n            return this;\n        }\n    };\n}\n/**\n * createContextKey creates a new ContextKey.\n */ function createContextKey(defaultValue, options) {\n    return {\n        id: Symbol(options === null || options === void 0 ? void 0 : options.description),\n        defaultValue\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9jb250ZXh0LXZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQzs7Q0FFQyxHQUNNLFNBQVNBO0lBQ1osT0FBTztRQUNIQyxLQUFJQyxHQUFHO1lBQ0gsT0FBT0EsSUFBSUMsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUNELElBQUlDLEVBQUUsQ0FBQyxHQUFHRCxJQUFJRSxZQUFZO1FBQzNEO1FBQ0FDLEtBQUlILEdBQUcsRUFBRUksS0FBSztZQUNWLElBQUksQ0FBQ0osSUFBSUMsRUFBRSxDQUFDLEdBQUdHO1lBQ2YsT0FBTyxJQUFJO1FBQ2Y7UUFDQUMsUUFBT0wsR0FBRztZQUNOLE9BQU8sSUFBSSxDQUFDQSxJQUFJQyxFQUFFLENBQUM7WUFDbkIsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTSyxpQkFBaUJKLFlBQVksRUFBRUssT0FBTztJQUNsRCxPQUFPO1FBQUVOLElBQUlPLE9BQU9ELFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRRSxXQUFXO1FBQUdQO0lBQWE7QUFDN0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL2NvbnRleHQtdmFsdWVzLmpzPzZkYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogY3JlYXRlQ29udGV4dFZhbHVlcyBjcmVhdGVzIGEgbmV3IENvbnRleHRWYWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0VmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXkuaWQgaW4gdGhpcyA/IHRoaXNba2V5LmlkXSA6IGtleS5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzW2tleS5pZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpc1trZXkuaWRdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogY3JlYXRlQ29udGV4dEtleSBjcmVhdGVzIGEgbmV3IENvbnRleHRLZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0S2V5KGRlZmF1bHRWYWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB7IGlkOiBTeW1ib2wob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmRlc2NyaXB0aW9uKSwgZGVmYXVsdFZhbHVlIH07XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dFZhbHVlcyIsImdldCIsImtleSIsImlkIiwiZGVmYXVsdFZhbHVlIiwic2V0IiwidmFsdWUiLCJkZWxldGUiLCJjcmVhdGVDb250ZXh0S2V5Iiwib3B0aW9ucyIsIlN5bWJvbCIsImRlc2NyaXB0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/context-values.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/http-headers.js":
/*!*******************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/http-headers.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendHeaders: () => (/* binding */ appendHeaders),\n/* harmony export */   decodeBinaryHeader: () => (/* binding */ decodeBinaryHeader),\n/* harmony export */   encodeBinaryHeader: () => (/* binding */ encodeBinaryHeader)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * Encode a single binary header value according to the Connect\n * and gRPC specifications.\n *\n * This function accepts raw binary data from a buffer, a string\n * with UTF-8 text, or a protobuf message. It encodes the input\n * with unpadded base64 and returns a string that can be used for\n * a header whose name ends with `-bin`.\n */ function encodeBinaryHeader(value) {\n    let bytes;\n    if (typeof value == \"object\" && \"getType\" in value) {\n        bytes = value.toBinary();\n    } else if (typeof value == \"string\") {\n        bytes = new TextEncoder().encode(value);\n    } else {\n        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    }\n    return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.protoBase64.enc(bytes).replace(/=+$/, \"\");\n}\nfunction decodeBinaryHeader(value, type, options) {\n    try {\n        const bytes = _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.protoBase64.dec(value);\n        if (type) {\n            return type.fromBinary(bytes, options);\n        }\n        return bytes;\n    } catch (e) {\n        throw _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError.from(e, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.DataLoss);\n    }\n}\n/**\n * Merge two or more Headers objects by appending all fields from\n * all inputs to a new Headers object.\n */ function appendHeaders(...headers) {\n    const h = new Headers();\n    for (const e of headers){\n        e.forEach((value, key)=>{\n            h.append(key, value);\n        });\n    }\n    return h;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9odHRwLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2dCO0FBQ0M7QUFDakI7QUFDakM7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTRyxtQkFBbUJDLEtBQUs7SUFDcEMsSUFBSUM7SUFDSixJQUFJLE9BQU9ELFNBQVMsWUFBWSxhQUFhQSxPQUFPO1FBQ2hEQyxRQUFRRCxNQUFNRSxRQUFRO0lBQzFCLE9BQ0ssSUFBSSxPQUFPRixTQUFTLFVBQVU7UUFDL0JDLFFBQVEsSUFBSUUsY0FBY0MsTUFBTSxDQUFDSjtJQUNyQyxPQUNLO1FBQ0RDLFFBQVFELGlCQUFpQkssYUFBYUwsUUFBUSxJQUFJSyxXQUFXTDtJQUNqRTtJQUNBLE9BQU9KLDJEQUFXQSxDQUFDVSxHQUFHLENBQUNMLE9BQU9NLE9BQU8sQ0FBQyxPQUFPO0FBQ2pEO0FBQ08sU0FBU0MsbUJBQW1CUixLQUFLLEVBQUVTLElBQUksRUFBRUMsT0FBTztJQUNuRCxJQUFJO1FBQ0EsTUFBTVQsUUFBUUwsMkRBQVdBLENBQUNlLEdBQUcsQ0FBQ1g7UUFDOUIsSUFBSVMsTUFBTTtZQUNOLE9BQU9BLEtBQUtHLFVBQVUsQ0FBQ1gsT0FBT1M7UUFDbEM7UUFDQSxPQUFPVDtJQUNYLEVBQ0EsT0FBT1ksR0FBRztRQUNOLE1BQU1oQiwyREFBWUEsQ0FBQ2lCLElBQUksQ0FBQ0QsR0FBR2YsMENBQUlBLENBQUNpQixRQUFRO0lBQzVDO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyxjQUFjLEdBQUdDLE9BQU87SUFDcEMsTUFBTUMsSUFBSSxJQUFJQztJQUNkLEtBQUssTUFBTU4sS0FBS0ksUUFBUztRQUNyQkosRUFBRU8sT0FBTyxDQUFDLENBQUNwQixPQUFPcUI7WUFDZEgsRUFBRUksTUFBTSxDQUFDRCxLQUFLckI7UUFDbEI7SUFDSjtJQUNBLE9BQU9rQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9odHRwLWhlYWRlcnMuanM/ZmEyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgcHJvdG9CYXNlNjQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4vY29kZS5qc1wiO1xuLyoqXG4gKiBFbmNvZGUgYSBzaW5nbGUgYmluYXJ5IGhlYWRlciB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIENvbm5lY3RcbiAqIGFuZCBnUlBDIHNwZWNpZmljYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyByYXcgYmluYXJ5IGRhdGEgZnJvbSBhIGJ1ZmZlciwgYSBzdHJpbmdcbiAqIHdpdGggVVRGLTggdGV4dCwgb3IgYSBwcm90b2J1ZiBtZXNzYWdlLiBJdCBlbmNvZGVzIHRoZSBpbnB1dFxuICogd2l0aCB1bnBhZGRlZCBiYXNlNjQgYW5kIHJldHVybnMgYSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCBmb3JcbiAqIGEgaGVhZGVyIHdob3NlIG5hbWUgZW5kcyB3aXRoIGAtYmluYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJpbmFyeUhlYWRlcih2YWx1ZSkge1xuICAgIGxldCBieXRlcztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgXCJnZXRUeXBlXCIgaW4gdmFsdWUpIHtcbiAgICAgICAgYnl0ZXMgPSB2YWx1ZS50b0JpbmFyeSgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBieXRlcyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBieXRlcyA9IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSA/IHZhbHVlIDogbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdG9CYXNlNjQuZW5jKGJ5dGVzKS5yZXBsYWNlKC89KyQvLCBcIlwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCaW5hcnlIZWFkZXIodmFsdWUsIHR5cGUsIG9wdGlvbnMpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBieXRlcyA9IHByb3RvQmFzZTY0LmRlYyh2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IENvbm5lY3RFcnJvci5mcm9tKGUsIENvZGUuRGF0YUxvc3MpO1xuICAgIH1cbn1cbi8qKlxuICogTWVyZ2UgdHdvIG9yIG1vcmUgSGVhZGVycyBvYmplY3RzIGJ5IGFwcGVuZGluZyBhbGwgZmllbGRzIGZyb21cbiAqIGFsbCBpbnB1dHMgdG8gYSBuZXcgSGVhZGVycyBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRIZWFkZXJzKC4uLmhlYWRlcnMpIHtcbiAgICBjb25zdCBoID0gbmV3IEhlYWRlcnMoKTtcbiAgICBmb3IgKGNvbnN0IGUgb2YgaGVhZGVycykge1xuICAgICAgICBlLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGguYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGg7XG59XG4iXSwibmFtZXMiOlsicHJvdG9CYXNlNjQiLCJDb25uZWN0RXJyb3IiLCJDb2RlIiwiZW5jb2RlQmluYXJ5SGVhZGVyIiwidmFsdWUiLCJieXRlcyIsInRvQmluYXJ5IiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJVaW50OEFycmF5IiwiZW5jIiwicmVwbGFjZSIsImRlY29kZUJpbmFyeUhlYWRlciIsInR5cGUiLCJvcHRpb25zIiwiZGVjIiwiZnJvbUJpbmFyeSIsImUiLCJmcm9tIiwiRGF0YUxvc3MiLCJhcHBlbmRIZWFkZXJzIiwiaGVhZGVycyIsImgiLCJIZWFkZXJzIiwiZm9yRWFjaCIsImtleSIsImFwcGVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/http-headers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/interceptor.js":
/*!******************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/interceptor.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyInterceptors: () => (/* binding */ applyInterceptors)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps\n * it with each of the given interceptors, returning a new UnaryFn or\n * ServerStreamingFn.\n */ function applyInterceptors(next, interceptors) {\n    var _a;\n    return (_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (n, i)=>i(n), next)) !== null && _a !== void 0 ? _a : next;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9pbnRlcmNlcHRvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDOzs7O0NBSUMsR0FDTSxTQUFTQSxrQkFBa0JDLElBQUksRUFBRUMsWUFBWTtJQUNoRCxJQUFJQztJQUNKLE9BQVEsQ0FBQ0EsS0FBS0QsaUJBQWlCLFFBQVFBLGlCQUFpQixLQUFLLElBQUksS0FBSyxJQUFJQSxhQUFhRSxNQUFNLEdBQUdDLE9BQU8sR0FBR0MsTUFBTSxDQUNoSCxpRUFBaUU7SUFDakUsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRUQsSUFBSU4sS0FBSSxNQUFPLFFBQVFFLE9BQU8sS0FBSyxJQUFJQSxLQUFLRjtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vaW50ZXJjZXB0b3IuanM/ZGU1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBhcHBseUludGVyY2VwdG9ycyB0YWtlcyB0aGUgZ2l2ZW4gVW5hcnlGbiBvciBTZXJ2ZXJTdHJlYW1pbmdGbiwgYW5kIHdyYXBzXG4gKiBpdCB3aXRoIGVhY2ggb2YgdGhlIGdpdmVuIGludGVyY2VwdG9ycywgcmV0dXJuaW5nIGEgbmV3IFVuYXJ5Rm4gb3JcbiAqIFNlcnZlclN0cmVhbWluZ0ZuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlJbnRlcmNlcHRvcnMobmV4dCwgaW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gaW50ZXJjZXB0b3JzID09PSBudWxsIHx8IGludGVyY2VwdG9ycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW50ZXJjZXB0b3JzLmNvbmNhdCgpLnJldmVyc2UoKS5yZWR1Y2UoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAobiwgaSkgPT4gaShuKSwgbmV4dCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5leHQpO1xufVxuIl0sIm5hbWVzIjpbImFwcGx5SW50ZXJjZXB0b3JzIiwibmV4dCIsImludGVyY2VwdG9ycyIsIl9hIiwiY29uY2F0IiwicmV2ZXJzZSIsInJlZHVjZSIsIm4iLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/interceptor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/promise-client.js":
/*!*********************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/promise-client.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBiDiStreamingFn: () => (/* binding */ createBiDiStreamingFn),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createClientStreamingFn: () => (/* binding */ createClientStreamingFn),\n/* harmony export */   createPromiseClient: () => (/* binding */ createPromiseClient),\n/* harmony export */   createServerStreamingFn: () => (/* binding */ createServerStreamingFn),\n/* harmony export */   createUnaryFn: () => (/* binding */ createUnaryFn)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js\");\n/* harmony import */ var _any_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./any-client.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/any-client.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _protocol_async_iterable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./protocol/async-iterable.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = undefined && undefined.__asyncValues || function(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n};\nvar __await = undefined && undefined.__await || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncDelegator = undefined && undefined.__asyncDelegator || function(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n};\nvar __asyncGenerator = undefined && undefined.__asyncGenerator || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\n\n\n\n\n\n/**\n * Create a Client for the given service, invoking RPCs through the\n * given transport.\n */ function createClient(service, transport) {\n    return (0,_any_client_js__WEBPACK_IMPORTED_MODULE_0__.makeAnyClient)(service, (method)=>{\n        switch(method.kind){\n            case _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.Unary:\n                return createUnaryFn(transport, service, method);\n            case _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.ServerStreaming:\n                return createServerStreamingFn(transport, service, method);\n            case _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.ClientStreaming:\n                return createClientStreamingFn(transport, service, method);\n            case _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.BiDiStreaming:\n                return createBiDiStreamingFn(transport, service, method);\n            default:\n                return null;\n        }\n    });\n}\n/**\n * @deprecated use createClient.\n */ function createPromiseClient(service, transport) {\n    return createClient(service, transport);\n}\nfunction createUnaryFn(transport, service, method) {\n    return async function(input, options) {\n        var _a, _b;\n        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        return response.message;\n    };\n}\nfunction createServerStreamingFn(transport, service, method) {\n    return function(input, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, (0,_protocol_async_iterable_js__WEBPACK_IMPORTED_MODULE_2__.createAsyncIterable)([\n            input\n        ]), options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction createClientStreamingFn(transport, service, method) {\n    return async function(request, options) {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);\n        let singleMessage;\n        let count = 0;\n        try {\n            for(var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true){\n                _c = _h.value;\n                _f = false;\n                const message = _c;\n                singleMessage = message;\n                count++;\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        if (!singleMessage) {\n            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_3__.ConnectError(\"protocol error: missing response message\", _code_js__WEBPACK_IMPORTED_MODULE_4__.Code.Unimplemented);\n        }\n        if (count > 1) {\n            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_3__.ConnectError(\"protocol error: received extra messages for client streaming method\", _code_js__WEBPACK_IMPORTED_MODULE_4__.Code.Unimplemented);\n        }\n        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);\n        return singleMessage;\n    };\n}\nfunction createBiDiStreamingFn(transport, service, method) {\n    return function(request, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction handleStreamResponse(stream, options) {\n    const it = (function() {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, _b;\n            const response = yield __await(stream);\n            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n            yield __await((yield* __asyncDelegator(__asyncValues(response.message))));\n            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        });\n    })()[Symbol.asyncIterator]();\n    // Create a new iterable to omit throw/return.\n    return {\n        [Symbol.asyncIterator]: ()=>({\n                next: ()=>it.next()\n            })\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm9taXNlLWNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQyxJQUFJQSxnQkFBZ0IsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsYUFBYSxJQUFLLFNBQVVDLENBQUM7SUFDM0QsSUFBSSxDQUFDQyxPQUFPQyxhQUFhLEVBQUUsTUFBTSxJQUFJQyxVQUFVO0lBQy9DLElBQUlDLElBQUlKLENBQUMsQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDLEVBQUVHO0lBQ2pDLE9BQU9ELElBQUlBLEVBQUVFLElBQUksQ0FBQ04sS0FBTUEsQ0FBQUEsSUFBSSxPQUFPTyxhQUFhLGFBQWFBLFNBQVNQLEtBQUtBLENBQUMsQ0FBQ0MsT0FBT08sUUFBUSxDQUFDLElBQUlILElBQUksQ0FBQyxHQUFHSSxLQUFLLFNBQVNBLEtBQUssVUFBVUEsS0FBSyxXQUFXSixDQUFDLENBQUNKLE9BQU9DLGFBQWEsQ0FBQyxHQUFHO1FBQWMsT0FBTyxJQUFJO0lBQUUsR0FBR0csQ0FBQUE7SUFDOU0sU0FBU0ksS0FBS0MsQ0FBQztRQUFJTCxDQUFDLENBQUNLLEVBQUUsR0FBR1YsQ0FBQyxDQUFDVSxFQUFFLElBQUksU0FBVUMsQ0FBQztZQUFJLE9BQU8sSUFBSUMsUUFBUSxTQUFVQyxPQUFPLEVBQUVDLE1BQU07Z0JBQUlILElBQUlYLENBQUMsQ0FBQ1UsRUFBRSxDQUFDQyxJQUFJSSxPQUFPRixTQUFTQyxRQUFRSCxFQUFFSyxJQUFJLEVBQUVMLEVBQUVNLEtBQUs7WUFBRztRQUFJO0lBQUc7SUFDL0osU0FBU0YsT0FBT0YsT0FBTyxFQUFFQyxNQUFNLEVBQUVJLENBQUMsRUFBRVAsQ0FBQztRQUFJQyxRQUFRQyxPQUFPLENBQUNGLEdBQUdRLElBQUksQ0FBQyxTQUFTUixDQUFDO1lBQUlFLFFBQVE7Z0JBQUVJLE9BQU9OO2dCQUFHSyxNQUFNRTtZQUFFO1FBQUksR0FBR0o7SUFBUztBQUMvSDtBQUNBLElBQUlNLFVBQVUsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsT0FBTyxJQUFLLFNBQVVULENBQUM7SUFBSSxPQUFPLElBQUksWUFBWVMsVUFBVyxLQUFJLENBQUNULENBQUMsR0FBR0EsR0FBRyxJQUFJLElBQUksSUFBSVMsUUFBUVQ7QUFBSTtBQUM3SCxJQUFJVSxtQkFBbUIsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsZ0JBQWdCLElBQUssU0FBVXJCLENBQUM7SUFDakUsSUFBSUssR0FBR2lCO0lBQ1AsT0FBT2pCLElBQUksQ0FBQyxHQUFHSSxLQUFLLFNBQVNBLEtBQUssU0FBUyxTQUFVYyxDQUFDO1FBQUksTUFBTUE7SUFBRyxJQUFJZCxLQUFLLFdBQVdKLENBQUMsQ0FBQ0osT0FBT08sUUFBUSxDQUFDLEdBQUc7UUFBYyxPQUFPLElBQUk7SUFBRSxHQUFHSDtJQUMxSSxTQUFTSSxLQUFLQyxDQUFDLEVBQUVjLENBQUM7UUFBSW5CLENBQUMsQ0FBQ0ssRUFBRSxHQUFHVixDQUFDLENBQUNVLEVBQUUsR0FBRyxTQUFVQyxDQUFDO1lBQUksT0FBTyxDQUFDVyxJQUFJLENBQUNBLENBQUFBLElBQUs7Z0JBQUVMLE9BQU9HLFFBQVFwQixDQUFDLENBQUNVLEVBQUUsQ0FBQ0M7Z0JBQUtLLE1BQU07WUFBTSxJQUFJUSxJQUFJQSxFQUFFYixLQUFLQTtRQUFHLElBQUlhO0lBQUc7QUFDekk7QUFDQSxJQUFJQyxtQkFBbUIsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsZ0JBQWdCLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFNBQVM7SUFDOUYsSUFBSSxDQUFDM0IsT0FBT0MsYUFBYSxFQUFFLE1BQU0sSUFBSUMsVUFBVTtJQUMvQyxJQUFJMEIsSUFBSUQsVUFBVUUsS0FBSyxDQUFDSixTQUFTQyxjQUFjLEVBQUUsR0FBR3RCLEdBQUcwQixJQUFJLEVBQUU7SUFDN0QsT0FBTzFCLElBQUksQ0FBQyxHQUFHSSxLQUFLLFNBQVNBLEtBQUssVUFBVUEsS0FBSyxVQUFVdUIsY0FBYzNCLENBQUMsQ0FBQ0osT0FBT0MsYUFBYSxDQUFDLEdBQUc7UUFBYyxPQUFPLElBQUk7SUFBRSxHQUFHRztJQUNqSSxTQUFTMkIsWUFBWVIsQ0FBQztRQUFJLE9BQU8sU0FBVWIsQ0FBQztZQUFJLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQ0YsR0FBR1EsSUFBSSxDQUFDSyxHQUFHVjtRQUFTO0lBQUc7SUFDOUYsU0FBU0wsS0FBS0MsQ0FBQyxFQUFFYyxDQUFDO1FBQUksSUFBSUssQ0FBQyxDQUFDbkIsRUFBRSxFQUFFO1lBQUVMLENBQUMsQ0FBQ0ssRUFBRSxHQUFHLFNBQVVDLENBQUM7Z0JBQUksT0FBTyxJQUFJQyxRQUFRLFNBQVVxQixDQUFDLEVBQUVDLENBQUM7b0JBQUlILEVBQUVJLElBQUksQ0FBQzt3QkFBQ3pCO3dCQUFHQzt3QkFBR3NCO3dCQUFHQztxQkFBRSxJQUFJLEtBQUtFLE9BQU8xQixHQUFHQztnQkFBSTtZQUFJO1lBQUcsSUFBSWEsR0FBR25CLENBQUMsQ0FBQ0ssRUFBRSxHQUFHYyxFQUFFbkIsQ0FBQyxDQUFDSyxFQUFFO1FBQUc7SUFBRTtJQUN2SyxTQUFTMEIsT0FBTzFCLENBQUMsRUFBRUMsQ0FBQztRQUFJLElBQUk7WUFBRTBCLEtBQUtSLENBQUMsQ0FBQ25CLEVBQUUsQ0FBQ0M7UUFBSyxFQUFFLE9BQU9ZLEdBQUc7WUFBRVIsT0FBT2dCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFUjtRQUFJO0lBQUU7SUFDakYsU0FBU2MsS0FBS0MsQ0FBQztRQUFJQSxFQUFFckIsS0FBSyxZQUFZRyxVQUFVUixRQUFRQyxPQUFPLENBQUN5QixFQUFFckIsS0FBSyxDQUFDTixDQUFDLEVBQUVRLElBQUksQ0FBQ29CLFNBQVN6QixVQUFVQyxPQUFPZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUVPO0lBQUk7SUFDdkgsU0FBU0MsUUFBUXRCLEtBQUs7UUFBSW1CLE9BQU8sUUFBUW5CO0lBQVE7SUFDakQsU0FBU0gsT0FBT0csS0FBSztRQUFJbUIsT0FBTyxTQUFTbkI7SUFBUTtJQUNqRCxTQUFTRixPQUFPUyxDQUFDLEVBQUViLENBQUM7UUFBSSxJQUFJYSxFQUFFYixJQUFJb0IsRUFBRVMsS0FBSyxJQUFJVCxFQUFFVSxNQUFNLEVBQUVMLE9BQU9MLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFQSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFBRztBQUNyRjtBQUN5RDtBQUNUO0FBQ0U7QUFDakI7QUFDa0M7QUFDbkU7OztDQUdDLEdBQ00sU0FBU2lCLGFBQWFDLE9BQU8sRUFBRUMsU0FBUztJQUMzQyxPQUFPTiw2REFBYUEsQ0FBQ0ssU0FBUyxDQUFDRTtRQUMzQixPQUFRQSxPQUFPQyxJQUFJO1lBQ2YsS0FBS1QsMERBQVVBLENBQUNVLEtBQUs7Z0JBQ2pCLE9BQU9DLGNBQWNKLFdBQVdELFNBQVNFO1lBQzdDLEtBQUtSLDBEQUFVQSxDQUFDWSxlQUFlO2dCQUMzQixPQUFPQyx3QkFBd0JOLFdBQVdELFNBQVNFO1lBQ3ZELEtBQUtSLDBEQUFVQSxDQUFDYyxlQUFlO2dCQUMzQixPQUFPQyx3QkFBd0JSLFdBQVdELFNBQVNFO1lBQ3ZELEtBQUtSLDBEQUFVQSxDQUFDZ0IsYUFBYTtnQkFDekIsT0FBT0Msc0JBQXNCVixXQUFXRCxTQUFTRTtZQUNyRDtnQkFDSSxPQUFPO1FBQ2Y7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTVSxvQkFBb0JaLE9BQU8sRUFBRUMsU0FBUztJQUNsRCxPQUFPRixhQUFhQyxTQUFTQztBQUNqQztBQUNPLFNBQVNJLGNBQWNKLFNBQVMsRUFBRUQsT0FBTyxFQUFFRSxNQUFNO0lBQ3BELE9BQU8sZUFBZ0JXLEtBQUssRUFBRUMsT0FBTztRQUNqQyxJQUFJQyxJQUFJQztRQUNSLE1BQU1DLFdBQVcsTUFBTWhCLFVBQVVpQixLQUFLLENBQUNsQixTQUFTRSxRQUFRWSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUUssTUFBTSxFQUFFTCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUU0sU0FBUyxFQUFFTixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUU8sT0FBTyxFQUFFUixPQUFPQyxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVEsYUFBYTtRQUMvVVAsQ0FBQUEsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFTLFFBQVEsTUFBTSxRQUFRUixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUcxRCxJQUFJLENBQUN5RCxTQUFTRyxTQUFTTyxNQUFNO1FBQzlJUixDQUFBQSxLQUFLRixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsU0FBUyxNQUFNLFFBQVFULE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzNELElBQUksQ0FBQ3lELFNBQVNHLFNBQVNTLE9BQU87UUFDakosT0FBT1QsU0FBU1UsT0FBTztJQUMzQjtBQUNKO0FBQ08sU0FBU3BCLHdCQUF3Qk4sU0FBUyxFQUFFRCxPQUFPLEVBQUVFLE1BQU07SUFDOUQsT0FBTyxTQUFVVyxLQUFLLEVBQUVDLE9BQU87UUFDM0IsT0FBT2MscUJBQXFCM0IsVUFBVTRCLE1BQU0sQ0FBQzdCLFNBQVNFLFFBQVFZLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRSyxNQUFNLEVBQUVMLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTSxTQUFTLEVBQUVOLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTyxPQUFPLEVBQUV2QixnRkFBbUJBLENBQUM7WUFBQ2U7U0FBTSxHQUFHQyxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVEsYUFBYSxHQUFHUjtJQUNwWDtBQUNKO0FBQ08sU0FBU0wsd0JBQXdCUixTQUFTLEVBQUVELE9BQU8sRUFBRUUsTUFBTTtJQUM5RCxPQUFPLGVBQWdCNEIsT0FBTyxFQUFFaEIsT0FBTztRQUNuQyxJQUFJQyxJQUFJZ0IsS0FBS2YsSUFBSWdCO1FBQ2pCLElBQUlDLElBQUlDO1FBQ1IsTUFBTWpCLFdBQVcsTUFBTWhCLFVBQVU0QixNQUFNLENBQUM3QixTQUFTRSxRQUFRWSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUUssTUFBTSxFQUFFTCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUU0sU0FBUyxFQUFFTixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUU8sT0FBTyxFQUFFUyxTQUFTaEIsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFRLGFBQWE7UUFDbFZXLENBQUFBLEtBQUtuQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVMsUUFBUSxNQUFNLFFBQVFVLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzVFLElBQUksQ0FBQ3lELFNBQVNHLFNBQVNPLE1BQU07UUFDL0ksSUFBSVc7UUFDSixJQUFJQyxRQUFRO1FBQ1osSUFBSTtZQUNBLElBQUssSUFBSUMsS0FBSyxNQUFNQyxLQUFLeEYsY0FBY21FLFNBQVNVLE9BQU8sR0FBR1ksSUFBSUEsS0FBSyxNQUFNRCxHQUFHRSxJQUFJLElBQUl6QixLQUFLd0IsR0FBR3hFLElBQUksRUFBRSxDQUFDZ0QsSUFBSXNCLEtBQUssS0FBTTtnQkFDOUdMLEtBQUtPLEdBQUd2RSxLQUFLO2dCQUNicUUsS0FBSztnQkFDTCxNQUFNVixVQUFVSztnQkFDaEJHLGdCQUFnQlI7Z0JBQ2hCUztZQUNKO1FBQ0osRUFDQSxPQUFPSyxPQUFPO1lBQUVWLE1BQU07Z0JBQUVXLE9BQU9EO1lBQU07UUFBRyxTQUNoQztZQUNKLElBQUk7Z0JBQ0EsSUFBSSxDQUFDSixNQUFNLENBQUN0QixNQUFPQyxDQUFBQSxLQUFLc0IsR0FBR0ssTUFBTSxHQUFHLE1BQU0zQixHQUFHM0QsSUFBSSxDQUFDaUY7WUFDdEQsU0FDUTtnQkFBRSxJQUFJUCxLQUFLLE1BQU1BLElBQUlXLEtBQUs7WUFBRTtRQUN4QztRQUNBLElBQUksQ0FBQ1AsZUFBZTtZQUNoQixNQUFNLElBQUl2QywyREFBWUEsQ0FBQyw0Q0FBNENDLDBDQUFJQSxDQUFDK0MsYUFBYTtRQUN6RjtRQUNBLElBQUlSLFFBQVEsR0FBRztZQUNYLE1BQU0sSUFBSXhDLDJEQUFZQSxDQUFDLHVFQUF1RUMsMENBQUlBLENBQUMrQyxhQUFhO1FBQ3BIO1FBQ0NWLENBQUFBLEtBQUtwQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsU0FBUyxNQUFNLFFBQVFTLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzdFLElBQUksQ0FBQ3lELFNBQVNHLFNBQVNTLE9BQU87UUFDakosT0FBT1M7SUFDWDtBQUNKO0FBQ08sU0FBU3hCLHNCQUFzQlYsU0FBUyxFQUFFRCxPQUFPLEVBQUVFLE1BQU07SUFDNUQsT0FBTyxTQUFVNEIsT0FBTyxFQUFFaEIsT0FBTztRQUM3QixPQUFPYyxxQkFBcUIzQixVQUFVNEIsTUFBTSxDQUFDN0IsU0FBU0UsUUFBUVksWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFLLE1BQU0sRUFBRUwsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFNLFNBQVMsRUFBRU4sWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFPLE9BQU8sRUFBRVMsU0FBU2hCLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRUSxhQUFhLEdBQUdSO0lBQy9WO0FBQ0o7QUFDQSxTQUFTYyxxQkFBcUJDLE1BQU0sRUFBRWYsT0FBTztJQUN6QyxNQUFNK0IsS0FBSyxDQUFDO1FBQ1IsT0FBT3JFLGlCQUFpQixJQUFJLEVBQUVzRSxXQUFXO1lBQ3JDLElBQUkvQixJQUFJQztZQUNSLE1BQU1DLFdBQVcsTUFBTTlDLFFBQVEwRDtZQUM5QmQsQ0FBQUEsS0FBS0QsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFTLFFBQVEsTUFBTSxRQUFRUixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUcxRCxJQUFJLENBQUN5RCxTQUFTRyxTQUFTTyxNQUFNO1lBQy9JLE1BQU1yRCxRQUFRLFFBQU9DLGlCQUFpQnRCLGNBQWNtRSxTQUFTVSxPQUFPLEVBQUM7WUFDcEVYLENBQUFBLEtBQUtGLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRVyxTQUFTLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHM0QsSUFBSSxDQUFDeUQsU0FBU0csU0FBU1MsT0FBTztRQUNySjtJQUNKLElBQUksQ0FBQzFFLE9BQU9DLGFBQWEsQ0FBQztJQUMxQiw4Q0FBOEM7SUFDOUMsT0FBTztRQUNILENBQUNELE9BQU9DLGFBQWEsQ0FBQyxFQUFFLElBQU87Z0JBQzNCdUYsTUFBTSxJQUFNSyxHQUFHTCxJQUFJO1lBQ3ZCO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvbWlzZS1jbGllbnQuanM/NWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbnZhciBfX2F3YWl0ID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0KSB8fCBmdW5jdGlvbiAodikgeyByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTsgfVxudmFyIF9fYXN5bmNEZWxlZ2F0b3IgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNEZWxlZ2F0b3IpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIGksIHA7XG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufTtcbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jR2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59O1xuaW1wb3J0IHsgTWVzc2FnZSwgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IG1ha2VBbnlDbGllbnQgfSBmcm9tIFwiLi9hbnktY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4vY29kZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuL3Byb3RvY29sL2FzeW5jLWl0ZXJhYmxlLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIENsaWVudCBmb3IgdGhlIGdpdmVuIHNlcnZpY2UsIGludm9raW5nIFJQQ3MgdGhyb3VnaCB0aGVcbiAqIGdpdmVuIHRyYW5zcG9ydC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudChzZXJ2aWNlLCB0cmFuc3BvcnQpIHtcbiAgICByZXR1cm4gbWFrZUFueUNsaWVudChzZXJ2aWNlLCAobWV0aG9kKSA9PiB7XG4gICAgICAgIHN3aXRjaCAobWV0aG9kLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgTWV0aG9kS2luZC5VbmFyeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVW5hcnlGbih0cmFuc3BvcnQsIHNlcnZpY2UsIG1ldGhvZCk7XG4gICAgICAgICAgICBjYXNlIE1ldGhvZEtpbmQuU2VydmVyU3RyZWFtaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVTZXJ2ZXJTdHJlYW1pbmdGbih0cmFuc3BvcnQsIHNlcnZpY2UsIG1ldGhvZCk7XG4gICAgICAgICAgICBjYXNlIE1ldGhvZEtpbmQuQ2xpZW50U3RyZWFtaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDbGllbnRTdHJlYW1pbmdGbih0cmFuc3BvcnQsIHNlcnZpY2UsIG1ldGhvZCk7XG4gICAgICAgICAgICBjYXNlIE1ldGhvZEtpbmQuQmlEaVN0cmVhbWluZzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQmlEaVN0cmVhbWluZ0ZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGNyZWF0ZUNsaWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb21pc2VDbGllbnQoc2VydmljZSwgdHJhbnNwb3J0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNsaWVudChzZXJ2aWNlLCB0cmFuc3BvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5Rm4odHJhbnNwb3J0LCBzZXJ2aWNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNwb3J0LnVuYXJ5KHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIGlucHV0LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29udGV4dFZhbHVlcyk7XG4gICAgICAgIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbkhlYWRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob3B0aW9ucywgcmVzcG9uc2UuaGVhZGVyKTtcbiAgICAgICAgKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uVHJhaWxlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgcmVzcG9uc2UudHJhaWxlcik7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tZXNzYWdlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VydmVyU3RyZWFtaW5nRm4odHJhbnNwb3J0LCBzZXJ2aWNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJlYW1SZXNwb25zZSh0cmFuc3BvcnQuc3RyZWFtKHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIGNyZWF0ZUFzeW5jSXRlcmFibGUoW2lucHV0XSksIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb250ZXh0VmFsdWVzKSwgb3B0aW9ucyk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnRTdHJlYW1pbmdGbih0cmFuc3BvcnQsIHNlcnZpY2UsIG1ldGhvZCkge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAocmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIGVfMSwgX2IsIF9jO1xuICAgICAgICB2YXIgX2QsIF9lO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRyYW5zcG9ydC5zdHJlYW0oc2VydmljZSwgbWV0aG9kLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbmFsLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGltZW91dE1zLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycywgcmVxdWVzdCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRleHRWYWx1ZXMpO1xuICAgICAgICAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25IZWFkZXIpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKG9wdGlvbnMsIHJlc3BvbnNlLmhlYWRlcik7XG4gICAgICAgIGxldCBzaW5nbGVNZXNzYWdlO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2YgPSB0cnVlLCBfZyA9IF9fYXN5bmNWYWx1ZXMocmVzcG9uc2UubWVzc2FnZSksIF9oOyBfaCA9IGF3YWl0IF9nLm5leHQoKSwgX2EgPSBfaC5kb25lLCAhX2E7IF9mID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF9jID0gX2gudmFsdWU7XG4gICAgICAgICAgICAgICAgX2YgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gX2M7XG4gICAgICAgICAgICAgICAgc2luZ2xlTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfZiAmJiAhX2EgJiYgKF9iID0gX2cucmV0dXJuKSkgYXdhaXQgX2IuY2FsbChfZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaW5nbGVNZXNzYWdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKFwicHJvdG9jb2wgZXJyb3I6IG1pc3NpbmcgcmVzcG9uc2UgbWVzc2FnZVwiLCBDb2RlLlVuaW1wbGVtZW50ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoXCJwcm90b2NvbCBlcnJvcjogcmVjZWl2ZWQgZXh0cmEgbWVzc2FnZXMgZm9yIGNsaWVudCBzdHJlYW1pbmcgbWV0aG9kXCIsIENvZGUuVW5pbXBsZW1lbnRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgKF9lID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uVHJhaWxlcikgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwob3B0aW9ucywgcmVzcG9uc2UudHJhaWxlcik7XG4gICAgICAgIHJldHVybiBzaW5nbGVNZXNzYWdlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmlEaVN0cmVhbWluZ0ZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJlYW1SZXNwb25zZSh0cmFuc3BvcnQuc3RyZWFtKHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIHJlcXVlc3QsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb250ZXh0VmFsdWVzKSwgb3B0aW9ucyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0cmVhbVJlc3BvbnNlKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGl0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgX19hd2FpdChzdHJlYW0pO1xuICAgICAgICAgICAgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uSGVhZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCByZXNwb25zZS5oZWFkZXIpO1xuICAgICAgICAgICAgeWllbGQgX19hd2FpdCh5aWVsZCogX19hc3luY0RlbGVnYXRvcihfX2FzeW5jVmFsdWVzKHJlc3BvbnNlLm1lc3NhZ2UpKSk7XG4gICAgICAgICAgICAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25UcmFpbGVyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChvcHRpb25zLCByZXNwb25zZS50cmFpbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfSkoKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAvLyBDcmVhdGUgYSBuZXcgaXRlcmFibGUgdG8gb21pdCB0aHJvdy9yZXR1cm4uXG4gICAgcmV0dXJuIHtcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4gKHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IGl0Lm5leHQoKSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJfX2FzeW5jVmFsdWVzIiwibyIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJtIiwiaSIsImNhbGwiLCJfX3ZhbHVlcyIsIml0ZXJhdG9yIiwidmVyYiIsIm4iLCJ2IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZXR0bGUiLCJkb25lIiwidmFsdWUiLCJkIiwidGhlbiIsIl9fYXdhaXQiLCJfX2FzeW5jRGVsZWdhdG9yIiwicCIsImUiLCJmIiwiX19hc3luY0dlbmVyYXRvciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZyIsImFwcGx5IiwicSIsImF3YWl0UmV0dXJuIiwiYSIsImIiLCJwdXNoIiwicmVzdW1lIiwic3RlcCIsInIiLCJmdWxmaWxsIiwic2hpZnQiLCJsZW5ndGgiLCJNZXNzYWdlIiwiTWV0aG9kS2luZCIsIm1ha2VBbnlDbGllbnQiLCJDb25uZWN0RXJyb3IiLCJDb2RlIiwiY3JlYXRlQXN5bmNJdGVyYWJsZSIsImNyZWF0ZUNsaWVudCIsInNlcnZpY2UiLCJ0cmFuc3BvcnQiLCJtZXRob2QiLCJraW5kIiwiVW5hcnkiLCJjcmVhdGVVbmFyeUZuIiwiU2VydmVyU3RyZWFtaW5nIiwiY3JlYXRlU2VydmVyU3RyZWFtaW5nRm4iLCJDbGllbnRTdHJlYW1pbmciLCJjcmVhdGVDbGllbnRTdHJlYW1pbmdGbiIsIkJpRGlTdHJlYW1pbmciLCJjcmVhdGVCaURpU3RyZWFtaW5nRm4iLCJjcmVhdGVQcm9taXNlQ2xpZW50IiwiaW5wdXQiLCJvcHRpb25zIiwiX2EiLCJfYiIsInJlc3BvbnNlIiwidW5hcnkiLCJzaWduYWwiLCJ0aW1lb3V0TXMiLCJoZWFkZXJzIiwiY29udGV4dFZhbHVlcyIsIm9uSGVhZGVyIiwiaGVhZGVyIiwib25UcmFpbGVyIiwidHJhaWxlciIsIm1lc3NhZ2UiLCJoYW5kbGVTdHJlYW1SZXNwb25zZSIsInN0cmVhbSIsInJlcXVlc3QiLCJlXzEiLCJfYyIsIl9kIiwiX2UiLCJzaW5nbGVNZXNzYWdlIiwiY291bnQiLCJfZiIsIl9nIiwiX2giLCJuZXh0IiwiZV8xXzEiLCJlcnJvciIsInJldHVybiIsIlVuaW1wbGVtZW50ZWQiLCJpdCIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/promise-client.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeFromString: () => (/* binding */ codeFromString),\n/* harmony export */   codeToString: () => (/* binding */ codeToString)\n/* harmony export */ });\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * codeToString returns the string representation of a Code.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeToString(value) {\n    const name = _code_js__WEBPACK_IMPORTED_MODULE_0__.Code[value];\n    if (typeof name != \"string\") {\n        return value.toString();\n    }\n    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c)=>\"_\" + c.toLowerCase());\n}\nlet stringToCode;\n/**\n * codeFromString parses the string representation of a Code in snake_case.\n * For example, the string \"permission_denied\" parses into Code.PermissionDenied.\n *\n * If the given string cannot be parsed, the function returns undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeFromString(value) {\n    if (!stringToCode) {\n        stringToCode = {};\n        for (const value of Object.values(_code_js__WEBPACK_IMPORTED_MODULE_0__.Code)){\n            if (typeof value == \"string\") {\n                continue;\n            }\n            stringToCode[codeToString(value)] = value;\n        }\n    }\n    return stringToCode[value];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2NvZGUtc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNDO0FBQ2xDOzs7O0NBSUMsR0FDTSxTQUFTQyxhQUFhQyxLQUFLO0lBQzlCLE1BQU1DLE9BQU9ILDBDQUFJLENBQUNFLE1BQU07SUFDeEIsSUFBSSxPQUFPQyxRQUFRLFVBQVU7UUFDekIsT0FBT0QsTUFBTUUsUUFBUTtJQUN6QjtJQUNBLE9BQVFELElBQUksQ0FBQyxFQUFFLENBQUNFLFdBQVcsS0FDdkJGLEtBQUtHLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDQyxJQUFNLE1BQU1BLEVBQUVILFdBQVc7QUFDdEU7QUFDQSxJQUFJSTtBQUNKOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQyxlQUFlUixLQUFLO0lBQ2hDLElBQUksQ0FBQ08sY0FBYztRQUNmQSxlQUFlLENBQUM7UUFDaEIsS0FBSyxNQUFNUCxTQUFTUyxPQUFPQyxNQUFNLENBQUNaLDBDQUFJQSxFQUFHO1lBQ3JDLElBQUksT0FBT0UsU0FBUyxVQUFVO2dCQUMxQjtZQUNKO1lBQ0FPLFlBQVksQ0FBQ1IsYUFBYUMsT0FBTyxHQUFHQTtRQUN4QztJQUNKO0lBQ0EsT0FBT08sWUFBWSxDQUFDUCxNQUFNO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2NvZGUtc3RyaW5nLmpzP2I2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuLyoqXG4gKiBjb2RlVG9TdHJpbmcgcmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgQ29kZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVUb1N0cmluZyh2YWx1ZSkge1xuICAgIGNvbnN0IG5hbWUgPSBDb2RlW3ZhbHVlXTtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIChuYW1lWzBdLnRvTG93ZXJDYXNlKCkgK1xuICAgICAgICBuYW1lLnN1YnN0cmluZygxKS5yZXBsYWNlKC9bQS1aXS9nLCAoYykgPT4gXCJfXCIgKyBjLnRvTG93ZXJDYXNlKCkpKTtcbn1cbmxldCBzdHJpbmdUb0NvZGU7XG4vKipcbiAqIGNvZGVGcm9tU3RyaW5nIHBhcnNlcyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgQ29kZSBpbiBzbmFrZV9jYXNlLlxuICogRm9yIGV4YW1wbGUsIHRoZSBzdHJpbmcgXCJwZXJtaXNzaW9uX2RlbmllZFwiIHBhcnNlcyBpbnRvIENvZGUuUGVybWlzc2lvbkRlbmllZC5cbiAqXG4gKiBJZiB0aGUgZ2l2ZW4gc3RyaW5nIGNhbm5vdCBiZSBwYXJzZWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVGcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgaWYgKCFzdHJpbmdUb0NvZGUpIHtcbiAgICAgICAgc3RyaW5nVG9Db2RlID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhDb2RlKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmdUb0NvZGVbY29kZVRvU3RyaW5nKHZhbHVlKV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nVG9Db2RlW3ZhbHVlXTtcbn1cbiJdLCJuYW1lcyI6WyJDb2RlIiwiY29kZVRvU3RyaW5nIiwidmFsdWUiLCJuYW1lIiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJjIiwic3RyaW5nVG9Db2RlIiwiY29kZUZyb21TdHJpbmciLCJPYmplY3QiLCJ2YWx1ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js":
/*!************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentTypeRegExp: () => (/* binding */ contentTypeRegExp),\n/* harmony export */   contentTypeStreamJson: () => (/* binding */ contentTypeStreamJson),\n/* harmony export */   contentTypeStreamProto: () => (/* binding */ contentTypeStreamProto),\n/* harmony export */   contentTypeStreamRegExp: () => (/* binding */ contentTypeStreamRegExp),\n/* harmony export */   contentTypeUnaryJson: () => (/* binding */ contentTypeUnaryJson),\n/* harmony export */   contentTypeUnaryProto: () => (/* binding */ contentTypeUnaryProto),\n/* harmony export */   contentTypeUnaryRegExp: () => (/* binding */ contentTypeUnaryRegExp),\n/* harmony export */   parseContentType: () => (/* binding */ parseContentType),\n/* harmony export */   parseEncodingQuery: () => (/* binding */ parseEncodingQuery)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Regular Expression that matches any valid Connect Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const contentTypeRegExp = /^application\\/(connect\\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;\n/**\n * Regular Expression that matches a Connect unary Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const contentTypeUnaryRegExp = /^application\\/(?:json(?:; ?charset=utf-?8)?|proto)$/i;\n/**\n * Regular Expression that matches a Connect streaming Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const contentTypeStreamRegExp = /^application\\/connect\\+?(?:json(?:; ?charset=utf-?8)?|proto)$/i;\nconst contentTypeUnaryProto = \"application/proto\";\nconst contentTypeUnaryJson = \"application/json\";\nconst contentTypeStreamProto = \"application/connect+proto\";\nconst contentTypeStreamJson = \"application/connect+json\";\nconst encodingProto = \"proto\";\nconst encodingJson = \"json\";\n/**\n * Parse a Connect Content-Type header.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function parseContentType(contentType) {\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);\n    if (!match) {\n        return undefined;\n    }\n    const stream = !!match[1];\n    const binary = !!match[3];\n    return {\n        stream,\n        binary\n    };\n}\n/**\n * Parse a Connect Get encoding query parameter.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function parseEncodingQuery(encoding) {\n    switch(encoding){\n        case encodingProto:\n            return {\n                stream: false,\n                binary: true\n            };\n        case encodingJson:\n            return {\n                stream: false,\n                binary: false\n            };\n        default:\n            return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2NvbnRlbnQtdHlwZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakM7Ozs7Q0FJQyxHQUNNLE1BQU1BLG9CQUFvQix1RUFBdUU7QUFDeEc7Ozs7Q0FJQyxHQUNNLE1BQU1DLHlCQUF5Qix1REFBdUQ7QUFDN0Y7Ozs7Q0FJQyxHQUNNLE1BQU1DLDBCQUEwQixpRUFBaUU7QUFDakcsTUFBTUMsd0JBQXdCLG9CQUFvQjtBQUNsRCxNQUFNQyx1QkFBdUIsbUJBQW1CO0FBQ2hELE1BQU1DLHlCQUF5Qiw0QkFBNEI7QUFDM0QsTUFBTUMsd0JBQXdCLDJCQUEyQjtBQUNoRSxNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZUFBZTtBQUNyQjs7OztDQUlDLEdBQ00sU0FBU0MsaUJBQWlCQyxXQUFXO0lBQ3hDLE1BQU1DLFFBQVFELGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWUMsS0FBSyxDQUFDWDtJQUMxRixJQUFJLENBQUNXLE9BQU87UUFDUixPQUFPQztJQUNYO0lBQ0EsTUFBTUMsU0FBUyxDQUFDLENBQUNGLEtBQUssQ0FBQyxFQUFFO0lBQ3pCLE1BQU1HLFNBQVMsQ0FBQyxDQUFDSCxLQUFLLENBQUMsRUFBRTtJQUN6QixPQUFPO1FBQUVFO1FBQVFDO0lBQU87QUFDNUI7QUFDQTs7OztDQUlDLEdBQ00sU0FBU0MsbUJBQW1CQyxRQUFRO0lBQ3ZDLE9BQVFBO1FBQ0osS0FBS1Q7WUFDRCxPQUFPO2dCQUFFTSxRQUFRO2dCQUFPQyxRQUFRO1lBQUs7UUFDekMsS0FBS047WUFDRCxPQUFPO2dCQUFFSyxRQUFRO2dCQUFPQyxRQUFRO1lBQU07UUFDMUM7WUFDSSxPQUFPRjtJQUNmO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvY29udGVudC10eXBlLmpzP2E4MzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhbnkgdmFsaWQgQ29ubmVjdCBDb250ZW50LVR5cGUgaGVhZGVyIHZhbHVlLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgY29uc3QgY29udGVudFR5cGVSZWdFeHAgPSAvXmFwcGxpY2F0aW9uXFwvKGNvbm5lY3RcXCspPyg/Oihqc29uKSg/OjsgP2NoYXJzZXQ9dXRmLT84KT98KHByb3RvKSkkL2k7XG4vKipcbiAqIFJlZ3VsYXIgRXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYSBDb25uZWN0IHVuYXJ5IENvbnRlbnQtVHlwZSBoZWFkZXIgdmFsdWUuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVVuYXJ5UmVnRXhwID0gL15hcHBsaWNhdGlvblxcLyg/Ompzb24oPzo7ID9jaGFyc2V0PXV0Zi0/OCk/fHByb3RvKSQvaTtcbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIENvbm5lY3Qgc3RyZWFtaW5nIENvbnRlbnQtVHlwZSBoZWFkZXIgdmFsdWUuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVN0cmVhbVJlZ0V4cCA9IC9eYXBwbGljYXRpb25cXC9jb25uZWN0XFwrPyg/Ompzb24oPzo7ID9jaGFyc2V0PXV0Zi0/OCk/fHByb3RvKSQvaTtcbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVVuYXJ5UHJvdG8gPSBcImFwcGxpY2F0aW9uL3Byb3RvXCI7XG5leHBvcnQgY29uc3QgY29udGVudFR5cGVVbmFyeUpzb24gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVN0cmVhbVByb3RvID0gXCJhcHBsaWNhdGlvbi9jb25uZWN0K3Byb3RvXCI7XG5leHBvcnQgY29uc3QgY29udGVudFR5cGVTdHJlYW1Kc29uID0gXCJhcHBsaWNhdGlvbi9jb25uZWN0K2pzb25cIjtcbmNvbnN0IGVuY29kaW5nUHJvdG8gPSBcInByb3RvXCI7XG5jb25zdCBlbmNvZGluZ0pzb24gPSBcImpzb25cIjtcbi8qKlxuICogUGFyc2UgYSBDb25uZWN0IENvbnRlbnQtVHlwZSBoZWFkZXIuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbnRlbnRUeXBlKGNvbnRlbnRUeXBlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjb250ZW50VHlwZSA9PT0gbnVsbCB8fCBjb250ZW50VHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGVudFR5cGUubWF0Y2goY29udGVudFR5cGVSZWdFeHApO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3Qgc3RyZWFtID0gISFtYXRjaFsxXTtcbiAgICBjb25zdCBiaW5hcnkgPSAhIW1hdGNoWzNdO1xuICAgIHJldHVybiB7IHN0cmVhbSwgYmluYXJ5IH07XG59XG4vKipcbiAqIFBhcnNlIGEgQ29ubmVjdCBHZXQgZW5jb2RpbmcgcXVlcnkgcGFyYW1ldGVyLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFbmNvZGluZ1F1ZXJ5KGVuY29kaW5nKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgICBjYXNlIGVuY29kaW5nUHJvdG86XG4gICAgICAgICAgICByZXR1cm4geyBzdHJlYW06IGZhbHNlLCBiaW5hcnk6IHRydWUgfTtcbiAgICAgICAgY2FzZSBlbmNvZGluZ0pzb246XG4gICAgICAgICAgICByZXR1cm4geyBzdHJlYW06IGZhbHNlLCBiaW5hcnk6IGZhbHNlIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJjb250ZW50VHlwZVJlZ0V4cCIsImNvbnRlbnRUeXBlVW5hcnlSZWdFeHAiLCJjb250ZW50VHlwZVN0cmVhbVJlZ0V4cCIsImNvbnRlbnRUeXBlVW5hcnlQcm90byIsImNvbnRlbnRUeXBlVW5hcnlKc29uIiwiY29udGVudFR5cGVTdHJlYW1Qcm90byIsImNvbnRlbnRUeXBlU3RyZWFtSnNvbiIsImVuY29kaW5nUHJvdG8iLCJlbmNvZGluZ0pzb24iLCJwYXJzZUNvbnRlbnRUeXBlIiwiY29udGVudFR5cGUiLCJtYXRjaCIsInVuZGVmaW5lZCIsInN0cmVhbSIsImJpbmFyeSIsInBhcnNlRW5jb2RpbmdRdWVyeSIsImVuY29kaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/end-stream.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/end-stream.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEndStreamSerialization: () => (/* binding */ createEndStreamSerialization),\n/* harmony export */   endStreamFlag: () => (/* binding */ endStreamFlag),\n/* harmony export */   endStreamFromJson: () => (/* binding */ endStreamFromJson),\n/* harmony export */   endStreamToJson: () => (/* binding */ endStreamToJson)\n/* harmony export */ });\n/* harmony import */ var _error_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error-json.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/error-json.js\");\n/* harmony import */ var _http_headers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../http-headers.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/http-headers.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n/**\n * endStreamFlag indicates that the data in a EnvelopedMessage\n * is a EndStreamResponse of the Connect protocol.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const endStreamFlag = 2;\n/**\n * Parse an EndStreamResponse of the Connect protocol.\n * Throws a ConnectError on malformed input.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function endStreamFromJson(data) {\n    const parseErr = new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"invalid end stream\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Unknown);\n    let jsonValue;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        jsonValue = JSON.parse(typeof data == \"string\" ? data : new TextDecoder().decode(data));\n    } catch (e) {\n        throw parseErr;\n    }\n    if (typeof jsonValue != \"object\" || jsonValue == null || Array.isArray(jsonValue)) {\n        throw parseErr;\n    }\n    const metadata = new Headers();\n    if (\"metadata\" in jsonValue) {\n        if (typeof jsonValue.metadata != \"object\" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {\n            throw parseErr;\n        }\n        for (const [key, values] of Object.entries(jsonValue.metadata)){\n            if (!Array.isArray(values) || values.some((value)=>typeof value != \"string\")) {\n                throw parseErr;\n            }\n            for (const value of values){\n                metadata.append(key, value);\n            }\n        }\n    }\n    const error = \"error\" in jsonValue && jsonValue.error != null ? (0,_error_json_js__WEBPACK_IMPORTED_MODULE_2__.errorFromJson)(jsonValue.error, metadata, parseErr) : undefined;\n    return {\n        metadata,\n        error\n    };\n}\n/**\n * Serialize the given EndStreamResponse to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation of error details if the detail uses\n * google.protobuf.Any.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */ function endStreamToJson(metadata, error, jsonWriteOptions) {\n    const es = {};\n    if (error !== undefined) {\n        es.error = (0,_error_json_js__WEBPACK_IMPORTED_MODULE_2__.errorToJson)(error, jsonWriteOptions);\n        metadata = (0,_http_headers_js__WEBPACK_IMPORTED_MODULE_3__.appendHeaders)(metadata, error.metadata);\n    }\n    let hasMetadata = false;\n    const md = {};\n    metadata.forEach((value, key)=>{\n        hasMetadata = true;\n        md[key] = [\n            value\n        ];\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (hasMetadata) {\n        es.metadata = md;\n    }\n    return es;\n}\n/**\n * Create a Serialization object that serializes a Connect EndStreamResponse.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createEndStreamSerialization(options) {\n    const textEncoder = new TextEncoder();\n    return {\n        serialize (data) {\n            try {\n                const jsonObject = endStreamToJson(data.metadata, data.error, options);\n                const jsonString = JSON.stringify(jsonObject);\n                return textEncoder.encode(jsonString);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`failed to serialize EndStreamResponse: ${m}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Internal);\n            }\n        },\n        parse (data) {\n            try {\n                return endStreamFromJson(data);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`failed to parse EndStreamResponse: ${m}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.InvalidArgument);\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2VuZC1zdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDNEI7QUFDVjtBQUNBO0FBQ2pCO0FBQ2xDOzs7OztDQUtDLEdBQ00sTUFBTUssZ0JBQWdCLEVBQVc7QUFDeEM7Ozs7O0NBS0MsR0FDTSxTQUFTQyxrQkFBa0JDLElBQUk7SUFDbEMsTUFBTUMsV0FBVyxJQUFJTCwyREFBWUEsQ0FBQyxzQkFBc0JDLDBDQUFJQSxDQUFDSyxPQUFPO0lBQ3BFLElBQUlDO0lBQ0osSUFBSTtRQUNBLG1FQUFtRTtRQUNuRUEsWUFBWUMsS0FBS0MsS0FBSyxDQUFDLE9BQU9MLFFBQVEsV0FBV0EsT0FBTyxJQUFJTSxjQUFjQyxNQUFNLENBQUNQO0lBQ3JGLEVBQ0EsT0FBT1EsR0FBRztRQUNOLE1BQU1QO0lBQ1Y7SUFDQSxJQUFJLE9BQU9FLGFBQWEsWUFDcEJBLGFBQWEsUUFDYk0sTUFBTUMsT0FBTyxDQUFDUCxZQUFZO1FBQzFCLE1BQU1GO0lBQ1Y7SUFDQSxNQUFNVSxXQUFXLElBQUlDO0lBQ3JCLElBQUksY0FBY1QsV0FBVztRQUN6QixJQUFJLE9BQU9BLFVBQVVRLFFBQVEsSUFBSSxZQUM3QlIsVUFBVVEsUUFBUSxJQUFJLFFBQ3RCRixNQUFNQyxPQUFPLENBQUNQLFVBQVVRLFFBQVEsR0FBRztZQUNuQyxNQUFNVjtRQUNWO1FBQ0EsS0FBSyxNQUFNLENBQUNZLEtBQUtDLE9BQU8sSUFBSUMsT0FBT0MsT0FBTyxDQUFDYixVQUFVUSxRQUFRLEVBQUc7WUFDNUQsSUFBSSxDQUFDRixNQUFNQyxPQUFPLENBQUNJLFdBQ2ZBLE9BQU9HLElBQUksQ0FBQyxDQUFDQyxRQUFVLE9BQU9BLFNBQVMsV0FBVztnQkFDbEQsTUFBTWpCO1lBQ1Y7WUFDQSxLQUFLLE1BQU1pQixTQUFTSixPQUFRO2dCQUN4QkgsU0FBU1EsTUFBTSxDQUFDTixLQUFLSztZQUN6QjtRQUNKO0lBQ0o7SUFDQSxNQUFNRSxRQUFRLFdBQVdqQixhQUFhQSxVQUFVaUIsS0FBSyxJQUFJLE9BQ25EM0IsNkRBQWFBLENBQUNVLFVBQVVpQixLQUFLLEVBQUVULFVBQVVWLFlBQ3pDb0I7SUFDTixPQUFPO1FBQUVWO1FBQVVTO0lBQU07QUFDN0I7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0UsZ0JBQWdCWCxRQUFRLEVBQUVTLEtBQUssRUFBRUcsZ0JBQWdCO0lBQzdELE1BQU1DLEtBQUssQ0FBQztJQUNaLElBQUlKLFVBQVVDLFdBQVc7UUFDckJHLEdBQUdKLEtBQUssR0FBRzFCLDJEQUFXQSxDQUFDMEIsT0FBT0c7UUFDOUJaLFdBQVdoQiwrREFBYUEsQ0FBQ2dCLFVBQVVTLE1BQU1ULFFBQVE7SUFDckQ7SUFDQSxJQUFJYyxjQUFjO0lBQ2xCLE1BQU1DLEtBQUssQ0FBQztJQUNaZixTQUFTZ0IsT0FBTyxDQUFDLENBQUNULE9BQU9MO1FBQ3JCWSxjQUFjO1FBQ2RDLEVBQUUsQ0FBQ2IsSUFBSSxHQUFHO1lBQUNLO1NBQU07SUFDckI7SUFDQSx1RUFBdUU7SUFDdkUsSUFBSU8sYUFBYTtRQUNiRCxHQUFHYixRQUFRLEdBQUdlO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTSSw2QkFBNkJDLE9BQU87SUFDaEQsTUFBTUMsY0FBYyxJQUFJQztJQUN4QixPQUFPO1FBQ0hDLFdBQVVoQyxJQUFJO1lBQ1YsSUFBSTtnQkFDQSxNQUFNaUMsYUFBYVgsZ0JBQWdCdEIsS0FBS1csUUFBUSxFQUFFWCxLQUFLb0IsS0FBSyxFQUFFUztnQkFDOUQsTUFBTUssYUFBYTlCLEtBQUsrQixTQUFTLENBQUNGO2dCQUNsQyxPQUFPSCxZQUFZTSxNQUFNLENBQUNGO1lBQzlCLEVBQ0EsT0FBTzFCLEdBQUc7Z0JBQ04sTUFBTTZCLElBQUk3QixhQUFhOEIsUUFBUTlCLEVBQUUrQixPQUFPLEdBQUdDLE9BQU9oQztnQkFDbEQsTUFBTSxJQUFJWiwyREFBWUEsQ0FBQyxDQUFDLHVDQUF1QyxFQUFFeUMsRUFBRSxDQUFDLEVBQUV4QywwQ0FBSUEsQ0FBQzRDLFFBQVE7WUFDdkY7UUFDSjtRQUNBcEMsT0FBTUwsSUFBSTtZQUNOLElBQUk7Z0JBQ0EsT0FBT0Qsa0JBQWtCQztZQUM3QixFQUNBLE9BQU9RLEdBQUc7Z0JBQ04sTUFBTTZCLElBQUk3QixhQUFhOEIsUUFBUTlCLEVBQUUrQixPQUFPLEdBQUdDLE9BQU9oQztnQkFDbEQsTUFBTSxJQUFJWiwyREFBWUEsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFeUMsRUFBRSxDQUFDLEVBQUV4QywwQ0FBSUEsQ0FBQzZDLGVBQWU7WUFDMUY7UUFDSjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvZW5kLXN0cmVhbS5qcz8xYWZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBlcnJvckZyb21Kc29uLCBlcnJvclRvSnNvbiB9IGZyb20gXCIuL2Vycm9yLWpzb24uanNcIjtcbmltcG9ydCB7IGFwcGVuZEhlYWRlcnMgfSBmcm9tIFwiLi4vaHR0cC1oZWFkZXJzLmpzXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuLi9jb2RlLmpzXCI7XG4vKipcbiAqIGVuZFN0cmVhbUZsYWcgaW5kaWNhdGVzIHRoYXQgdGhlIGRhdGEgaW4gYSBFbnZlbG9wZWRNZXNzYWdlXG4gKiBpcyBhIEVuZFN0cmVhbVJlc3BvbnNlIG9mIHRoZSBDb25uZWN0IHByb3RvY29sLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgY29uc3QgZW5kU3RyZWFtRmxhZyA9IDBiMDAwMDAwMTA7XG4vKipcbiAqIFBhcnNlIGFuIEVuZFN0cmVhbVJlc3BvbnNlIG9mIHRoZSBDb25uZWN0IHByb3RvY29sLlxuICogVGhyb3dzIGEgQ29ubmVjdEVycm9yIG9uIG1hbGZvcm1lZCBpbnB1dC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZFN0cmVhbUZyb21Kc29uKGRhdGEpIHtcbiAgICBjb25zdCBwYXJzZUVyciA9IG5ldyBDb25uZWN0RXJyb3IoXCJpbnZhbGlkIGVuZCBzdHJlYW1cIiwgQ29kZS5Vbmtub3duKTtcbiAgICBsZXQganNvblZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAganNvblZhbHVlID0gSlNPTi5wYXJzZSh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiID8gZGF0YSA6IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXRhKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IHBhcnNlRXJyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGpzb25WYWx1ZSAhPSBcIm9iamVjdFwiIHx8XG4gICAgICAgIGpzb25WYWx1ZSA9PSBudWxsIHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoanNvblZhbHVlKSkge1xuICAgICAgICB0aHJvdyBwYXJzZUVycjtcbiAgICB9XG4gICAgY29uc3QgbWV0YWRhdGEgPSBuZXcgSGVhZGVycygpO1xuICAgIGlmIChcIm1ldGFkYXRhXCIgaW4ganNvblZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvblZhbHVlLm1ldGFkYXRhICE9IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgIGpzb25WYWx1ZS5tZXRhZGF0YSA9PSBudWxsIHx8XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGpzb25WYWx1ZS5tZXRhZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IHBhcnNlRXJyO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiBPYmplY3QuZW50cmllcyhqc29uVmFsdWUubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSB8fFxuICAgICAgICAgICAgICAgIHZhbHVlcy5zb21lKCh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgcGFyc2VFcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IFwiZXJyb3JcIiBpbiBqc29uVmFsdWUgJiYganNvblZhbHVlLmVycm9yICE9IG51bGxcbiAgICAgICAgPyBlcnJvckZyb21Kc29uKGpzb25WYWx1ZS5lcnJvciwgbWV0YWRhdGEsIHBhcnNlRXJyKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyBtZXRhZGF0YSwgZXJyb3IgfTtcbn1cbi8qKlxuICogU2VyaWFsaXplIHRoZSBnaXZlbiBFbmRTdHJlYW1SZXNwb25zZSB0byBKU09OLlxuICpcbiAqIFRoZSBKU09OIHNlcmlhbGl6YXRpb24gb3B0aW9ucyBhcmUgcmVxdWlyZWQgdG8gcHJvZHVjZSB0aGUgb3B0aW9uYWxcbiAqIGh1bWFuLXJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGVycm9yIGRldGFpbHMgaWYgdGhlIGRldGFpbCB1c2VzXG4gKiBnb29nbGUucHJvdG9idWYuQW55LlxuICpcbiAqIFNlZSBodHRwczovL2Nvbm5lY3RycGMuY29tL2RvY3MvcHJvdG9jb2wjZXJyb3ItZW5kLXN0cmVhbVxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5kU3RyZWFtVG9Kc29uKG1ldGFkYXRhLCBlcnJvciwganNvbldyaXRlT3B0aW9ucykge1xuICAgIGNvbnN0IGVzID0ge307XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXMuZXJyb3IgPSBlcnJvclRvSnNvbihlcnJvciwganNvbldyaXRlT3B0aW9ucyk7XG4gICAgICAgIG1ldGFkYXRhID0gYXBwZW5kSGVhZGVycyhtZXRhZGF0YSwgZXJyb3IubWV0YWRhdGEpO1xuICAgIH1cbiAgICBsZXQgaGFzTWV0YWRhdGEgPSBmYWxzZTtcbiAgICBjb25zdCBtZCA9IHt9O1xuICAgIG1ldGFkYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaGFzTWV0YWRhdGEgPSB0cnVlO1xuICAgICAgICBtZFtrZXldID0gW3ZhbHVlXTtcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgIGlmIChoYXNNZXRhZGF0YSkge1xuICAgICAgICBlcy5tZXRhZGF0YSA9IG1kO1xuICAgIH1cbiAgICByZXR1cm4gZXM7XG59XG4vKipcbiAqIENyZWF0ZSBhIFNlcmlhbGl6YXRpb24gb2JqZWN0IHRoYXQgc2VyaWFsaXplcyBhIENvbm5lY3QgRW5kU3RyZWFtUmVzcG9uc2UuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbmRTdHJlYW1TZXJpYWxpemF0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCB0ZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlcmlhbGl6ZShkYXRhKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb25PYmplY3QgPSBlbmRTdHJlYW1Ub0pzb24oZGF0YS5tZXRhZGF0YSwgZGF0YS5lcnJvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmplY3QpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0RW5jb2Rlci5lbmNvZGUoanNvblN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgZmFpbGVkIHRvIHNlcmlhbGl6ZSBFbmRTdHJlYW1SZXNwb25zZTogJHttfWAsIENvZGUuSW50ZXJuYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwYXJzZShkYXRhKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmRTdHJlYW1Gcm9tSnNvbihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFN0cmluZyhlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGBmYWlsZWQgdG8gcGFyc2UgRW5kU3RyZWFtUmVzcG9uc2U6ICR7bX1gLCBDb2RlLkludmFsaWRBcmd1bWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJlcnJvckZyb21Kc29uIiwiZXJyb3JUb0pzb24iLCJhcHBlbmRIZWFkZXJzIiwiQ29ubmVjdEVycm9yIiwiQ29kZSIsImVuZFN0cmVhbUZsYWciLCJlbmRTdHJlYW1Gcm9tSnNvbiIsImRhdGEiLCJwYXJzZUVyciIsIlVua25vd24iLCJqc29uVmFsdWUiLCJKU09OIiwicGFyc2UiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImUiLCJBcnJheSIsImlzQXJyYXkiLCJtZXRhZGF0YSIsIkhlYWRlcnMiLCJrZXkiLCJ2YWx1ZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwic29tZSIsInZhbHVlIiwiYXBwZW5kIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJlbmRTdHJlYW1Ub0pzb24iLCJqc29uV3JpdGVPcHRpb25zIiwiZXMiLCJoYXNNZXRhZGF0YSIsIm1kIiwiZm9yRWFjaCIsImNyZWF0ZUVuZFN0cmVhbVNlcmlhbGl6YXRpb24iLCJvcHRpb25zIiwidGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsInNlcmlhbGl6ZSIsImpzb25PYmplY3QiLCJqc29uU3RyaW5nIiwic3RyaW5naWZ5IiwiZW5jb2RlIiwibSIsIkVycm9yIiwibWVzc2FnZSIsIlN0cmluZyIsIkludGVybmFsIiwiSW52YWxpZEFyZ3VtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/end-stream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/error-json.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/error-json.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorFromJson: () => (/* binding */ errorFromJson),\n/* harmony export */   errorFromJsonBytes: () => (/* binding */ errorFromJsonBytes),\n/* harmony export */   errorToJson: () => (/* binding */ errorToJson),\n/* harmony export */   errorToJsonBytes: () => (/* binding */ errorToJsonBytes)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code-string.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __rest = undefined && undefined.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\n\n\n\n\n/**\n * Parse a Connect error from a JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function errorFromJson(jsonValue, metadata, fallback) {\n    var _a;\n    if (metadata) {\n        new Headers(metadata).forEach((value, key)=>fallback.metadata.append(key, value));\n    }\n    if (typeof jsonValue !== \"object\" || jsonValue == null || Array.isArray(jsonValue)) {\n        throw fallback;\n    }\n    let code = fallback.code;\n    if (\"code\" in jsonValue && typeof jsonValue.code === \"string\") {\n        code = (_a = (0,_code_string_js__WEBPACK_IMPORTED_MODULE_0__.codeFromString)(jsonValue.code)) !== null && _a !== void 0 ? _a : code;\n    }\n    const message = jsonValue.message;\n    if (message != null && typeof message !== \"string\") {\n        throw fallback;\n    }\n    const error = new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(message !== null && message !== void 0 ? message : \"\", code, metadata);\n    if (\"details\" in jsonValue && Array.isArray(jsonValue.details)) {\n        for (const detail of jsonValue.details){\n            if (detail === null || typeof detail != \"object\" || Array.isArray(detail) || typeof detail.type != \"string\" || typeof detail.value != \"string\") {\n                throw fallback;\n            }\n            try {\n                error.details.push({\n                    type: detail.type,\n                    value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoBase64.dec(detail.value),\n                    debug: detail.debug\n                });\n            } catch (e) {\n                throw fallback;\n            }\n        }\n    }\n    return error;\n}\n/**\n * Parse a Connect error from a serialized JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function errorFromJsonBytes(bytes, metadata, fallback) {\n    let jsonValue;\n    try {\n        jsonValue = JSON.parse(new TextDecoder().decode(bytes));\n    } catch (e) {\n        throw fallback;\n    }\n    return errorFromJson(jsonValue, metadata, fallback);\n}\n/**\n * Serialize the given error to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation in the \"debug\" key if the detail uses\n * google.protobuf.Any. If serialization of the \"debug\" value fails, it\n * is silently disregarded.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */ function errorToJson(error, jsonWriteOptions) {\n    const o = {\n        code: (0,_code_string_js__WEBPACK_IMPORTED_MODULE_0__.codeToString)(error.code)\n    };\n    if (error.rawMessage.length > 0) {\n        o.message = error.rawMessage;\n    }\n    if (error.details.length > 0) {\n        o.details = error.details.map((value)=>{\n            if (\"getType\" in value) {\n                const i = {\n                    type: value.getType().typeName,\n                    value: value.toBinary()\n                };\n                try {\n                    i.debug = value.toJson(jsonWriteOptions);\n                } catch (e) {\n                // We deliberately ignore errors that may occur when serializing\n                // a message to JSON (the message contains an Any).\n                // The rationale is that we are only trying to provide optional\n                // debug information.\n                }\n                return i;\n            }\n            return value;\n        }).map((_a)=>{\n            var { value } = _a, rest = __rest(_a, [\n                \"value\"\n            ]);\n            return Object.assign(Object.assign({}, rest), {\n                value: _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_2__.protoBase64.enc(value).replace(/=+$/, \"\")\n            });\n        });\n    }\n    return o;\n}\n/**\n * Serialize the given error to JSON. This calls errorToJson(), but stringifies\n * the result, and converts it into a UInt8Array.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function errorToJsonBytes(error, jsonWriteOptions) {\n    const textEncoder = new TextEncoder();\n    try {\n        const jsonObject = errorToJson(error, jsonWriteOptions);\n        const jsonString = JSON.stringify(jsonObject);\n        return textEncoder.encode(jsonString);\n    } catch (e) {\n        const m = e instanceof Error ? e.message : String(e);\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`failed to serialize Connect Error: ${m}`, _code_js__WEBPACK_IMPORTED_MODULE_3__.Code.Internal);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/error-json.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/get-request.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/get-request.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformConnectPostToGetRequest: () => (/* binding */ transformConnectPostToGetRequest)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./headers.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\nconst contentTypePrefix = \"application/\";\nfunction encodeMessageForUrl(message, useBase64) {\n    if (useBase64) {\n        // TODO(jchadwick-buf): Three regex replaces seems excessive.\n        // Can we make protoBase64.enc more flexible?\n        return _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_0__.protoBase64.enc(message).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n    } else {\n        return encodeURIComponent(new TextDecoder().decode(message));\n    }\n}\n/**\n * @private Internal code, does not follow semantic versioning.\n */ function transformConnectPostToGetRequest(request, message, useBase64) {\n    let query = `?connect=v${_version_js__WEBPACK_IMPORTED_MODULE_1__.protocolVersion}`;\n    const contentType = request.header.get(_headers_js__WEBPACK_IMPORTED_MODULE_2__.headerContentType);\n    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {\n        query += \"&encoding=\" + encodeURIComponent(contentType.slice(contentTypePrefix.length));\n    }\n    const compression = request.header.get(_headers_js__WEBPACK_IMPORTED_MODULE_2__.headerUnaryEncoding);\n    if (compression !== null && compression !== \"identity\") {\n        query += \"&compression=\" + encodeURIComponent(compression);\n        // Force base64 for compressed payloads.\n        useBase64 = true;\n    }\n    if (useBase64) {\n        query += \"&base64=1\";\n    }\n    query += \"&message=\" + encodeMessageForUrl(message, useBase64);\n    const url = request.url + query;\n    // Omit headers that are not used for unary GET requests.\n    const header = new Headers(request.header);\n    [\n        _headers_js__WEBPACK_IMPORTED_MODULE_2__.headerProtocolVersion,\n        _headers_js__WEBPACK_IMPORTED_MODULE_2__.headerContentType,\n        _headers_js__WEBPACK_IMPORTED_MODULE_2__.headerUnaryContentLength,\n        _headers_js__WEBPACK_IMPORTED_MODULE_2__.headerUnaryEncoding,\n        _headers_js__WEBPACK_IMPORTED_MODULE_2__.headerUnaryAcceptEncoding\n    ].forEach((h)=>header.delete(h));\n    return Object.assign(Object.assign({}, request), {\n        init: Object.assign(Object.assign({}, request.init), {\n            method: \"GET\"\n        }),\n        url,\n        header\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2dldC1yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDeUI7QUFDeUY7QUFDcEc7QUFDL0MsTUFBTVEsb0JBQW9CO0FBQzFCLFNBQVNDLG9CQUFvQkMsT0FBTyxFQUFFQyxTQUFTO0lBQzNDLElBQUlBLFdBQVc7UUFDWCw2REFBNkQ7UUFDN0QsNkNBQTZDO1FBQzdDLE9BQU9WLDJEQUFXQSxDQUNiVyxHQUFHLENBQUNGLFNBQ0pHLE9BQU8sQ0FBQyxPQUFPLEtBQ2ZBLE9BQU8sQ0FBQyxPQUFPLEtBQ2ZBLE9BQU8sQ0FBQyxPQUFPO0lBQ3hCLE9BQ0s7UUFDRCxPQUFPQyxtQkFBbUIsSUFBSUMsY0FBY0MsTUFBTSxDQUFDTjtJQUN2RDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTTyxpQ0FBaUNDLE9BQU8sRUFBRVIsT0FBTyxFQUFFQyxTQUFTO0lBQ3hFLElBQUlRLFFBQVEsQ0FBQyxVQUFVLEVBQUVaLHdEQUFlQSxDQUFDLENBQUM7SUFDMUMsTUFBTWEsY0FBY0YsUUFBUUcsTUFBTSxDQUFDQyxHQUFHLENBQUNwQiwwREFBaUJBO0lBQ3hELElBQUksQ0FBQ2tCLGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWUcsT0FBTyxDQUFDZixrQkFBaUIsTUFBTyxHQUFHO1FBQzFHVyxTQUNJLGVBQ0lMLG1CQUFtQk0sWUFBWUksS0FBSyxDQUFDaEIsa0JBQWtCaUIsTUFBTTtJQUN6RTtJQUNBLE1BQU1DLGNBQWNSLFFBQVFHLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDaEIsNERBQW1CQTtJQUMxRCxJQUFJb0IsZ0JBQWdCLFFBQVFBLGdCQUFnQixZQUFZO1FBQ3BEUCxTQUFTLGtCQUFrQkwsbUJBQW1CWTtRQUM5Qyx3Q0FBd0M7UUFDeENmLFlBQVk7SUFDaEI7SUFDQSxJQUFJQSxXQUFXO1FBQ1hRLFNBQVM7SUFDYjtJQUNBQSxTQUFTLGNBQWNWLG9CQUFvQkMsU0FBU0M7SUFDcEQsTUFBTWdCLE1BQU1ULFFBQVFTLEdBQUcsR0FBR1I7SUFDMUIseURBQXlEO0lBQ3pELE1BQU1FLFNBQVMsSUFBSU8sUUFBUVYsUUFBUUcsTUFBTTtJQUN6QztRQUNJbEIsOERBQXFCQTtRQUNyQkQsMERBQWlCQTtRQUNqQkcsaUVBQXdCQTtRQUN4QkMsNERBQW1CQTtRQUNuQkYsa0VBQXlCQTtLQUM1QixDQUFDeUIsT0FBTyxDQUFDLENBQUNDLElBQU1ULE9BQU9VLE1BQU0sQ0FBQ0Q7SUFDL0IsT0FBT0UsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHZixVQUFVO1FBQUVnQixNQUFNRixPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdmLFFBQVFnQixJQUFJLEdBQUc7WUFBRUMsUUFBUTtRQUFNO1FBQUlSO1FBQ3hITjtJQUFPO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvZ2V0LXJlcXVlc3QuanM/YTFiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTWVzc2FnZSwgcHJvdG9CYXNlNjQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQgeyBoZWFkZXJDb250ZW50VHlwZSwgaGVhZGVyUHJvdG9jb2xWZXJzaW9uLCBoZWFkZXJVbmFyeUFjY2VwdEVuY29kaW5nLCBoZWFkZXJVbmFyeUNvbnRlbnRMZW5ndGgsIGhlYWRlclVuYXJ5RW5jb2RpbmcsIH0gZnJvbSBcIi4vaGVhZGVycy5qc1wiO1xuaW1wb3J0IHsgcHJvdG9jb2xWZXJzaW9uIH0gZnJvbSBcIi4vdmVyc2lvbi5qc1wiO1xuY29uc3QgY29udGVudFR5cGVQcmVmaXggPSBcImFwcGxpY2F0aW9uL1wiO1xuZnVuY3Rpb24gZW5jb2RlTWVzc2FnZUZvclVybChtZXNzYWdlLCB1c2VCYXNlNjQpIHtcbiAgICBpZiAodXNlQmFzZTY0KSB7XG4gICAgICAgIC8vIFRPRE8oamNoYWR3aWNrLWJ1Zik6IFRocmVlIHJlZ2V4IHJlcGxhY2VzIHNlZW1zIGV4Y2Vzc2l2ZS5cbiAgICAgICAgLy8gQ2FuIHdlIG1ha2UgcHJvdG9CYXNlNjQuZW5jIG1vcmUgZmxleGlibGU/XG4gICAgICAgIHJldHVybiBwcm90b0Jhc2U2NFxuICAgICAgICAgICAgLmVuYyhtZXNzYWdlKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKy9nLCBcIi1cIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvPSskLywgXCJcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShtZXNzYWdlKSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUNvbm5lY3RQb3N0VG9HZXRSZXF1ZXN0KHJlcXVlc3QsIG1lc3NhZ2UsIHVzZUJhc2U2NCkge1xuICAgIGxldCBxdWVyeSA9IGA/Y29ubmVjdD12JHtwcm90b2NvbFZlcnNpb259YDtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcXVlc3QuaGVhZGVyLmdldChoZWFkZXJDb250ZW50VHlwZSk7XG4gICAgaWYgKChjb250ZW50VHlwZSA9PT0gbnVsbCB8fCBjb250ZW50VHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGVudFR5cGUuaW5kZXhPZihjb250ZW50VHlwZVByZWZpeCkpID09PSAwKSB7XG4gICAgICAgIHF1ZXJ5ICs9XG4gICAgICAgICAgICBcIiZlbmNvZGluZz1cIiArXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnRUeXBlLnNsaWNlKGNvbnRlbnRUeXBlUHJlZml4Lmxlbmd0aCkpO1xuICAgIH1cbiAgICBjb25zdCBjb21wcmVzc2lvbiA9IHJlcXVlc3QuaGVhZGVyLmdldChoZWFkZXJVbmFyeUVuY29kaW5nKTtcbiAgICBpZiAoY29tcHJlc3Npb24gIT09IG51bGwgJiYgY29tcHJlc3Npb24gIT09IFwiaWRlbnRpdHlcIikge1xuICAgICAgICBxdWVyeSArPSBcIiZjb21wcmVzc2lvbj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChjb21wcmVzc2lvbik7XG4gICAgICAgIC8vIEZvcmNlIGJhc2U2NCBmb3IgY29tcHJlc3NlZCBwYXlsb2Fkcy5cbiAgICAgICAgdXNlQmFzZTY0ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHVzZUJhc2U2NCkge1xuICAgICAgICBxdWVyeSArPSBcIiZiYXNlNjQ9MVwiO1xuICAgIH1cbiAgICBxdWVyeSArPSBcIiZtZXNzYWdlPVwiICsgZW5jb2RlTWVzc2FnZUZvclVybChtZXNzYWdlLCB1c2VCYXNlNjQpO1xuICAgIGNvbnN0IHVybCA9IHJlcXVlc3QudXJsICsgcXVlcnk7XG4gICAgLy8gT21pdCBoZWFkZXJzIHRoYXQgYXJlIG5vdCB1c2VkIGZvciB1bmFyeSBHRVQgcmVxdWVzdHMuXG4gICAgY29uc3QgaGVhZGVyID0gbmV3IEhlYWRlcnMocmVxdWVzdC5oZWFkZXIpO1xuICAgIFtcbiAgICAgICAgaGVhZGVyUHJvdG9jb2xWZXJzaW9uLFxuICAgICAgICBoZWFkZXJDb250ZW50VHlwZSxcbiAgICAgICAgaGVhZGVyVW5hcnlDb250ZW50TGVuZ3RoLFxuICAgICAgICBoZWFkZXJVbmFyeUVuY29kaW5nLFxuICAgICAgICBoZWFkZXJVbmFyeUFjY2VwdEVuY29kaW5nLFxuICAgIF0uZm9yRWFjaCgoaCkgPT4gaGVhZGVyLmRlbGV0ZShoKSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdCksIHsgaW5pdDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0LmluaXQpLCB7IG1ldGhvZDogXCJHRVRcIiB9KSwgdXJsLFxuICAgICAgICBoZWFkZXIgfSk7XG59XG4iXSwibmFtZXMiOlsiTWVzc2FnZSIsInByb3RvQmFzZTY0IiwiaGVhZGVyQ29udGVudFR5cGUiLCJoZWFkZXJQcm90b2NvbFZlcnNpb24iLCJoZWFkZXJVbmFyeUFjY2VwdEVuY29kaW5nIiwiaGVhZGVyVW5hcnlDb250ZW50TGVuZ3RoIiwiaGVhZGVyVW5hcnlFbmNvZGluZyIsInByb3RvY29sVmVyc2lvbiIsImNvbnRlbnRUeXBlUHJlZml4IiwiZW5jb2RlTWVzc2FnZUZvclVybCIsIm1lc3NhZ2UiLCJ1c2VCYXNlNjQiLCJlbmMiLCJyZXBsYWNlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJ0cmFuc2Zvcm1Db25uZWN0UG9zdFRvR2V0UmVxdWVzdCIsInJlcXVlc3QiLCJxdWVyeSIsImNvbnRlbnRUeXBlIiwiaGVhZGVyIiwiZ2V0IiwiaW5kZXhPZiIsInNsaWNlIiwibGVuZ3RoIiwiY29tcHJlc3Npb24iLCJ1cmwiLCJIZWFkZXJzIiwiZm9yRWFjaCIsImgiLCJkZWxldGUiLCJPYmplY3QiLCJhc3NpZ24iLCJpbml0IiwibWV0aG9kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/get-request.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerContentType: () => (/* binding */ headerContentType),\n/* harmony export */   headerProtocolVersion: () => (/* binding */ headerProtocolVersion),\n/* harmony export */   headerStreamAcceptEncoding: () => (/* binding */ headerStreamAcceptEncoding),\n/* harmony export */   headerStreamEncoding: () => (/* binding */ headerStreamEncoding),\n/* harmony export */   headerTimeout: () => (/* binding */ headerTimeout),\n/* harmony export */   headerUnaryAcceptEncoding: () => (/* binding */ headerUnaryAcceptEncoding),\n/* harmony export */   headerUnaryContentLength: () => (/* binding */ headerUnaryContentLength),\n/* harmony export */   headerUnaryEncoding: () => (/* binding */ headerUnaryEncoding),\n/* harmony export */   headerUserAgent: () => (/* binding */ headerUserAgent)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */ const headerContentType = \"Content-Type\";\nconst headerUnaryContentLength = \"Content-Length\";\nconst headerUnaryEncoding = \"Content-Encoding\";\nconst headerStreamEncoding = \"Connect-Content-Encoding\";\nconst headerUnaryAcceptEncoding = \"Accept-Encoding\";\nconst headerStreamAcceptEncoding = \"Connect-Accept-Encoding\";\nconst headerTimeout = \"Connect-Timeout-Ms\";\nconst headerProtocolVersion = \"Connect-Protocol-Version\";\nconst headerUserAgent = \"User-Agent\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDOztDQUVDLEdBQ00sTUFBTUEsb0JBQW9CLGVBQWU7QUFDekMsTUFBTUMsMkJBQTJCLGlCQUFpQjtBQUNsRCxNQUFNQyxzQkFBc0IsbUJBQW1CO0FBQy9DLE1BQU1DLHVCQUF1QiwyQkFBMkI7QUFDeEQsTUFBTUMsNEJBQTRCLGtCQUFrQjtBQUNwRCxNQUFNQyw2QkFBNkIsMEJBQTBCO0FBQzdELE1BQU1DLGdCQUFnQixxQkFBcUI7QUFDM0MsTUFBTUMsd0JBQXdCLDJCQUEyQjtBQUN6RCxNQUFNQyxrQkFBa0IsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9oZWFkZXJzLmpzP2RjOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBoZWFkZXJDb250ZW50VHlwZSA9IFwiQ29udGVudC1UeXBlXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVW5hcnlDb250ZW50TGVuZ3RoID0gXCJDb250ZW50LUxlbmd0aFwiO1xuZXhwb3J0IGNvbnN0IGhlYWRlclVuYXJ5RW5jb2RpbmcgPSBcIkNvbnRlbnQtRW5jb2RpbmdcIjtcbmV4cG9ydCBjb25zdCBoZWFkZXJTdHJlYW1FbmNvZGluZyA9IFwiQ29ubmVjdC1Db250ZW50LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVW5hcnlBY2NlcHRFbmNvZGluZyA9IFwiQWNjZXB0LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyU3RyZWFtQWNjZXB0RW5jb2RpbmcgPSBcIkNvbm5lY3QtQWNjZXB0LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVGltZW91dCA9IFwiQ29ubmVjdC1UaW1lb3V0LU1zXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyUHJvdG9jb2xWZXJzaW9uID0gXCJDb25uZWN0LVByb3RvY29sLVZlcnNpb25cIjtcbmV4cG9ydCBjb25zdCBoZWFkZXJVc2VyQWdlbnQgPSBcIlVzZXItQWdlbnRcIjtcbiJdLCJuYW1lcyI6WyJoZWFkZXJDb250ZW50VHlwZSIsImhlYWRlclVuYXJ5Q29udGVudExlbmd0aCIsImhlYWRlclVuYXJ5RW5jb2RpbmciLCJoZWFkZXJTdHJlYW1FbmNvZGluZyIsImhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmciLCJoZWFkZXJTdHJlYW1BY2NlcHRFbmNvZGluZyIsImhlYWRlclRpbWVvdXQiLCJoZWFkZXJQcm90b2NvbFZlcnNpb24iLCJoZWFkZXJVc2VyQWdlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/http-status.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/http-status.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeFromHttpStatus: () => (/* binding */ codeFromHttpStatus),\n/* harmony export */   codeToHttpStatus: () => (/* binding */ codeToHttpStatus)\n/* harmony export */ });\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Determine the Connect error code for the given HTTP status code.\n * See https://connectrpc.com/docs/protocol/#http-to-error-code\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeFromHttpStatus(httpStatus) {\n    switch(httpStatus){\n        case 400:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Internal;\n        case 401:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unauthenticated;\n        case 403:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.PermissionDenied;\n        case 404:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unimplemented;\n        case 429:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unavailable;\n        case 502:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unavailable;\n        case 503:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unavailable;\n        case 504:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unavailable;\n        default:\n            return _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unknown;\n    }\n}\n/**\n * Returns a HTTP status code for the given Connect code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */ function codeToHttpStatus(code) {\n    switch(code){\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Canceled:\n            return 499; // Client Closed Request\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unknown:\n            return 500; // Internal Server Error\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.InvalidArgument:\n            return 400; // Bad Request\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.DeadlineExceeded:\n            return 504; // Gateway Timeout\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.NotFound:\n            return 404; // Not Found\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.AlreadyExists:\n            return 409; // Conflict\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.PermissionDenied:\n            return 403; // Forbidden\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.ResourceExhausted:\n            return 429; // Too Many Requests\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.FailedPrecondition:\n            return 400; // Bad Request\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Aborted:\n            return 409; // Conflict\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.OutOfRange:\n            return 400; // Bad Request\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unimplemented:\n            return 501; // Not Implemented\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Internal:\n            return 500; // Internal Server Error\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unavailable:\n            return 503; // Service Unavailable\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.DataLoss:\n            return 500; // Internal Server Error\n        case _code_js__WEBPACK_IMPORTED_MODULE_0__.Code.Unauthenticated:\n            return 401; // Unauthorized\n        default:\n            return 500; // same as CodeUnknown\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2h0dHAtc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNDO0FBQ2xDOzs7OztDQUtDLEdBQ00sU0FBU0MsbUJBQW1CQyxVQUFVO0lBQ3pDLE9BQVFBO1FBQ0osS0FBSztZQUNELE9BQU9GLDBDQUFJQSxDQUFDRyxRQUFRO1FBQ3hCLEtBQUs7WUFDRCxPQUFPSCwwQ0FBSUEsQ0FBQ0ksZUFBZTtRQUMvQixLQUFLO1lBQ0QsT0FBT0osMENBQUlBLENBQUNLLGdCQUFnQjtRQUNoQyxLQUFLO1lBQ0QsT0FBT0wsMENBQUlBLENBQUNNLGFBQWE7UUFDN0IsS0FBSztZQUNELE9BQU9OLDBDQUFJQSxDQUFDTyxXQUFXO1FBQzNCLEtBQUs7WUFDRCxPQUFPUCwwQ0FBSUEsQ0FBQ08sV0FBVztRQUMzQixLQUFLO1lBQ0QsT0FBT1AsMENBQUlBLENBQUNPLFdBQVc7UUFDM0IsS0FBSztZQUNELE9BQU9QLDBDQUFJQSxDQUFDTyxXQUFXO1FBQzNCO1lBQ0ksT0FBT1AsMENBQUlBLENBQUNRLE9BQU87SUFDM0I7QUFDSjtBQUNBOzs7OztDQUtDLEdBQ00sU0FBU0MsaUJBQWlCQyxJQUFJO0lBQ2pDLE9BQVFBO1FBQ0osS0FBS1YsMENBQUlBLENBQUNXLFFBQVE7WUFDZCxPQUFPLEtBQUssd0JBQXdCO1FBQ3hDLEtBQUtYLDBDQUFJQSxDQUFDUSxPQUFPO1lBQ2IsT0FBTyxLQUFLLHdCQUF3QjtRQUN4QyxLQUFLUiwwQ0FBSUEsQ0FBQ1ksZUFBZTtZQUNyQixPQUFPLEtBQUssY0FBYztRQUM5QixLQUFLWiwwQ0FBSUEsQ0FBQ2EsZ0JBQWdCO1lBQ3RCLE9BQU8sS0FBSyxrQkFBa0I7UUFDbEMsS0FBS2IsMENBQUlBLENBQUNjLFFBQVE7WUFDZCxPQUFPLEtBQUssWUFBWTtRQUM1QixLQUFLZCwwQ0FBSUEsQ0FBQ2UsYUFBYTtZQUNuQixPQUFPLEtBQUssV0FBVztRQUMzQixLQUFLZiwwQ0FBSUEsQ0FBQ0ssZ0JBQWdCO1lBQ3RCLE9BQU8sS0FBSyxZQUFZO1FBQzVCLEtBQUtMLDBDQUFJQSxDQUFDZ0IsaUJBQWlCO1lBQ3ZCLE9BQU8sS0FBSyxvQkFBb0I7UUFDcEMsS0FBS2hCLDBDQUFJQSxDQUFDaUIsa0JBQWtCO1lBQ3hCLE9BQU8sS0FBSyxjQUFjO1FBQzlCLEtBQUtqQiwwQ0FBSUEsQ0FBQ2tCLE9BQU87WUFDYixPQUFPLEtBQUssV0FBVztRQUMzQixLQUFLbEIsMENBQUlBLENBQUNtQixVQUFVO1lBQ2hCLE9BQU8sS0FBSyxjQUFjO1FBQzlCLEtBQUtuQiwwQ0FBSUEsQ0FBQ00sYUFBYTtZQUNuQixPQUFPLEtBQUssa0JBQWtCO1FBQ2xDLEtBQUtOLDBDQUFJQSxDQUFDRyxRQUFRO1lBQ2QsT0FBTyxLQUFLLHdCQUF3QjtRQUN4QyxLQUFLSCwwQ0FBSUEsQ0FBQ08sV0FBVztZQUNqQixPQUFPLEtBQUssc0JBQXNCO1FBQ3RDLEtBQUtQLDBDQUFJQSxDQUFDb0IsUUFBUTtZQUNkLE9BQU8sS0FBSyx3QkFBd0I7UUFDeEMsS0FBS3BCLDBDQUFJQSxDQUFDSSxlQUFlO1lBQ3JCLE9BQU8sS0FBSyxlQUFlO1FBQy9CO1lBQ0ksT0FBTyxLQUFLLHNCQUFzQjtJQUMxQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2h0dHAtc3RhdHVzLmpzPzVmNzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIENvbm5lY3QgZXJyb3IgY29kZSBmb3IgdGhlIGdpdmVuIEhUVFAgc3RhdHVzIGNvZGUuXG4gKiBTZWUgaHR0cHM6Ly9jb25uZWN0cnBjLmNvbS9kb2NzL3Byb3RvY29sLyNodHRwLXRvLWVycm9yLWNvZGVcbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVGcm9tSHR0cFN0YXR1cyhodHRwU3RhdHVzKSB7XG4gICAgc3dpdGNoIChodHRwU3RhdHVzKSB7XG4gICAgICAgIGNhc2UgNDAwOiAvLyBCYWQgUmVxdWVzdFxuICAgICAgICAgICAgcmV0dXJuIENvZGUuSW50ZXJuYWw7XG4gICAgICAgIGNhc2UgNDAxOiAvLyBVbmF1dGhvcml6ZWRcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVuYXV0aGVudGljYXRlZDtcbiAgICAgICAgY2FzZSA0MDM6IC8vIEZvcmJpZGRlblxuICAgICAgICAgICAgcmV0dXJuIENvZGUuUGVybWlzc2lvbkRlbmllZDtcbiAgICAgICAgY2FzZSA0MDQ6IC8vIE5vdCBGb3VuZFxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVW5pbXBsZW1lbnRlZDtcbiAgICAgICAgY2FzZSA0Mjk6IC8vIFRvbyBNYW55IFJlcXVlc3RzXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VbmF2YWlsYWJsZTtcbiAgICAgICAgY2FzZSA1MDI6IC8vIEJhZCBHYXRld2F5XG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VbmF2YWlsYWJsZTtcbiAgICAgICAgY2FzZSA1MDM6IC8vIFNlcnZpY2UgVW5hdmFpbGFibGVcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVuYXZhaWxhYmxlO1xuICAgICAgICBjYXNlIDUwNDogLy8gR2F0ZXdheSBUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VbmF2YWlsYWJsZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVua25vd247XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgSFRUUCBzdGF0dXMgY29kZSBmb3IgdGhlIGdpdmVuIENvbm5lY3QgY29kZS5cbiAqIFNlZSBodHRwczovL2Nvbm5lY3RycGMuY29tL2RvY3MvcHJvdG9jb2wjZXJyb3ItY29kZXNcbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVUb0h0dHBTdGF0dXMoY29kZSkge1xuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIENvZGUuQ2FuY2VsZWQ6XG4gICAgICAgICAgICByZXR1cm4gNDk5OyAvLyBDbGllbnQgQ2xvc2VkIFJlcXVlc3RcbiAgICAgICAgY2FzZSBDb2RlLlVua25vd246XG4gICAgICAgICAgICByZXR1cm4gNTAwOyAvLyBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcbiAgICAgICAgY2FzZSBDb2RlLkludmFsaWRBcmd1bWVudDpcbiAgICAgICAgICAgIHJldHVybiA0MDA7IC8vIEJhZCBSZXF1ZXN0XG4gICAgICAgIGNhc2UgQ29kZS5EZWFkbGluZUV4Y2VlZGVkOlxuICAgICAgICAgICAgcmV0dXJuIDUwNDsgLy8gR2F0ZXdheSBUaW1lb3V0XG4gICAgICAgIGNhc2UgQ29kZS5Ob3RGb3VuZDpcbiAgICAgICAgICAgIHJldHVybiA0MDQ7IC8vIE5vdCBGb3VuZFxuICAgICAgICBjYXNlIENvZGUuQWxyZWFkeUV4aXN0czpcbiAgICAgICAgICAgIHJldHVybiA0MDk7IC8vIENvbmZsaWN0XG4gICAgICAgIGNhc2UgQ29kZS5QZXJtaXNzaW9uRGVuaWVkOlxuICAgICAgICAgICAgcmV0dXJuIDQwMzsgLy8gRm9yYmlkZGVuXG4gICAgICAgIGNhc2UgQ29kZS5SZXNvdXJjZUV4aGF1c3RlZDpcbiAgICAgICAgICAgIHJldHVybiA0Mjk7IC8vIFRvbyBNYW55IFJlcXVlc3RzXG4gICAgICAgIGNhc2UgQ29kZS5GYWlsZWRQcmVjb25kaXRpb246XG4gICAgICAgICAgICByZXR1cm4gNDAwOyAvLyBCYWQgUmVxdWVzdFxuICAgICAgICBjYXNlIENvZGUuQWJvcnRlZDpcbiAgICAgICAgICAgIHJldHVybiA0MDk7IC8vIENvbmZsaWN0XG4gICAgICAgIGNhc2UgQ29kZS5PdXRPZlJhbmdlOlxuICAgICAgICAgICAgcmV0dXJuIDQwMDsgLy8gQmFkIFJlcXVlc3RcbiAgICAgICAgY2FzZSBDb2RlLlVuaW1wbGVtZW50ZWQ6XG4gICAgICAgICAgICByZXR1cm4gNTAxOyAvLyBOb3QgSW1wbGVtZW50ZWRcbiAgICAgICAgY2FzZSBDb2RlLkludGVybmFsOlxuICAgICAgICAgICAgcmV0dXJuIDUwMDsgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgICAgIGNhc2UgQ29kZS5VbmF2YWlsYWJsZTpcbiAgICAgICAgICAgIHJldHVybiA1MDM7IC8vIFNlcnZpY2UgVW5hdmFpbGFibGVcbiAgICAgICAgY2FzZSBDb2RlLkRhdGFMb3NzOlxuICAgICAgICAgICAgcmV0dXJuIDUwMDsgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgICAgIGNhc2UgQ29kZS5VbmF1dGhlbnRpY2F0ZWQ6XG4gICAgICAgICAgICByZXR1cm4gNDAxOyAvLyBVbmF1dGhvcml6ZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiA1MDA7IC8vIHNhbWUgYXMgQ29kZVVua25vd25cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ29kZSIsImNvZGVGcm9tSHR0cFN0YXR1cyIsImh0dHBTdGF0dXMiLCJJbnRlcm5hbCIsIlVuYXV0aGVudGljYXRlZCIsIlBlcm1pc3Npb25EZW5pZWQiLCJVbmltcGxlbWVudGVkIiwiVW5hdmFpbGFibGUiLCJVbmtub3duIiwiY29kZVRvSHR0cFN0YXR1cyIsImNvZGUiLCJDYW5jZWxlZCIsIkludmFsaWRBcmd1bWVudCIsIkRlYWRsaW5lRXhjZWVkZWQiLCJOb3RGb3VuZCIsIkFscmVhZHlFeGlzdHMiLCJSZXNvdXJjZUV4aGF1c3RlZCIsIkZhaWxlZFByZWNvbmRpdGlvbiIsIkFib3J0ZWQiLCJPdXRPZlJhbmdlIiwiRGF0YUxvc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/http-status.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/query-params.js":
/*!************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/query-params.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paramBase64: () => (/* binding */ paramBase64),\n/* harmony export */   paramCompression: () => (/* binding */ paramCompression),\n/* harmony export */   paramConnectVersion: () => (/* binding */ paramConnectVersion),\n/* harmony export */   paramEncoding: () => (/* binding */ paramEncoding),\n/* harmony export */   paramMessage: () => (/* binding */ paramMessage)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */ const paramConnectVersion = \"connect\";\nconst paramEncoding = \"encoding\";\nconst paramCompression = \"compression\";\nconst paramBase64 = \"base64\";\nconst paramMessage = \"message\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3F1ZXJ5LXBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQzs7Q0FFQyxHQUNNLE1BQU1BLHNCQUFzQixVQUFVO0FBQ3RDLE1BQU1DLGdCQUFnQixXQUFXO0FBQ2pDLE1BQU1DLG1CQUFtQixjQUFjO0FBQ3ZDLE1BQU1DLGNBQWMsU0FBUztBQUM3QixNQUFNQyxlQUFlLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvcXVlcnktcGFyYW1zLmpzPzFhNWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJhbUNvbm5lY3RWZXJzaW9uID0gXCJjb25uZWN0XCI7XG5leHBvcnQgY29uc3QgcGFyYW1FbmNvZGluZyA9IFwiZW5jb2RpbmdcIjtcbmV4cG9ydCBjb25zdCBwYXJhbUNvbXByZXNzaW9uID0gXCJjb21wcmVzc2lvblwiO1xuZXhwb3J0IGNvbnN0IHBhcmFtQmFzZTY0ID0gXCJiYXNlNjRcIjtcbmV4cG9ydCBjb25zdCBwYXJhbU1lc3NhZ2UgPSBcIm1lc3NhZ2VcIjtcbiJdLCJuYW1lcyI6WyJwYXJhbUNvbm5lY3RWZXJzaW9uIiwicGFyYW1FbmNvZGluZyIsInBhcmFtQ29tcHJlc3Npb24iLCJwYXJhbUJhc2U2NCIsInBhcmFtTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/query-params.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/request-header.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/request-header.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestHeader: () => (/* binding */ requestHeader),\n/* harmony export */   requestHeaderWithCompression: () => (/* binding */ requestHeaderWithCompression)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./version.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js\");\n/* harmony import */ var _content_type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./content-type.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n/**\n * Creates headers for a Connect request.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent) {\n    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});\n    if (timeoutMs !== undefined) {\n        result.set(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerTimeout, `${timeoutMs}`);\n    }\n    result.set(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerContentType, methodKind == _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.Unary ? useBinaryFormat ? _content_type_js__WEBPACK_IMPORTED_MODULE_2__.contentTypeUnaryProto : _content_type_js__WEBPACK_IMPORTED_MODULE_2__.contentTypeUnaryJson : useBinaryFormat ? _content_type_js__WEBPACK_IMPORTED_MODULE_2__.contentTypeStreamProto : _content_type_js__WEBPACK_IMPORTED_MODULE_2__.contentTypeStreamJson);\n    result.set(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerProtocolVersion, _version_js__WEBPACK_IMPORTED_MODULE_3__.protocolVersion);\n    if (setUserAgent && !result.has(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerUserAgent)) {\n        result.set(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerUserAgent, \"connect-es/1.7.0\");\n    }\n    return result;\n}\n/**\n * Creates headers for a Connect request with compression.\n *\n * Note that we always set the Content-Encoding header for unary methods.\n * It is up to the caller to decide whether to apply compression - and remove\n * the header if compression is not used, for example because the payload is\n * too small to make compression effective.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function requestHeaderWithCompression(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression, setUserAgent) {\n    const result = requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent);\n    if (sendCompression != null) {\n        const name = methodKind == _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.Unary ? _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerUnaryEncoding : _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerStreamEncoding;\n        result.set(name, sendCompression.name);\n    }\n    if (acceptCompression.length > 0) {\n        const name = methodKind == _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_1__.MethodKind.Unary ? _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerUnaryAcceptEncoding : _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerStreamAcceptEncoding;\n        result.set(name, acceptCompression.map((c)=>c.name).join(\",\"));\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3JlcXVlc3QtaGVhZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNlO0FBQzJKO0FBQzVKO0FBQ2lGO0FBQ2hJOzs7O0NBSUMsR0FDTSxTQUFTYyxjQUFjQyxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsU0FBUyxFQUFFQyxtQkFBbUIsRUFBRUMsWUFBWTtJQUNuRyxNQUFNQyxTQUFTLElBQUlDLFFBQVFILHdCQUF3QixRQUFRQSx3QkFBd0IsS0FBSyxJQUFJQSxzQkFBc0IsQ0FBQztJQUNuSCxJQUFJRCxjQUFjSyxXQUFXO1FBQ3pCRixPQUFPRyxHQUFHLENBQUNqQixzREFBYUEsRUFBRSxDQUFDLEVBQUVXLFVBQVUsQ0FBQztJQUM1QztJQUNBRyxPQUFPRyxHQUFHLENBQUN0QiwwREFBaUJBLEVBQUVjLGNBQWNmLDBEQUFVQSxDQUFDd0IsS0FBSyxHQUN0RFIsa0JBQ0lILG1FQUFxQkEsR0FDckJELGtFQUFvQkEsR0FDeEJJLGtCQUNJTCxvRUFBc0JBLEdBQ3RCRCxtRUFBcUJBO0lBQy9CVSxPQUFPRyxHQUFHLENBQUNoQiw4REFBcUJBLEVBQUVFLHdEQUFlQTtJQUNqRCxJQUFJVSxnQkFBZ0IsQ0FBQ0MsT0FBT0ssR0FBRyxDQUFDakIsd0RBQWVBLEdBQUc7UUFDOUNZLE9BQU9HLEdBQUcsQ0FBQ2Ysd0RBQWVBLEVBQUU7SUFDaEM7SUFDQSxPQUFPWTtBQUNYO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU00sNkJBQTZCWCxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsU0FBUyxFQUFFQyxtQkFBbUIsRUFBRVMsaUJBQWlCLEVBQUVDLGVBQWUsRUFBRVQsWUFBWTtJQUN0SixNQUFNQyxTQUFTTixjQUFjQyxZQUFZQyxpQkFBaUJDLFdBQVdDLHFCQUFxQkM7SUFDMUYsSUFBSVMsbUJBQW1CLE1BQU07UUFDekIsTUFBTUMsT0FBT2QsY0FBY2YsMERBQVVBLENBQUN3QixLQUFLLEdBQ3JDbkIsNERBQW1CQSxHQUNuQkYsNkRBQW9CQTtRQUMxQmlCLE9BQU9HLEdBQUcsQ0FBQ00sTUFBTUQsZ0JBQWdCQyxJQUFJO0lBQ3pDO0lBQ0EsSUFBSUYsa0JBQWtCRyxNQUFNLEdBQUcsR0FBRztRQUM5QixNQUFNRCxPQUFPZCxjQUFjZiwwREFBVUEsQ0FBQ3dCLEtBQUssR0FDckNwQixrRUFBeUJBLEdBQ3pCRixtRUFBMEJBO1FBQ2hDa0IsT0FBT0csR0FBRyxDQUFDTSxNQUFNRixrQkFBa0JJLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFSCxJQUFJLEVBQUVJLElBQUksQ0FBQztJQUMvRDtJQUNBLE9BQU9iO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvcmVxdWVzdC1oZWFkZXIuanM/ZWMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IGhlYWRlckNvbnRlbnRUeXBlLCBoZWFkZXJTdHJlYW1BY2NlcHRFbmNvZGluZywgaGVhZGVyU3RyZWFtRW5jb2RpbmcsIGhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmcsIGhlYWRlclVuYXJ5RW5jb2RpbmcsIGhlYWRlclRpbWVvdXQsIGhlYWRlclByb3RvY29sVmVyc2lvbiwgaGVhZGVyVXNlckFnZW50LCB9IGZyb20gXCIuL2hlYWRlcnMuanNcIjtcbmltcG9ydCB7IHByb3RvY29sVmVyc2lvbiB9IGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbmltcG9ydCB7IGNvbnRlbnRUeXBlU3RyZWFtSnNvbiwgY29udGVudFR5cGVTdHJlYW1Qcm90bywgY29udGVudFR5cGVVbmFyeUpzb24sIGNvbnRlbnRUeXBlVW5hcnlQcm90bywgfSBmcm9tIFwiLi9jb250ZW50LXR5cGUuanNcIjtcbi8qKlxuICogQ3JlYXRlcyBoZWFkZXJzIGZvciBhIENvbm5lY3QgcmVxdWVzdC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RIZWFkZXIobWV0aG9kS2luZCwgdXNlQmluYXJ5Rm9ybWF0LCB0aW1lb3V0TXMsIHVzZXJQcm92aWRlZEhlYWRlcnMsIHNldFVzZXJBZ2VudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBIZWFkZXJzKHVzZXJQcm92aWRlZEhlYWRlcnMgIT09IG51bGwgJiYgdXNlclByb3ZpZGVkSGVhZGVycyAhPT0gdm9pZCAwID8gdXNlclByb3ZpZGVkSGVhZGVycyA6IHt9KTtcbiAgICBpZiAodGltZW91dE1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnNldChoZWFkZXJUaW1lb3V0LCBgJHt0aW1lb3V0TXN9YCk7XG4gICAgfVxuICAgIHJlc3VsdC5zZXQoaGVhZGVyQ29udGVudFR5cGUsIG1ldGhvZEtpbmQgPT0gTWV0aG9kS2luZC5VbmFyeVxuICAgICAgICA/IHVzZUJpbmFyeUZvcm1hdFxuICAgICAgICAgICAgPyBjb250ZW50VHlwZVVuYXJ5UHJvdG9cbiAgICAgICAgICAgIDogY29udGVudFR5cGVVbmFyeUpzb25cbiAgICAgICAgOiB1c2VCaW5hcnlGb3JtYXRcbiAgICAgICAgICAgID8gY29udGVudFR5cGVTdHJlYW1Qcm90b1xuICAgICAgICAgICAgOiBjb250ZW50VHlwZVN0cmVhbUpzb24pO1xuICAgIHJlc3VsdC5zZXQoaGVhZGVyUHJvdG9jb2xWZXJzaW9uLCBwcm90b2NvbFZlcnNpb24pO1xuICAgIGlmIChzZXRVc2VyQWdlbnQgJiYgIXJlc3VsdC5oYXMoaGVhZGVyVXNlckFnZW50KSkge1xuICAgICAgICByZXN1bHQuc2V0KGhlYWRlclVzZXJBZ2VudCwgXCJjb25uZWN0LWVzLzEuNy4wXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGhlYWRlcnMgZm9yIGEgQ29ubmVjdCByZXF1ZXN0IHdpdGggY29tcHJlc3Npb24uXG4gKlxuICogTm90ZSB0aGF0IHdlIGFsd2F5cyBzZXQgdGhlIENvbnRlbnQtRW5jb2RpbmcgaGVhZGVyIGZvciB1bmFyeSBtZXRob2RzLlxuICogSXQgaXMgdXAgdG8gdGhlIGNhbGxlciB0byBkZWNpZGUgd2hldGhlciB0byBhcHBseSBjb21wcmVzc2lvbiAtIGFuZCByZW1vdmVcbiAqIHRoZSBoZWFkZXIgaWYgY29tcHJlc3Npb24gaXMgbm90IHVzZWQsIGZvciBleGFtcGxlIGJlY2F1c2UgdGhlIHBheWxvYWQgaXNcbiAqIHRvbyBzbWFsbCB0byBtYWtlIGNvbXByZXNzaW9uIGVmZmVjdGl2ZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RIZWFkZXJXaXRoQ29tcHJlc3Npb24obWV0aG9kS2luZCwgdXNlQmluYXJ5Rm9ybWF0LCB0aW1lb3V0TXMsIHVzZXJQcm92aWRlZEhlYWRlcnMsIGFjY2VwdENvbXByZXNzaW9uLCBzZW5kQ29tcHJlc3Npb24sIHNldFVzZXJBZ2VudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHJlcXVlc3RIZWFkZXIobWV0aG9kS2luZCwgdXNlQmluYXJ5Rm9ybWF0LCB0aW1lb3V0TXMsIHVzZXJQcm92aWRlZEhlYWRlcnMsIHNldFVzZXJBZ2VudCk7XG4gICAgaWYgKHNlbmRDb21wcmVzc2lvbiAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBtZXRob2RLaW5kID09IE1ldGhvZEtpbmQuVW5hcnlcbiAgICAgICAgICAgID8gaGVhZGVyVW5hcnlFbmNvZGluZ1xuICAgICAgICAgICAgOiBoZWFkZXJTdHJlYW1FbmNvZGluZztcbiAgICAgICAgcmVzdWx0LnNldChuYW1lLCBzZW5kQ29tcHJlc3Npb24ubmFtZSk7XG4gICAgfVxuICAgIGlmIChhY2NlcHRDb21wcmVzc2lvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBtZXRob2RLaW5kID09IE1ldGhvZEtpbmQuVW5hcnlcbiAgICAgICAgICAgID8gaGVhZGVyVW5hcnlBY2NlcHRFbmNvZGluZ1xuICAgICAgICAgICAgOiBoZWFkZXJTdHJlYW1BY2NlcHRFbmNvZGluZztcbiAgICAgICAgcmVzdWx0LnNldChuYW1lLCBhY2NlcHRDb21wcmVzc2lvbi5tYXAoKGMpID0+IGMubmFtZSkuam9pbihcIixcIikpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbIk1ldGhvZEtpbmQiLCJoZWFkZXJDb250ZW50VHlwZSIsImhlYWRlclN0cmVhbUFjY2VwdEVuY29kaW5nIiwiaGVhZGVyU3RyZWFtRW5jb2RpbmciLCJoZWFkZXJVbmFyeUFjY2VwdEVuY29kaW5nIiwiaGVhZGVyVW5hcnlFbmNvZGluZyIsImhlYWRlclRpbWVvdXQiLCJoZWFkZXJQcm90b2NvbFZlcnNpb24iLCJoZWFkZXJVc2VyQWdlbnQiLCJwcm90b2NvbFZlcnNpb24iLCJjb250ZW50VHlwZVN0cmVhbUpzb24iLCJjb250ZW50VHlwZVN0cmVhbVByb3RvIiwiY29udGVudFR5cGVVbmFyeUpzb24iLCJjb250ZW50VHlwZVVuYXJ5UHJvdG8iLCJyZXF1ZXN0SGVhZGVyIiwibWV0aG9kS2luZCIsInVzZUJpbmFyeUZvcm1hdCIsInRpbWVvdXRNcyIsInVzZXJQcm92aWRlZEhlYWRlcnMiLCJzZXRVc2VyQWdlbnQiLCJyZXN1bHQiLCJIZWFkZXJzIiwidW5kZWZpbmVkIiwic2V0IiwiVW5hcnkiLCJoYXMiLCJyZXF1ZXN0SGVhZGVyV2l0aENvbXByZXNzaW9uIiwiYWNjZXB0Q29tcHJlc3Npb24iLCJzZW5kQ29tcHJlc3Npb24iLCJuYW1lIiwibGVuZ3RoIiwibWFwIiwiYyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/request-header.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/trailer-mux.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/trailer-mux.js ***!
  \***********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trailerDemux: () => (/* binding */ trailerDemux),\n/* harmony export */   trailerMux: () => (/* binding */ trailerMux)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function demuxes headers and trailers into two separate Headers\n * objects.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function trailerDemux(header) {\n    const h = new Headers(), t = new Headers();\n    header.forEach((value, key)=>{\n        if (key.toLowerCase().startsWith(\"trailer-\")) {\n            t.append(key.substring(8), value);\n        } else {\n            h.append(key, value);\n        }\n    });\n    return [\n        h,\n        t\n    ];\n}\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function muxes a header and a trailer into a single Headers object.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function trailerMux(header, trailer) {\n    const h = new Headers(header);\n    trailer.forEach((value, key)=>{\n        h.append(`trailer-${key}`, value);\n    });\n    return h;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3RyYWlsZXItbXV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0EsYUFBYUMsTUFBTTtJQUMvQixNQUFNQyxJQUFJLElBQUlDLFdBQVdDLElBQUksSUFBSUQ7SUFDakNGLE9BQU9JLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQztRQUNuQixJQUFJQSxJQUFJQyxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxhQUFhO1lBQzFDTCxFQUFFTSxNQUFNLENBQUNILElBQUlJLFNBQVMsQ0FBQyxJQUFJTDtRQUMvQixPQUNLO1lBQ0RKLEVBQUVRLE1BQU0sQ0FBQ0gsS0FBS0Q7UUFDbEI7SUFDSjtJQUNBLE9BQU87UUFBQ0o7UUFBR0U7S0FBRTtBQUNqQjtBQUNBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTUSxXQUFXWCxNQUFNLEVBQUVZLE9BQU87SUFDdEMsTUFBTVgsSUFBSSxJQUFJQyxRQUFRRjtJQUN0QlksUUFBUVIsT0FBTyxDQUFDLENBQUNDLE9BQU9DO1FBQ3BCTCxFQUFFUSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUVILElBQUksQ0FBQyxFQUFFRDtJQUMvQjtJQUNBLE9BQU9KO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvdHJhaWxlci1tdXguanM/Yjk3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBJbiB1bmFyeSBSUENzLCBDb25uZWN0IHRyYW5zcG9ydHMgdHJhaWxpbmcgbWV0YWRhdGEgYXMgcmVzcG9uc2UgaGVhZGVyXG4gKiBmaWVsZHMsIHByZWZpeGVkIHdpdGggXCJ0cmFpbGVyLVwiLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGVtdXhlcyBoZWFkZXJzIGFuZCB0cmFpbGVycyBpbnRvIHR3byBzZXBhcmF0ZSBIZWFkZXJzXG4gKiBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhaWxlckRlbXV4KGhlYWRlcikge1xuICAgIGNvbnN0IGggPSBuZXcgSGVhZGVycygpLCB0ID0gbmV3IEhlYWRlcnMoKTtcbiAgICBoZWFkZXIuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChcInRyYWlsZXItXCIpKSB7XG4gICAgICAgICAgICB0LmFwcGVuZChrZXkuc3Vic3RyaW5nKDgpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBbaCwgdF07XG59XG4vKipcbiAqIEluIHVuYXJ5IFJQQ3MsIENvbm5lY3QgdHJhbnNwb3J0cyB0cmFpbGluZyBtZXRhZGF0YSBhcyByZXNwb25zZSBoZWFkZXJcbiAqIGZpZWxkcywgcHJlZml4ZWQgd2l0aCBcInRyYWlsZXItXCIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBtdXhlcyBhIGhlYWRlciBhbmQgYSB0cmFpbGVyIGludG8gYSBzaW5nbGUgSGVhZGVycyBvYmplY3QuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFpbGVyTXV4KGhlYWRlciwgdHJhaWxlcikge1xuICAgIGNvbnN0IGggPSBuZXcgSGVhZGVycyhoZWFkZXIpO1xuICAgIHRyYWlsZXIuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBoLmFwcGVuZChgdHJhaWxlci0ke2tleX1gLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGg7XG59XG4iXSwibmFtZXMiOlsidHJhaWxlckRlbXV4IiwiaGVhZGVyIiwiaCIsIkhlYWRlcnMiLCJ0IiwiZm9yRWFjaCIsInZhbHVlIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzdGFydHNXaXRoIiwiYXBwZW5kIiwic3Vic3RyaW5nIiwidHJhaWxlck11eCIsInRyYWlsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/trailer-mux.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/validate-response.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/validate-response.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateResponse: () => (/* binding */ validateResponse),\n/* harmony export */   validateResponseWithCompression: () => (/* binding */ validateResponseWithCompression)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bufbuild/protobuf */ \"(ssr)/../node_modules/.pnpm/@bufbuild+protobuf@1.10.1/node_modules/@bufbuild/protobuf/dist/esm/service-type.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _http_status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http-status.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/http-status.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _content_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content-type.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n/**\n * Validates response status and header for the Connect protocol.\n * Throws a ConnectError if the header indicates an error, or if\n * the content type is unexpected, with the following exception:\n * For unary RPCs with an HTTP error status, this returns an error\n * derived from the HTTP status instead of throwing it, giving an\n * implementation a chance to parse a Connect error from the wire.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function validateResponse(methodKind, useBinaryFormat, status, headers) {\n    const mimeType = headers.get(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerContentType);\n    const parsedType = (0,_content_type_js__WEBPACK_IMPORTED_MODULE_1__.parseContentType)(mimeType);\n    if (status !== 200) {\n        const errorFromStatus = new _connect_error_js__WEBPACK_IMPORTED_MODULE_2__.ConnectError(`HTTP ${status}`, (0,_http_status_js__WEBPACK_IMPORTED_MODULE_3__.codeFromHttpStatus)(status), headers);\n        // If parsedType is defined and it is not binary, then this is a unary JSON response\n        if (methodKind == _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_4__.MethodKind.Unary && parsedType && !parsedType.binary) {\n            return {\n                isUnaryError: true,\n                unaryError: errorFromStatus\n            };\n        }\n        throw errorFromStatus;\n    }\n    const allowedContentType = {\n        binary: useBinaryFormat,\n        stream: methodKind !== _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_4__.MethodKind.Unary\n    };\n    if ((parsedType === null || parsedType === void 0 ? void 0 : parsedType.binary) !== allowedContentType.binary || parsedType.stream !== allowedContentType.stream) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_2__.ConnectError(`unsupported content type ${mimeType}`, parsedType === undefined ? _code_js__WEBPACK_IMPORTED_MODULE_5__.Code.Unknown : _code_js__WEBPACK_IMPORTED_MODULE_5__.Code.Internal, headers);\n    }\n    return {\n        isUnaryError: false\n    };\n}\n/**\n * Validates response status and header for the Connect protocol.\n * This function is identical to validateResponse(), but also verifies\n * that a given encoding header is acceptable.\n *\n * @private\n */ function validateResponseWithCompression(methodKind, acceptCompression, useBinaryFormat, status, headers) {\n    let compression;\n    const encoding = headers.get(methodKind == _bufbuild_protobuf__WEBPACK_IMPORTED_MODULE_4__.MethodKind.Unary ? _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerUnaryEncoding : _headers_js__WEBPACK_IMPORTED_MODULE_0__.headerStreamEncoding);\n    if (encoding != null && encoding.toLowerCase() !== \"identity\") {\n        compression = acceptCompression.find((c)=>c.name === encoding);\n        if (!compression) {\n            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_2__.ConnectError(`unsupported response encoding \"${encoding}\"`, _code_js__WEBPACK_IMPORTED_MODULE_5__.Code.Internal, headers);\n        }\n    }\n    return Object.assign({\n        compression\n    }, validateResponse(methodKind, useBinaryFormat, status, headers));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3ZhbGlkYXRlLXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2U7QUFDZDtBQUNvQjtBQUNIO0FBQ0U7QUFDd0M7QUFDN0Y7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU1EsaUJBQWlCQyxVQUFVLEVBQUVDLGVBQWUsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3pFLE1BQU1DLFdBQVdELFFBQVFFLEdBQUcsQ0FBQ1QsMERBQWlCQTtJQUM5QyxNQUFNVSxhQUFhWCxrRUFBZ0JBLENBQUNTO0lBQ3BDLElBQUlGLFdBQVcsS0FBSztRQUNoQixNQUFNSyxrQkFBa0IsSUFBSWIsMkRBQVlBLENBQUMsQ0FBQyxLQUFLLEVBQUVRLE9BQU8sQ0FBQyxFQUFFVCxtRUFBa0JBLENBQUNTLFNBQVNDO1FBQ3ZGLG9GQUFvRjtRQUNwRixJQUFJSCxjQUFjVCwwREFBVUEsQ0FBQ2lCLEtBQUssSUFBSUYsY0FBYyxDQUFDQSxXQUFXRyxNQUFNLEVBQUU7WUFDcEUsT0FBTztnQkFBRUMsY0FBYztnQkFBTUMsWUFBWUo7WUFBZ0I7UUFDN0Q7UUFDQSxNQUFNQTtJQUNWO0lBQ0EsTUFBTUsscUJBQXFCO1FBQ3ZCSCxRQUFRUjtRQUNSWSxRQUFRYixlQUFlVCwwREFBVUEsQ0FBQ2lCLEtBQUs7SUFDM0M7SUFDQSxJQUFJLENBQUNGLGVBQWUsUUFBUUEsZUFBZSxLQUFLLElBQUksS0FBSyxJQUFJQSxXQUFXRyxNQUFNLE1BQU1HLG1CQUFtQkgsTUFBTSxJQUN6R0gsV0FBV08sTUFBTSxLQUFLRCxtQkFBbUJDLE1BQU0sRUFBRTtRQUNqRCxNQUFNLElBQUluQiwyREFBWUEsQ0FBQyxDQUFDLHlCQUF5QixFQUFFVSxTQUFTLENBQUMsRUFBRUUsZUFBZVEsWUFBWXRCLDBDQUFJQSxDQUFDdUIsT0FBTyxHQUFHdkIsMENBQUlBLENBQUN3QixRQUFRLEVBQUViO0lBQzVIO0lBQ0EsT0FBTztRQUFFTyxjQUFjO0lBQU07QUFDakM7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTTyxnQ0FBZ0NqQixVQUFVLEVBQUVrQixpQkFBaUIsRUFBRWpCLGVBQWUsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQzNHLElBQUlnQjtJQUNKLE1BQU1DLFdBQVdqQixRQUFRRSxHQUFHLENBQUNMLGNBQWNULDBEQUFVQSxDQUFDaUIsS0FBSyxHQUFHViw0REFBbUJBLEdBQUdELDZEQUFvQkE7SUFDeEcsSUFBSXVCLFlBQVksUUFBUUEsU0FBU0MsV0FBVyxPQUFPLFlBQVk7UUFDM0RGLGNBQWNELGtCQUFrQkksSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLElBQUksS0FBS0o7UUFDdkQsSUFBSSxDQUFDRCxhQUFhO1lBQ2QsTUFBTSxJQUFJekIsMkRBQVlBLENBQUMsQ0FBQywrQkFBK0IsRUFBRTBCLFNBQVMsQ0FBQyxDQUFDLEVBQUU1QiwwQ0FBSUEsQ0FBQ3dCLFFBQVEsRUFBRWI7UUFDekY7SUFDSjtJQUNBLE9BQU9zQixPQUFPQyxNQUFNLENBQUM7UUFBRVA7SUFBWSxHQUFHcEIsaUJBQWlCQyxZQUFZQyxpQkFBaUJDLFFBQVFDO0FBQ2hHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3ZhbGlkYXRlLXJlc3BvbnNlLmpzPzlmNzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IE1ldGhvZEtpbmQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbmltcG9ydCB7IGNvZGVGcm9tSHR0cFN0YXR1cyB9IGZyb20gXCIuL2h0dHAtc3RhdHVzLmpzXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgcGFyc2VDb250ZW50VHlwZSB9IGZyb20gXCIuL2NvbnRlbnQtdHlwZS5qc1wiO1xuaW1wb3J0IHsgaGVhZGVyQ29udGVudFR5cGUsIGhlYWRlclN0cmVhbUVuY29kaW5nLCBoZWFkZXJVbmFyeUVuY29kaW5nLCB9IGZyb20gXCIuL2hlYWRlcnMuanNcIjtcbi8qKlxuICogVmFsaWRhdGVzIHJlc3BvbnNlIHN0YXR1cyBhbmQgaGVhZGVyIGZvciB0aGUgQ29ubmVjdCBwcm90b2NvbC5cbiAqIFRocm93cyBhIENvbm5lY3RFcnJvciBpZiB0aGUgaGVhZGVyIGluZGljYXRlcyBhbiBlcnJvciwgb3IgaWZcbiAqIHRoZSBjb250ZW50IHR5cGUgaXMgdW5leHBlY3RlZCwgd2l0aCB0aGUgZm9sbG93aW5nIGV4Y2VwdGlvbjpcbiAqIEZvciB1bmFyeSBSUENzIHdpdGggYW4gSFRUUCBlcnJvciBzdGF0dXMsIHRoaXMgcmV0dXJucyBhbiBlcnJvclxuICogZGVyaXZlZCBmcm9tIHRoZSBIVFRQIHN0YXR1cyBpbnN0ZWFkIG9mIHRocm93aW5nIGl0LCBnaXZpbmcgYW5cbiAqIGltcGxlbWVudGF0aW9uIGEgY2hhbmNlIHRvIHBhcnNlIGEgQ29ubmVjdCBlcnJvciBmcm9tIHRoZSB3aXJlLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZXNwb25zZShtZXRob2RLaW5kLCB1c2VCaW5hcnlGb3JtYXQsIHN0YXR1cywgaGVhZGVycykge1xuICAgIGNvbnN0IG1pbWVUeXBlID0gaGVhZGVycy5nZXQoaGVhZGVyQ29udGVudFR5cGUpO1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSBwYXJzZUNvbnRlbnRUeXBlKG1pbWVUeXBlKTtcbiAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY29uc3QgZXJyb3JGcm9tU3RhdHVzID0gbmV3IENvbm5lY3RFcnJvcihgSFRUUCAke3N0YXR1c31gLCBjb2RlRnJvbUh0dHBTdGF0dXMoc3RhdHVzKSwgaGVhZGVycyk7XG4gICAgICAgIC8vIElmIHBhcnNlZFR5cGUgaXMgZGVmaW5lZCBhbmQgaXQgaXMgbm90IGJpbmFyeSwgdGhlbiB0aGlzIGlzIGEgdW5hcnkgSlNPTiByZXNwb25zZVxuICAgICAgICBpZiAobWV0aG9kS2luZCA9PSBNZXRob2RLaW5kLlVuYXJ5ICYmIHBhcnNlZFR5cGUgJiYgIXBhcnNlZFR5cGUuYmluYXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4geyBpc1VuYXJ5RXJyb3I6IHRydWUsIHVuYXJ5RXJyb3I6IGVycm9yRnJvbVN0YXR1cyB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yRnJvbVN0YXR1cztcbiAgICB9XG4gICAgY29uc3QgYWxsb3dlZENvbnRlbnRUeXBlID0ge1xuICAgICAgICBiaW5hcnk6IHVzZUJpbmFyeUZvcm1hdCxcbiAgICAgICAgc3RyZWFtOiBtZXRob2RLaW5kICE9PSBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH07XG4gICAgaWYgKChwYXJzZWRUeXBlID09PSBudWxsIHx8IHBhcnNlZFR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcnNlZFR5cGUuYmluYXJ5KSAhPT0gYWxsb3dlZENvbnRlbnRUeXBlLmJpbmFyeSB8fFxuICAgICAgICBwYXJzZWRUeXBlLnN0cmVhbSAhPT0gYWxsb3dlZENvbnRlbnRUeXBlLnN0cmVhbSkge1xuICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGB1bnN1cHBvcnRlZCBjb250ZW50IHR5cGUgJHttaW1lVHlwZX1gLCBwYXJzZWRUeXBlID09PSB1bmRlZmluZWQgPyBDb2RlLlVua25vd24gOiBDb2RlLkludGVybmFsLCBoZWFkZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaXNVbmFyeUVycm9yOiBmYWxzZSB9O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgcmVzcG9uc2Ugc3RhdHVzIGFuZCBoZWFkZXIgZm9yIHRoZSBDb25uZWN0IHByb3RvY29sLlxuICogVGhpcyBmdW5jdGlvbiBpcyBpZGVudGljYWwgdG8gdmFsaWRhdGVSZXNwb25zZSgpLCBidXQgYWxzbyB2ZXJpZmllc1xuICogdGhhdCBhIGdpdmVuIGVuY29kaW5nIGhlYWRlciBpcyBhY2NlcHRhYmxlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJlc3BvbnNlV2l0aENvbXByZXNzaW9uKG1ldGhvZEtpbmQsIGFjY2VwdENvbXByZXNzaW9uLCB1c2VCaW5hcnlGb3JtYXQsIHN0YXR1cywgaGVhZGVycykge1xuICAgIGxldCBjb21wcmVzc2lvbjtcbiAgICBjb25zdCBlbmNvZGluZyA9IGhlYWRlcnMuZ2V0KG1ldGhvZEtpbmQgPT0gTWV0aG9kS2luZC5VbmFyeSA/IGhlYWRlclVuYXJ5RW5jb2RpbmcgOiBoZWFkZXJTdHJlYW1FbmNvZGluZyk7XG4gICAgaWYgKGVuY29kaW5nICE9IG51bGwgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSAhPT0gXCJpZGVudGl0eVwiKSB7XG4gICAgICAgIGNvbXByZXNzaW9uID0gYWNjZXB0Q29tcHJlc3Npb24uZmluZCgoYykgPT4gYy5uYW1lID09PSBlbmNvZGluZyk7XG4gICAgICAgIGlmICghY29tcHJlc3Npb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYHVuc3VwcG9ydGVkIHJlc3BvbnNlIGVuY29kaW5nIFwiJHtlbmNvZGluZ31cImAsIENvZGUuSW50ZXJuYWwsIGhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgY29tcHJlc3Npb24gfSwgdmFsaWRhdGVSZXNwb25zZShtZXRob2RLaW5kLCB1c2VCaW5hcnlGb3JtYXQsIHN0YXR1cywgaGVhZGVycykpO1xufVxuIl0sIm5hbWVzIjpbIk1ldGhvZEtpbmQiLCJDb2RlIiwiY29kZUZyb21IdHRwU3RhdHVzIiwiQ29ubmVjdEVycm9yIiwicGFyc2VDb250ZW50VHlwZSIsImhlYWRlckNvbnRlbnRUeXBlIiwiaGVhZGVyU3RyZWFtRW5jb2RpbmciLCJoZWFkZXJVbmFyeUVuY29kaW5nIiwidmFsaWRhdGVSZXNwb25zZSIsIm1ldGhvZEtpbmQiLCJ1c2VCaW5hcnlGb3JtYXQiLCJzdGF0dXMiLCJoZWFkZXJzIiwibWltZVR5cGUiLCJnZXQiLCJwYXJzZWRUeXBlIiwiZXJyb3JGcm9tU3RhdHVzIiwiVW5hcnkiLCJiaW5hcnkiLCJpc1VuYXJ5RXJyb3IiLCJ1bmFyeUVycm9yIiwiYWxsb3dlZENvbnRlbnRUeXBlIiwic3RyZWFtIiwidW5kZWZpbmVkIiwiVW5rbm93biIsIkludGVybmFsIiwidmFsaWRhdGVSZXNwb25zZVdpdGhDb21wcmVzc2lvbiIsImFjY2VwdENvbXByZXNzaW9uIiwiY29tcHJlc3Npb24iLCJlbmNvZGluZyIsInRvTG93ZXJDYXNlIiwiZmluZCIsImMiLCJuYW1lIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/validate-response.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   protocolVersion: () => (/* binding */ protocolVersion),\n/* harmony export */   requireProtocolVersionHeader: () => (/* binding */ requireProtocolVersionHeader),\n/* harmony export */   requireProtocolVersionParam: () => (/* binding */ requireProtocolVersionParam)\n/* harmony export */ });\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js\");\n/* harmony import */ var _query_params_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query-params.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/query-params.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n/**\n * The only know value for the header Connect-Protocol-Version.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const protocolVersion = \"1\";\n/**\n * Requires the Connect-Protocol-Version header to be present with the expected\n * value. Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function requireProtocolVersionHeader(requestHeader) {\n    const v = requestHeader.get(_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerProtocolVersion);\n    if (v === null) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`missing required header: set ${_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerProtocolVersion} to \"${protocolVersion}\"`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.InvalidArgument);\n    } else if (v !== protocolVersion) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`${_headers_js__WEBPACK_IMPORTED_MODULE_0__.headerProtocolVersion} must be \"${protocolVersion}\": got \"${v}\"`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.InvalidArgument);\n    }\n}\n/**\n * Requires the connect query parameter to be present with the expected value.\n * Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function requireProtocolVersionParam(queryParams) {\n    const v = queryParams.get(_query_params_js__WEBPACK_IMPORTED_MODULE_3__.paramConnectVersion);\n    if (v === null) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`missing required parameter: set ${_query_params_js__WEBPACK_IMPORTED_MODULE_3__.paramConnectVersion} to \"v${protocolVersion}\"`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.InvalidArgument);\n    } else if (v !== `v${protocolVersion}`) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`${_query_params_js__WEBPACK_IMPORTED_MODULE_3__.paramConnectVersion} must be \"v${protocolVersion}\": got \"${v}\"`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.InvalidArgument);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNvQjtBQUNHO0FBQ0w7QUFDakI7QUFDbEM7Ozs7Q0FJQyxHQUNNLE1BQU1JLGtCQUFrQixJQUFJO0FBQ25DOzs7OztDQUtDLEdBQ00sU0FBU0MsNkJBQTZCQyxhQUFhO0lBQ3RELE1BQU1DLElBQUlELGNBQWNFLEdBQUcsQ0FBQ1IsOERBQXFCQTtJQUNqRCxJQUFJTyxNQUFNLE1BQU07UUFDWixNQUFNLElBQUlMLDJEQUFZQSxDQUFDLENBQUMsNkJBQTZCLEVBQUVGLDhEQUFxQkEsQ0FBQyxLQUFLLEVBQUVJLGdCQUFnQixDQUFDLENBQUMsRUFBRUQsMENBQUlBLENBQUNNLGVBQWU7SUFDaEksT0FDSyxJQUFJRixNQUFNSCxpQkFBaUI7UUFDNUIsTUFBTSxJQUFJRiwyREFBWUEsQ0FBQyxDQUFDLEVBQUVGLDhEQUFxQkEsQ0FBQyxVQUFVLEVBQUVJLGdCQUFnQixRQUFRLEVBQUVHLEVBQUUsQ0FBQyxDQUFDLEVBQUVKLDBDQUFJQSxDQUFDTSxlQUFlO0lBQ3BIO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLDRCQUE0QkMsV0FBVztJQUNuRCxNQUFNSixJQUFJSSxZQUFZSCxHQUFHLENBQUNQLGlFQUFtQkE7SUFDN0MsSUFBSU0sTUFBTSxNQUFNO1FBQ1osTUFBTSxJQUFJTCwyREFBWUEsQ0FBQyxDQUFDLGdDQUFnQyxFQUFFRCxpRUFBbUJBLENBQUMsTUFBTSxFQUFFRyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUVELDBDQUFJQSxDQUFDTSxlQUFlO0lBQ2xJLE9BQ0ssSUFBSUYsTUFBTSxDQUFDLENBQUMsRUFBRUgsZ0JBQWdCLENBQUMsRUFBRTtRQUNsQyxNQUFNLElBQUlGLDJEQUFZQSxDQUFDLENBQUMsRUFBRUQsaUVBQW1CQSxDQUFDLFdBQVcsRUFBRUcsZ0JBQWdCLFFBQVEsRUFBRUcsRUFBRSxDQUFDLENBQUMsRUFBRUosMENBQUlBLENBQUNNLGVBQWU7SUFDbkg7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC92ZXJzaW9uLmpzP2UwYzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGhlYWRlclByb3RvY29sVmVyc2lvbiB9IGZyb20gXCIuL2hlYWRlcnMuanNcIjtcbmltcG9ydCB7IHBhcmFtQ29ubmVjdFZlcnNpb24gfSBmcm9tIFwiLi9xdWVyeS1wYXJhbXMuanNcIjtcbmltcG9ydCB7IENvbm5lY3RFcnJvciB9IGZyb20gXCIuLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbi8qKlxuICogVGhlIG9ubHkga25vdyB2YWx1ZSBmb3IgdGhlIGhlYWRlciBDb25uZWN0LVByb3RvY29sLVZlcnNpb24uXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2NvbFZlcnNpb24gPSBcIjFcIjtcbi8qKlxuICogUmVxdWlyZXMgdGhlIENvbm5lY3QtUHJvdG9jb2wtVmVyc2lvbiBoZWFkZXIgdG8gYmUgcHJlc2VudCB3aXRoIHRoZSBleHBlY3RlZFxuICogdmFsdWUuIFJhaXNlcyBhIENvbm5lY3RFcnJvciB3aXRoIENvZGUuSW52YWxpZEFyZ3VtZW50IG90aGVyd2lzZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVQcm90b2NvbFZlcnNpb25IZWFkZXIocmVxdWVzdEhlYWRlcikge1xuICAgIGNvbnN0IHYgPSByZXF1ZXN0SGVhZGVyLmdldChoZWFkZXJQcm90b2NvbFZlcnNpb24pO1xuICAgIGlmICh2ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYG1pc3NpbmcgcmVxdWlyZWQgaGVhZGVyOiBzZXQgJHtoZWFkZXJQcm90b2NvbFZlcnNpb259IHRvIFwiJHtwcm90b2NvbFZlcnNpb259XCJgLCBDb2RlLkludmFsaWRBcmd1bWVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHYgIT09IHByb3RvY29sVmVyc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGAke2hlYWRlclByb3RvY29sVmVyc2lvbn0gbXVzdCBiZSBcIiR7cHJvdG9jb2xWZXJzaW9ufVwiOiBnb3QgXCIke3Z9XCJgLCBDb2RlLkludmFsaWRBcmd1bWVudCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXF1aXJlcyB0aGUgY29ubmVjdCBxdWVyeSBwYXJhbWV0ZXIgdG8gYmUgcHJlc2VudCB3aXRoIHRoZSBleHBlY3RlZCB2YWx1ZS5cbiAqIFJhaXNlcyBhIENvbm5lY3RFcnJvciB3aXRoIENvZGUuSW52YWxpZEFyZ3VtZW50IG90aGVyd2lzZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVQcm90b2NvbFZlcnNpb25QYXJhbShxdWVyeVBhcmFtcykge1xuICAgIGNvbnN0IHYgPSBxdWVyeVBhcmFtcy5nZXQocGFyYW1Db25uZWN0VmVyc2lvbik7XG4gICAgaWYgKHYgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IHNldCAke3BhcmFtQ29ubmVjdFZlcnNpb259IHRvIFwidiR7cHJvdG9jb2xWZXJzaW9ufVwiYCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2ICE9PSBgdiR7cHJvdG9jb2xWZXJzaW9ufWApIHtcbiAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgJHtwYXJhbUNvbm5lY3RWZXJzaW9ufSBtdXN0IGJlIFwidiR7cHJvdG9jb2xWZXJzaW9ufVwiOiBnb3QgXCIke3Z9XCJgLCBDb2RlLkludmFsaWRBcmd1bWVudCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImhlYWRlclByb3RvY29sVmVyc2lvbiIsInBhcmFtQ29ubmVjdFZlcnNpb24iLCJDb25uZWN0RXJyb3IiLCJDb2RlIiwicHJvdG9jb2xWZXJzaW9uIiwicmVxdWlyZVByb3RvY29sVmVyc2lvbkhlYWRlciIsInJlcXVlc3RIZWFkZXIiLCJ2IiwiZ2V0IiwiSW52YWxpZEFyZ3VtZW50IiwicmVxdWlyZVByb3RvY29sVmVyc2lvblBhcmFtIiwicXVlcnlQYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js":
/*!******************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAsyncIterable: () => (/* binding */ createAsyncIterable),\n/* harmony export */   createWritableIterable: () => (/* binding */ createWritableIterable),\n/* harmony export */   makeIterableAbortable: () => (/* binding */ makeIterableAbortable),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   pipeTo: () => (/* binding */ pipeTo),\n/* harmony export */   readAllBytes: () => (/* binding */ readAllBytes),\n/* harmony export */   sinkAll: () => (/* binding */ sinkAll),\n/* harmony export */   sinkAllBytes: () => (/* binding */ sinkAllBytes),\n/* harmony export */   transformAppend: () => (/* binding */ transformAppend),\n/* harmony export */   transformCatch: () => (/* binding */ transformCatch),\n/* harmony export */   transformCatchFinally: () => (/* binding */ transformCatchFinally),\n/* harmony export */   transformCompressEnvelope: () => (/* binding */ transformCompressEnvelope),\n/* harmony export */   transformDecompressEnvelope: () => (/* binding */ transformDecompressEnvelope),\n/* harmony export */   transformJoinEnvelopes: () => (/* binding */ transformJoinEnvelopes),\n/* harmony export */   transformParseEnvelope: () => (/* binding */ transformParseEnvelope),\n/* harmony export */   transformPrepend: () => (/* binding */ transformPrepend),\n/* harmony export */   transformReadAllBytes: () => (/* binding */ transformReadAllBytes),\n/* harmony export */   transformSerializeEnvelope: () => (/* binding */ transformSerializeEnvelope),\n/* harmony export */   transformSplitEnvelope: () => (/* binding */ transformSplitEnvelope),\n/* harmony export */   untilFirst: () => (/* binding */ untilFirst)\n/* harmony export */ });\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./envelope.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js\");\n/* harmony import */ var _limit_io_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./limit-io.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/limit-io.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = undefined && undefined.__asyncValues || function(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n};\nvar __await = undefined && undefined.__await || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = undefined && undefined.__asyncGenerator || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\nvar __asyncDelegator = undefined && undefined.__asyncDelegator || function(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n};\n\n\n\n\nfunction pipeTo(source, ...rest) {\n    const [transforms, sink, opt] = pickTransformsAndSink(rest);\n    let iterable = source;\n    let abortable;\n    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n        iterable = abortable = makeIterableAbortable(iterable);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    iterable = pipe(iterable, ...transforms, {\n        propagateDownStreamError: false\n    });\n    return sink(iterable).catch((reason)=>{\n        if (abortable) {\n            return abortable.abort(reason).then(()=>Promise.reject(reason));\n        }\n        return Promise.reject(reason);\n    });\n}\n// pick transforms, the sink, and options from the pipeTo() rest parameter\nfunction pickTransformsAndSink(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    const sink = rest.pop();\n    return [\n        rest,\n        sink,\n        opt\n    ];\n}\n/**\n * Creates an AsyncIterableSink that concatenates all elements from the input.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function sinkAll() {\n    return async function(iterable) {\n        var _a, e_1, _b, _c;\n        const all = [];\n        try {\n            for(var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true){\n                _c = iterable_1_1.value;\n                _d = false;\n                const chunk = _c;\n                all.push(chunk);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        return all;\n    };\n}\n/**\n * Creates an AsyncIterableSink that concatenates all chunks from the input into\n * a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function sinkAllBytes(readMaxBytes, lengthHint) {\n    return async function(iterable) {\n        return await readAllBytes(iterable, readMaxBytes, lengthHint);\n    };\n}\nfunction pipe(source, ...rest) {\n    return __asyncGenerator(this, arguments, function* pipe_1() {\n        var _a;\n        const [transforms, opt] = pickTransforms(rest);\n        let abortable;\n        const sourceIt = source[Symbol.asyncIterator]();\n        const cachedSource = {\n            [Symbol.asyncIterator] () {\n                return sourceIt;\n            }\n        };\n        let iterable = cachedSource;\n        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n            iterable = abortable = makeIterableAbortable(iterable);\n        }\n        for (const t of transforms){\n            iterable = t(iterable);\n        }\n        const it = iterable[Symbol.asyncIterator]();\n        try {\n            for(;;){\n                const r = yield __await(it.next());\n                if (r.done === true) {\n                    break;\n                }\n                if (!abortable) {\n                    yield yield __await(r.value);\n                    continue;\n                }\n                try {\n                    yield yield __await(r.value);\n                } catch (e) {\n                    yield __await(abortable.abort(e)); // propagate downstream error to the source\n                    throw e;\n                }\n            }\n        } finally{\n            if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n                // Call return on the source iterable to indicate\n                // that we will no longer consume it and it should\n                // cleanup any allocated resources.\n                (_a = sourceIt.return) === null || _a === void 0 ? void 0 : _a.call(sourceIt).catch(()=>{\n                // return returns a promise, which we don't care about.\n                //\n                // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                // this is to ensure error is caught and ignored.\n                });\n            }\n        }\n    });\n}\nfunction pickTransforms(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    return [\n        rest,\n        opt\n    ];\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given catchError function.\n *\n * The catchError function may return a final value.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformCatch(catchError) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            const it = iterable[Symbol.asyncIterator]();\n            for(;;){\n                let r;\n                try {\n                    r = yield __await(it.next());\n                } catch (e) {\n                    const caught = yield __await(catchError(e));\n                    if (caught !== undefined) {\n                        yield yield __await(caught);\n                    }\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given function. Unlike transformCatch(), the given function\n * is also called when no error is raised.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformCatchFinally(catchFinally) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            let err;\n            const it = iterable[Symbol.asyncIterator]();\n            for(;;){\n                let r;\n                try {\n                    r = yield __await(it.next());\n                } catch (e) {\n                    err = e;\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n            const caught = yield __await(catchFinally(err));\n            if (caught !== undefined) {\n                yield yield __await(caught);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that appends a value.\n *\n * The element to append is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformAppend(provide) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_2, _b, _c;\n            try {\n                for(var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true){\n                    _c = iterable_2_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            } catch (e_2_1) {\n                e_2 = {\n                    error: e_2_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));\n                } finally{\n                    if (e_2) throw e_2.error;\n                }\n            }\n            const append = yield __await(provide());\n            if (append !== undefined) {\n                yield yield __await(append);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that prepends an element.\n *\n * The element to prepend is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformPrepend(provide) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_3, _b, _c;\n            const prepend = yield __await(provide());\n            if (prepend !== undefined) {\n                yield yield __await(prepend);\n            }\n            try {\n                for(var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield __await(iterable_3.next()), _a = iterable_3_1.done, !_a; _d = true){\n                    _c = iterable_3_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            } catch (e_3_1) {\n                e_3 = {\n                    error: e_3_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_3.return)) yield __await(_b.call(iterable_3));\n                } finally{\n                    if (e_3) throw e_3.error;\n                }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that reads all bytes from the input, and\n * concatenates them to a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformReadAllBytes(readMaxBytes, lengthHint) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            yield yield __await((yield __await(readAllBytes(iterable, readMaxBytes, lengthHint))));\n        });\n    };\n}\nfunction transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {\n    if (endStreamFlag === undefined || endSerialization === undefined) {\n        return function(iterable) {\n            return __asyncGenerator(this, arguments, function*() {\n                var _a, e_4, _b, _c;\n                try {\n                    for(var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield __await(iterable_4.next()), _a = iterable_4_1.done, !_a; _d = true){\n                        _c = iterable_4_1.value;\n                        _d = false;\n                        const chunk = _c;\n                        const data = serialization.serialize(chunk);\n                        yield yield __await({\n                            flags: 0,\n                            data\n                        });\n                    }\n                } catch (e_4_1) {\n                    e_4 = {\n                        error: e_4_1\n                    };\n                } finally{\n                    try {\n                        if (!_d && !_a && (_b = iterable_4.return)) yield __await(_b.call(iterable_4));\n                    } finally{\n                        if (e_4) throw e_4.error;\n                    }\n                }\n            });\n        };\n    }\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_5, _b, _c;\n            try {\n                for(var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), _a = iterable_5_1.done, !_a; _d = true){\n                    _c = iterable_5_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    let data;\n                    let flags = 0;\n                    if (chunk.end) {\n                        flags = flags | endStreamFlag;\n                        data = endSerialization.serialize(chunk.value);\n                    } else {\n                        data = serialization.serialize(chunk.value);\n                    }\n                    yield yield __await({\n                        flags,\n                        data\n                    });\n                }\n            } catch (e_5_1) {\n                e_5 = {\n                    error: e_5_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_5.return)) yield __await(_b.call(iterable_5));\n                } finally{\n                    if (e_5) throw e_5.error;\n                }\n            }\n        });\n    };\n}\nfunction transformParseEnvelope(serialization, endStreamFlag, endSerialization) {\n    // code path always yields ParsedEnvelopedMessage<T, E>\n    if (endSerialization && endStreamFlag !== undefined) {\n        return function(iterable) {\n            return __asyncGenerator(this, arguments, function*() {\n                var _a, e_6, _b, _c;\n                try {\n                    for(var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield __await(iterable_6.next()), _a = iterable_6_1.done, !_a; _d = true){\n                        _c = iterable_6_1.value;\n                        _d = false;\n                        const { flags, data } = _c;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            yield yield __await({\n                                value: endSerialization.parse(data),\n                                end: true\n                            });\n                        } else {\n                            yield yield __await({\n                                value: serialization.parse(data),\n                                end: false\n                            });\n                        }\n                    }\n                } catch (e_6_1) {\n                    e_6 = {\n                        error: e_6_1\n                    };\n                } finally{\n                    try {\n                        if (!_d && !_a && (_b = iterable_6.return)) yield __await(_b.call(iterable_6));\n                    } finally{\n                        if (e_6) throw e_6.error;\n                    }\n                }\n            });\n        };\n    }\n    // code path always yields T\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_7, _b, _c;\n            try {\n                for(var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield __await(iterable_7.next()), _a = iterable_7_1.done, !_a; _d = true){\n                    _c = iterable_7_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    if (endStreamFlag !== undefined && (flags & endStreamFlag) === endStreamFlag) {\n                        if (endSerialization === null) {\n                            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"unexpected end flag\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.InvalidArgument);\n                        }\n                        continue;\n                    }\n                    yield yield __await(serialization.parse(data));\n                }\n            } catch (e_7_1) {\n                e_7 = {\n                    error: e_7_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_7.return)) yield __await(_b.call(iterable_7));\n                } finally{\n                    if (e_7) throw e_7.error;\n                }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and compresses them if they are larger than compressMinBytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformCompressEnvelope(compression, compressMinBytes) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_8, _b, _c;\n            try {\n                for(var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield __await(iterable_8.next()), _a = iterable_8_1.done, !_a; _d = true){\n                    _c = iterable_8_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await((yield __await((0,_envelope_js__WEBPACK_IMPORTED_MODULE_2__.envelopeCompress)(env, compression, compressMinBytes))));\n                }\n            } catch (e_8_1) {\n                e_8 = {\n                    error: e_8_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_8.return)) yield __await(_b.call(iterable_8));\n                } finally{\n                    if (e_8) throw e_8.error;\n                }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and decompresses them using the given compression.\n *\n * The iterable raises an error if the decompressed payload of an enveloped\n * message is larger than readMaxBytes, or if no compression is provided.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformDecompressEnvelope(compression, readMaxBytes) {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_9, _b, _c;\n            try {\n                for(var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield __await(iterable_9.next()), _a = iterable_9_1.done, !_a; _d = true){\n                    _c = iterable_9_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await((yield __await((0,_envelope_js__WEBPACK_IMPORTED_MODULE_2__.envelopeDecompress)(env, compression, readMaxBytes))));\n                }\n            } catch (e_9_1) {\n                e_9 = {\n                    error: e_9_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_9.return)) yield __await(_b.call(iterable_9));\n                } finally{\n                    if (e_9) throw e_9.error;\n                }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes enveloped messages as a source,\n * and joins them into a stream of raw bytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformJoinEnvelopes() {\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_10, _b, _c;\n            try {\n                for(var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield __await(iterable_10.next()), _a = iterable_10_1.done, !_a; _d = true){\n                    _c = iterable_10_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    yield yield __await((0,_envelope_js__WEBPACK_IMPORTED_MODULE_2__.encodeEnvelope)(flags, data));\n                }\n            } catch (e_10_1) {\n                e_10 = {\n                    error: e_10_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_10.return)) yield __await(_b.call(iterable_10));\n                } finally{\n                    if (e_10) throw e_10.error;\n                }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes raw bytes as a source, and splits\n * them into enveloped messages.\n *\n * The iterable raises an error\n * - if the payload of an enveloped message is larger than readMaxBytes,\n * - if the stream ended before an enveloped message fully arrived,\n * - or if the stream ended with extraneous data.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function transformSplitEnvelope(readMaxBytes) {\n    // append chunk to buffer, returning updated buffer\n    function append(buffer, chunk) {\n        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        return n;\n    }\n    // tuple 0: envelope, or undefined if incomplete\n    // tuple 1: remainder of the buffer\n    function shiftEnvelope(buffer, header) {\n        if (buffer.byteLength < 5 + header.length) {\n            return [\n                undefined,\n                buffer\n            ];\n        }\n        return [\n            {\n                flags: header.flags,\n                data: buffer.subarray(5, 5 + header.length)\n            },\n            buffer.subarray(5 + header.length)\n        ];\n    }\n    // undefined: header is incomplete\n    function peekHeader(buffer) {\n        if (buffer.byteLength < 5) {\n            return undefined;\n        }\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        const length = view.getUint32(1); // 4 bytes message length\n        const flags = view.getUint8(0); // first byte is flags\n        return {\n            length,\n            flags\n        };\n    }\n    return function(iterable) {\n        return __asyncGenerator(this, arguments, function*() {\n            var _a, e_11, _b, _c;\n            let buffer = new Uint8Array(0);\n            try {\n                for(var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield __await(iterable_11.next()), _a = iterable_11_1.done, !_a; _d = true){\n                    _c = iterable_11_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    buffer = append(buffer, chunk);\n                    for(;;){\n                        const header = peekHeader(buffer);\n                        if (!header) {\n                            break;\n                        }\n                        (0,_limit_io_js__WEBPACK_IMPORTED_MODULE_3__.assertReadMaxBytes)(readMaxBytes, header.length, true);\n                        let env;\n                        [env, buffer] = shiftEnvelope(buffer, header);\n                        if (!env) {\n                            break;\n                        }\n                        yield yield __await(env);\n                    }\n                }\n            } catch (e_11_1) {\n                e_11 = {\n                    error: e_11_1\n                };\n            } finally{\n                try {\n                    if (!_d && !_a && (_b = iterable_11.return)) yield __await(_b.call(iterable_11));\n                } finally{\n                    if (e_11) throw e_11.error;\n                }\n            }\n            if (buffer.byteLength > 0) {\n                const header = peekHeader(buffer);\n                let message = \"protocol error: incomplete envelope\";\n                if (header) {\n                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;\n                }\n                throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(message, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.InvalidArgument);\n            }\n        });\n    };\n}\n/**\n * Reads all bytes from the source, and concatenates them to a single Uint8Array.\n *\n * Raises an error if:\n * - more than readMaxBytes are read\n * - lengthHint is a positive integer, but larger than readMaxBytes\n * - lengthHint is a positive integer, and the source contains more or less bytes\n *   than promised\n *\n * @private Internal code, does not follow semantic versioning.\n */ async function readAllBytes(iterable, readMaxBytes, lengthHint) {\n    var _a, e_12, _b, _c, _d, e_13, _e, _f;\n    const [ok, hint] = parseLengthHint(lengthHint);\n    if (ok) {\n        if (hint > readMaxBytes) {\n            (0,_limit_io_js__WEBPACK_IMPORTED_MODULE_3__.assertReadMaxBytes)(readMaxBytes, hint, true);\n        }\n        const buffer = new Uint8Array(hint);\n        let offset = 0;\n        try {\n            for(var _g = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = await iterable_12.next(), _a = iterable_12_1.done, !_a; _g = true){\n                _c = iterable_12_1.value;\n                _g = false;\n                const chunk = _c;\n                if (offset + chunk.byteLength > hint) {\n                    throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.InvalidArgument);\n                }\n                buffer.set(chunk, offset);\n                offset += chunk.byteLength;\n            }\n        } catch (e_12_1) {\n            e_12 = {\n                error: e_12_1\n            };\n        } finally{\n            try {\n                if (!_g && !_a && (_b = iterable_12.return)) await _b.call(iterable_12);\n            } finally{\n                if (e_12) throw e_12.error;\n            }\n        }\n        if (offset < hint) {\n            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.InvalidArgument);\n        }\n        return buffer;\n    }\n    const chunks = [];\n    let count = 0;\n    try {\n        for(var _h = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _d = iterable_13_1.done, !_d; _h = true){\n            _f = iterable_13_1.value;\n            _h = false;\n            const chunk = _f;\n            count += chunk.byteLength;\n            (0,_limit_io_js__WEBPACK_IMPORTED_MODULE_3__.assertReadMaxBytes)(readMaxBytes, count);\n            chunks.push(chunk);\n        }\n    } catch (e_13_1) {\n        e_13 = {\n            error: e_13_1\n        };\n    } finally{\n        try {\n            if (!_h && !_d && (_e = iterable_13.return)) await _e.call(iterable_13);\n        } finally{\n            if (e_13) throw e_13.error;\n        }\n    }\n    const all = new Uint8Array(count);\n    let offset = 0;\n    for(let chunk = chunks.shift(); chunk; chunk = chunks.shift()){\n        all.set(chunk, offset);\n        offset += chunk.byteLength;\n    }\n    return all;\n}\n// parse the lengthHint argument of readAllBytes()\nfunction parseLengthHint(lengthHint) {\n    if (lengthHint === undefined || lengthHint === null) {\n        return [\n            false,\n            0\n        ];\n    }\n    const n = typeof lengthHint == \"string\" ? parseInt(lengthHint, 10) : lengthHint;\n    if (!Number.isSafeInteger(n) || n < 0) {\n        return [\n            false,\n            n\n        ];\n    }\n    return [\n        true,\n        n\n    ];\n}\n/**\n * Wait for the first element of an iterable without modifying the iterable.\n * This consumes the first element, but pushes it back on the stack.\n *\n * @private Internal code, does not follow semantic versioning.\n */ async function untilFirst(iterable) {\n    const it = iterable[Symbol.asyncIterator]();\n    let first = await it.next();\n    return {\n        [Symbol.asyncIterator] () {\n            const w = {\n                async next () {\n                    if (first !== null) {\n                        const n = first;\n                        first = null;\n                        return n;\n                    }\n                    return await it.next();\n                }\n            };\n            if (it.throw !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly\n                w.throw = (e)=>it.throw(e);\n            }\n            if (it.return !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly\n                w.return = (value)=>it.return(value);\n            }\n            return w;\n        }\n    };\n}\n/**\n * Wrap the given iterable and return an iterable with an abort() method.\n *\n * This function exists purely for convenience. Where one would typically have\n * to access the iterator directly, advance through all elements, and call\n * AsyncIterator.throw() to notify the upstream iterable, this function allows\n * to use convenient for-await loops and still notify the upstream iterable:\n *\n * ```ts\n * const abortable = makeIterableAbortable(iterable);\n * for await (const ele of abortable) {\n *   await abortable.abort(\"ERR\");\n * }\n * ```\n * There are a couple of limitations of this function:\n * - the given async iterable must implement throw\n * - the async iterable cannot be re-use\n * - if source catches errors and yields values for them, they are ignored, and\n *   the source may still dangle\n *\n * There are four possible ways an async function* can handle yield errors:\n * 1. don't catch errors at all - Abortable.abort() will resolve \"rethrown\"\n * 2. catch errors and rethrow - Abortable.abort() will resolve \"rethrown\"\n * 3. catch errors and return - Abortable.abort() will resolve \"completed\"\n * 4. catch errors and yield a value - Abortable.abort() will resolve \"caught\"\n *\n * Note that catching errors and yielding a value is problematic, and it should\n * be documented that this may leave the source in a dangling state.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function makeIterableAbortable(iterable) {\n    const innerCandidate = iterable[Symbol.asyncIterator]();\n    if (innerCandidate.throw === undefined) {\n        throw new Error(\"AsyncIterable does not implement throw\");\n    }\n    const inner = innerCandidate;\n    let aborted;\n    let resultPromise;\n    let it = {\n        next () {\n            resultPromise = inner.next().finally(()=>{\n                resultPromise = undefined;\n            });\n            return resultPromise;\n        },\n        throw (e) {\n            return inner.throw(e);\n        }\n    };\n    if (innerCandidate.return !== undefined) {\n        it = Object.assign(Object.assign({}, it), {\n            return (value) {\n                return inner.return(value);\n            }\n        });\n    }\n    let used = false;\n    return {\n        abort (reason) {\n            if (aborted) {\n                return aborted.state;\n            }\n            const f = ()=>{\n                return inner.throw(reason).then((r)=>r.done === true ? \"completed\" : \"caught\", ()=>\"rethrown\");\n            };\n            if (resultPromise) {\n                aborted = {\n                    reason,\n                    state: resultPromise.then(f, f)\n                };\n                return aborted.state;\n            }\n            aborted = {\n                reason,\n                state: f()\n            };\n            return aborted.state;\n        },\n        [Symbol.asyncIterator] () {\n            if (used) {\n                throw new Error(\"AsyncIterable cannot be re-used\");\n            }\n            used = true;\n            return it;\n        }\n    };\n}\n/**\n * Create a new WritableIterable.\n */ function createWritableIterable() {\n    // We start with two queues to capture the read and write attempts.\n    //\n    // The writes and reads each check of their counterpart is\n    // already available and either interact/add themselves to the queue.\n    const readQueue = [];\n    const writeQueue = [];\n    let err = undefined;\n    let nextResolve;\n    let nextReject;\n    let nextPromise = new Promise((resolve, reject)=>{\n        nextResolve = resolve;\n        nextReject = reject;\n    });\n    let closed = false;\n    // drain the readQueue in case of error/writer is closed by sending a\n    // done result.\n    function drain() {\n        for (const next of readQueue.splice(0, readQueue.length)){\n            next({\n                done: true,\n                value: undefined\n            });\n        }\n    }\n    return {\n        close () {\n            closed = true;\n            drain();\n        },\n        async write (payload) {\n            if (closed) {\n                throw err !== null && err !== void 0 ? err : new Error(\"cannot write, WritableIterable already closed\");\n            }\n            const read = readQueue.shift();\n            if (read === undefined) {\n                // We didn't find a pending read so we add the payload to the write queue.\n                writeQueue.push(payload);\n            } else {\n                // We found a pending read so we respond with the payload.\n                read({\n                    done: false,\n                    value: payload\n                });\n                if (readQueue.length > 0) {\n                    // If there are more in the read queue we can mark the write as complete.\n                    // as the error reporting is not guaranteed to be sequential and therefore cannot\n                    // to linked to a specific write.\n                    return;\n                }\n            }\n            // We await the next call for as many times as there are items in the queue + 1\n            //\n            // If there are no items in the write queue that means write happened and we just have\n            // to wait for one more call likewise if we are the nth write in the queue we\n            // have to wait for n writes to complete and one more.\n            const limit = writeQueue.length + 1;\n            for(let i = 0; i < limit; i++){\n                await nextPromise;\n            }\n        },\n        [Symbol.asyncIterator] () {\n            return {\n                next () {\n                    // Resolve the nextPromise to indicate\n                    // pending writes that a read attempt has been made\n                    // after their write.\n                    //\n                    // We also need to reset the promise for future writes.\n                    nextResolve();\n                    nextPromise = new Promise((resolve, reject)=>{\n                        nextResolve = resolve;\n                        nextReject = reject;\n                    });\n                    const write = writeQueue.shift();\n                    if (write !== undefined) {\n                        // We found a pending write so response with the payload.\n                        return Promise.resolve({\n                            done: false,\n                            value: write\n                        });\n                    }\n                    if (closed) {\n                        return Promise.resolve({\n                            done: true,\n                            value: undefined\n                        });\n                    }\n                    // We return a promise immediately that is either resolved/rejected\n                    // as writes happen.\n                    let readResolve;\n                    const readPromise = new Promise((resolve)=>readResolve = resolve);\n                    readQueue.push(readResolve); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    return readPromise;\n                },\n                throw (throwErr) {\n                    err = throwErr;\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    nextPromise.catch(()=>{\n                    // To make sure that the nextPromise is always resolved.\n                    });\n                    // This will reject all pending writes.\n                    nextReject(err);\n                    drain();\n                    return Promise.resolve({\n                        done: true,\n                        value: undefined\n                    });\n                },\n                return () {\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    // Resolve once for the write awaiting confirmation.\n                    nextResolve();\n                    // Reject all future writes.\n                    nextPromise = Promise.reject(new Error(\"cannot write, consumer called return\"));\n                    nextPromise.catch(()=>{\n                    // To make sure that the nextPromise is always resolved.\n                    });\n                    drain();\n                    return Promise.resolve({\n                        done: true,\n                        value: undefined\n                    });\n                }\n            };\n        }\n    };\n}\n/**\n * Create an asynchronous iterable from an array.\n *\n * @private Internal code, does not follow semantic versioning.\n */ // eslint-disable-next-line @typescript-eslint/require-await\nfunction createAsyncIterable(items) {\n    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {\n        yield __await((yield* __asyncDelegator(__asyncValues(items))));\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/compression.js":
/*!***************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/compression.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressedFlag: () => (/* binding */ compressedFlag),\n/* harmony export */   compressionNegotiate: () => (/* binding */ compressionNegotiate)\n/* harmony export */ });\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * compressedFlag indicates that the data in a EnvelopedMessage is\n * compressed. It has the same meaning in the gRPC-Web, gRPC-HTTP2,\n * and Connect protocols.\n *\n * @private Internal code, does not follow semantic versioning.\n */ const compressedFlag = 1;\n/**\n * Validates the request encoding and determines the accepted response encoding.\n *\n * Returns the request and response compression to use. If the client requested\n * an encoding that is not available, the returned object contains an error that\n * must be used for the response.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function compressionNegotiate(available, requested, accepted, headerNameAcceptEncoding) {\n    let request = null;\n    let response = null;\n    let error = undefined;\n    if (requested !== null && requested !== \"identity\") {\n        const found = available.find((c)=>c.name === requested);\n        if (found) {\n            request = found;\n        } else {\n            // To comply with https://github.com/grpc/grpc/blob/master/doc/compression.md\n            // and the Connect protocol, we return code \"unimplemented\" and specify\n            // acceptable compression(s).\n            const acceptable = available.map((c)=>c.name).join(\",\");\n            error = new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`unknown compression \"${requested}\": supported encodings are ${acceptable}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Unimplemented, {\n                [headerNameAcceptEncoding]: acceptable\n            });\n        }\n    }\n    if (accepted === null || accepted === \"\") {\n        // Support asymmetric compression. This logic follows\n        // https://github.com/grpc/grpc/blob/master/doc/compression.md and common\n        // sense.\n        response = request;\n    } else {\n        const acceptNames = accepted.split(\",\").map((n)=>n.trim());\n        for (const name of acceptNames){\n            const found = available.find((c)=>c.name === name);\n            if (found) {\n                response = found;\n                break;\n            }\n        }\n    }\n    return {\n        request,\n        response,\n        error\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9jb21wcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2tCO0FBQ2pCO0FBQ2xDOzs7Ozs7Q0FNQyxHQUNNLE1BQU1FLGlCQUFpQixFQUFXO0FBQ3pDOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0MscUJBQXFCQyxTQUFTLEVBQUVDLFNBQVMsRUFDekRDLFFBQVEsRUFDUkMsd0JBQXdCO0lBQ3BCLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsUUFBUUM7SUFDWixJQUFJTixjQUFjLFFBQVFBLGNBQWMsWUFBWTtRQUNoRCxNQUFNTyxRQUFRUixVQUFVUyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsSUFBSSxLQUFLVjtRQUMvQyxJQUFJTyxPQUFPO1lBQ1BKLFVBQVVJO1FBQ2QsT0FDSztZQUNELDZFQUE2RTtZQUM3RSx1RUFBdUU7WUFDdkUsNkJBQTZCO1lBQzdCLE1BQU1JLGFBQWFaLFVBQVVhLEdBQUcsQ0FBQyxDQUFDSCxJQUFNQSxFQUFFQyxJQUFJLEVBQUVHLElBQUksQ0FBQztZQUNyRFIsUUFBUSxJQUFJViwyREFBWUEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFSyxVQUFVLDJCQUEyQixFQUFFVyxXQUFXLENBQUMsRUFBRWYsMENBQUlBLENBQUNrQixhQUFhLEVBQUU7Z0JBQ3RILENBQUNaLHlCQUF5QixFQUFFUztZQUNoQztRQUNKO0lBQ0o7SUFDQSxJQUFJVixhQUFhLFFBQVFBLGFBQWEsSUFBSTtRQUN0QyxxREFBcUQ7UUFDckQseUVBQXlFO1FBQ3pFLFNBQVM7UUFDVEcsV0FBV0Q7SUFDZixPQUNLO1FBQ0QsTUFBTVksY0FBY2QsU0FBU2UsS0FBSyxDQUFDLEtBQUtKLEdBQUcsQ0FBQyxDQUFDSyxJQUFNQSxFQUFFQyxJQUFJO1FBQ3pELEtBQUssTUFBTVIsUUFBUUssWUFBYTtZQUM1QixNQUFNUixRQUFRUixVQUFVUyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsSUFBSSxLQUFLQTtZQUMvQyxJQUFJSCxPQUFPO2dCQUNQSCxXQUFXRztnQkFDWDtZQUNKO1FBQ0o7SUFDSjtJQUNBLE9BQU87UUFBRUo7UUFBU0M7UUFBVUM7SUFBTTtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AY29ubmVjdHJwYytjb25uZWN0QDEuNy4wX0BidWZidWlsZCtwcm90b2J1ZkAxLjEwLjEvbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wvY29tcHJlc3Npb24uanM/MmQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4uL2Nvbm5lY3QtZXJyb3IuanNcIjtcbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuLyoqXG4gKiBjb21wcmVzc2VkRmxhZyBpbmRpY2F0ZXMgdGhhdCB0aGUgZGF0YSBpbiBhIEVudmVsb3BlZE1lc3NhZ2UgaXNcbiAqIGNvbXByZXNzZWQuIEl0IGhhcyB0aGUgc2FtZSBtZWFuaW5nIGluIHRoZSBnUlBDLVdlYiwgZ1JQQy1IVFRQMixcbiAqIGFuZCBDb25uZWN0IHByb3RvY29scy5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXByZXNzZWRGbGFnID0gMGIwMDAwMDAwMTtcbi8qKlxuICogVmFsaWRhdGVzIHRoZSByZXF1ZXN0IGVuY29kaW5nIGFuZCBkZXRlcm1pbmVzIHRoZSBhY2NlcHRlZCByZXNwb25zZSBlbmNvZGluZy5cbiAqXG4gKiBSZXR1cm5zIHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZSBjb21wcmVzc2lvbiB0byB1c2UuIElmIHRoZSBjbGllbnQgcmVxdWVzdGVkXG4gKiBhbiBlbmNvZGluZyB0aGF0IGlzIG5vdCBhdmFpbGFibGUsIHRoZSByZXR1cm5lZCBvYmplY3QgY29udGFpbnMgYW4gZXJyb3IgdGhhdFxuICogbXVzdCBiZSB1c2VkIGZvciB0aGUgcmVzcG9uc2UuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wcmVzc2lvbk5lZ290aWF0ZShhdmFpbGFibGUsIHJlcXVlc3RlZCwgLy8gZS5nLiB0aGUgdmFsdWUgb2YgdGhlIEdycGMtRW5jb2RpbmcgaGVhZGVyXG5hY2NlcHRlZCwgLy8gZS5nLiB0aGUgdmFsdWUgb2YgdGhlIEdycGMtQWNjZXB0LUVuY29kaW5nIGhlYWRlclxuaGVhZGVyTmFtZUFjY2VwdEVuY29kaW5nKSB7XG4gICAgbGV0IHJlcXVlc3QgPSBudWxsO1xuICAgIGxldCByZXNwb25zZSA9IG51bGw7XG4gICAgbGV0IGVycm9yID0gdW5kZWZpbmVkO1xuICAgIGlmIChyZXF1ZXN0ZWQgIT09IG51bGwgJiYgcmVxdWVzdGVkICE9PSBcImlkZW50aXR5XCIpIHtcbiAgICAgICAgY29uc3QgZm91bmQgPSBhdmFpbGFibGUuZmluZCgoYykgPT4gYy5uYW1lID09PSByZXF1ZXN0ZWQpO1xuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBmb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRvIGNvbXBseSB3aXRoIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvZG9jL2NvbXByZXNzaW9uLm1kXG4gICAgICAgICAgICAvLyBhbmQgdGhlIENvbm5lY3QgcHJvdG9jb2wsIHdlIHJldHVybiBjb2RlIFwidW5pbXBsZW1lbnRlZFwiIGFuZCBzcGVjaWZ5XG4gICAgICAgICAgICAvLyBhY2NlcHRhYmxlIGNvbXByZXNzaW9uKHMpLlxuICAgICAgICAgICAgY29uc3QgYWNjZXB0YWJsZSA9IGF2YWlsYWJsZS5tYXAoKGMpID0+IGMubmFtZSkuam9pbihcIixcIik7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBDb25uZWN0RXJyb3IoYHVua25vd24gY29tcHJlc3Npb24gXCIke3JlcXVlc3RlZH1cIjogc3VwcG9ydGVkIGVuY29kaW5ncyBhcmUgJHthY2NlcHRhYmxlfWAsIENvZGUuVW5pbXBsZW1lbnRlZCwge1xuICAgICAgICAgICAgICAgIFtoZWFkZXJOYW1lQWNjZXB0RW5jb2RpbmddOiBhY2NlcHRhYmxlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFjY2VwdGVkID09PSBudWxsIHx8IGFjY2VwdGVkID09PSBcIlwiKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgYXN5bW1ldHJpYyBjb21wcmVzc2lvbi4gVGhpcyBsb2dpYyBmb2xsb3dzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvZG9jL2NvbXByZXNzaW9uLm1kIGFuZCBjb21tb25cbiAgICAgICAgLy8gc2Vuc2UuXG4gICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGFjY2VwdE5hbWVzID0gYWNjZXB0ZWQuc3BsaXQoXCIsXCIpLm1hcCgobikgPT4gbi50cmltKCkpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYWNjZXB0TmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gYXZhaWxhYmxlLmZpbmQoKGMpID0+IGMubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvdW5kO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHJlcXVlc3QsIHJlc3BvbnNlLCBlcnJvciB9O1xufVxuIl0sIm5hbWVzIjpbIkNvbm5lY3RFcnJvciIsIkNvZGUiLCJjb21wcmVzc2VkRmxhZyIsImNvbXByZXNzaW9uTmVnb3RpYXRlIiwiYXZhaWxhYmxlIiwicmVxdWVzdGVkIiwiYWNjZXB0ZWQiLCJoZWFkZXJOYW1lQWNjZXB0RW5jb2RpbmciLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJlcnJvciIsInVuZGVmaW5lZCIsImZvdW5kIiwiZmluZCIsImMiLCJuYW1lIiwiYWNjZXB0YWJsZSIsIm1hcCIsImpvaW4iLCJVbmltcGxlbWVudGVkIiwiYWNjZXB0TmFtZXMiLCJzcGxpdCIsIm4iLCJ0cmltIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/create-method-url.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/create-method-url.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMethodUrl: () => (/* binding */ createMethodUrl)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a URL for the given RPC. This simply adds the qualified\n * service name, a slash, and the method name to the path of the given\n * baseUrl.\n *\n * For example, the baseUri https://example.com and method \"Say\" from\n * the service example.ElizaService results in:\n * https://example.com/example.ElizaService/Say\n *\n * This format is used by the protocols Connect, gRPC and Twirp.\n *\n * Note that this function also accepts a protocol-relative baseUrl.\n * If given an empty string or \"/\" as a baseUrl, it returns just the\n * path.\n */ function createMethodUrl(baseUrl, service, method) {\n    const s = typeof service == \"string\" ? service : service.typeName;\n    const m = typeof method == \"string\" ? method : method.name;\n    return baseUrl.toString().replace(/\\/?$/, `/${s}/${m}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9jcmVhdGUtbWV0aG9kLXVybC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ00sU0FBU0EsZ0JBQWdCQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTTtJQUNwRCxNQUFNQyxJQUFJLE9BQU9GLFdBQVcsV0FBV0EsVUFBVUEsUUFBUUcsUUFBUTtJQUNqRSxNQUFNQyxJQUFJLE9BQU9ILFVBQVUsV0FBV0EsU0FBU0EsT0FBT0ksSUFBSTtJQUMxRCxPQUFPTixRQUFRTyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFTCxFQUFFLENBQUMsRUFBRUUsRUFBRSxDQUFDO0FBQzFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9jcmVhdGUtbWV0aG9kLXVybC5qcz9hOTUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIENyZWF0ZSBhIFVSTCBmb3IgdGhlIGdpdmVuIFJQQy4gVGhpcyBzaW1wbHkgYWRkcyB0aGUgcXVhbGlmaWVkXG4gKiBzZXJ2aWNlIG5hbWUsIGEgc2xhc2gsIGFuZCB0aGUgbWV0aG9kIG5hbWUgdG8gdGhlIHBhdGggb2YgdGhlIGdpdmVuXG4gKiBiYXNlVXJsLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGUgYmFzZVVyaSBodHRwczovL2V4YW1wbGUuY29tIGFuZCBtZXRob2QgXCJTYXlcIiBmcm9tXG4gKiB0aGUgc2VydmljZSBleGFtcGxlLkVsaXphU2VydmljZSByZXN1bHRzIGluOlxuICogaHR0cHM6Ly9leGFtcGxlLmNvbS9leGFtcGxlLkVsaXphU2VydmljZS9TYXlcbiAqXG4gKiBUaGlzIGZvcm1hdCBpcyB1c2VkIGJ5IHRoZSBwcm90b2NvbHMgQ29ubmVjdCwgZ1JQQyBhbmQgVHdpcnAuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gYWxzbyBhY2NlcHRzIGEgcHJvdG9jb2wtcmVsYXRpdmUgYmFzZVVybC5cbiAqIElmIGdpdmVuIGFuIGVtcHR5IHN0cmluZyBvciBcIi9cIiBhcyBhIGJhc2VVcmwsIGl0IHJldHVybnMganVzdCB0aGVcbiAqIHBhdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXRob2RVcmwoYmFzZVVybCwgc2VydmljZSwgbWV0aG9kKSB7XG4gICAgY29uc3QgcyA9IHR5cGVvZiBzZXJ2aWNlID09IFwic3RyaW5nXCIgPyBzZXJ2aWNlIDogc2VydmljZS50eXBlTmFtZTtcbiAgICBjb25zdCBtID0gdHlwZW9mIG1ldGhvZCA9PSBcInN0cmluZ1wiID8gbWV0aG9kIDogbWV0aG9kLm5hbWU7XG4gICAgcmV0dXJuIGJhc2VVcmwudG9TdHJpbmcoKS5yZXBsYWNlKC9cXC8/JC8sIGAvJHtzfS8ke219YCk7XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlTWV0aG9kVXJsIiwiYmFzZVVybCIsInNlcnZpY2UiLCJtZXRob2QiLCJzIiwidHlwZU5hbWUiLCJtIiwibmFtZSIsInRvU3RyaW5nIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/create-method-url.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js":
/*!************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEnvelopeReadableStream: () => (/* binding */ createEnvelopeReadableStream),\n/* harmony export */   encodeEnvelope: () => (/* binding */ encodeEnvelope),\n/* harmony export */   encodeEnvelopes: () => (/* binding */ encodeEnvelopes),\n/* harmony export */   envelopeCompress: () => (/* binding */ envelopeCompress),\n/* harmony export */   envelopeDecompress: () => (/* binding */ envelopeDecompress)\n/* harmony export */ });\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _compression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compression.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/compression.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream\n * of bytes.\n *\n * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough\n * does not have the necessary availability at this time.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createEnvelopeReadableStream(stream) {\n    let reader;\n    let buffer = new Uint8Array(0);\n    function append(chunk) {\n        const n = new Uint8Array(buffer.length + chunk.length);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        buffer = n;\n    }\n    return new ReadableStream({\n        start () {\n            reader = stream.getReader();\n        },\n        async pull (controller) {\n            let header = undefined;\n            for(;;){\n                if (header === undefined && buffer.byteLength >= 5) {\n                    let length = 0;\n                    for(let i = 1; i < 5; i++){\n                        length = (length << 8) + buffer[i];\n                    }\n                    header = {\n                        flags: buffer[0],\n                        length\n                    };\n                }\n                if (header !== undefined && buffer.byteLength >= header.length + 5) {\n                    break;\n                }\n                const result = await reader.read();\n                if (result.done) {\n                    break;\n                }\n                append(result.value);\n            }\n            if (header === undefined) {\n                if (buffer.byteLength == 0) {\n                    controller.close();\n                    return;\n                }\n                controller.error(new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"premature end of stream\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.DataLoss));\n                return;\n            }\n            const data = buffer.subarray(5, 5 + header.length);\n            buffer = buffer.subarray(5 + header.length);\n            controller.enqueue({\n                flags: header.flags,\n                data\n            });\n        }\n    });\n}\n/**\n * Compress an EnvelopedMessage.\n *\n * Raises Internal if an enveloped message is already compressed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ async function envelopeCompress(envelope, compression, compressMinBytes) {\n    let { flags, data } = envelope;\n    if ((flags & _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag) === _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"invalid envelope, already compressed\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Internal);\n    }\n    if (compression && data.byteLength >= compressMinBytes) {\n        data = await compression.compress(data);\n        flags = flags | _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag;\n    }\n    return {\n        data,\n        flags\n    };\n}\n/**\n * Decompress an EnvelopedMessage.\n *\n * Raises InvalidArgument if an envelope is compressed, but compression is null.\n *\n * Relies on the provided Compression to raise ResourceExhausted if the\n * *decompressed* message size is larger than readMaxBytes. If the envelope is\n * not compressed, readMaxBytes is not honored.\n *\n * @private Internal code, does not follow semantic versioning.\n */ async function envelopeDecompress(envelope, compression, readMaxBytes) {\n    let { flags, data } = envelope;\n    if ((flags & _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag) === _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag) {\n        if (!compression) {\n            throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"received compressed envelope, but do not know how to decompress\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Internal);\n        }\n        data = await compression.decompress(data, readMaxBytes);\n        flags = flags ^ _compression_js__WEBPACK_IMPORTED_MODULE_2__.compressedFlag;\n    }\n    return {\n        data,\n        flags\n    };\n}\n/**\n * Encode a single enveloped message.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function encodeEnvelope(flags, data) {\n    const bytes = new Uint8Array(data.length + 5);\n    bytes.set(data, 5);\n    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    v.setUint8(0, flags); // first byte is flags\n    v.setUint32(1, data.length); // 4 bytes message length\n    return bytes;\n}\n/**\n * Encode a set of enveloped messages.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function encodeEnvelopes(...envelopes) {\n    const len = envelopes.reduce((previousValue, currentValue)=>previousValue + currentValue.data.length + 5, 0);\n    const bytes = new Uint8Array(len);\n    const v = new DataView(bytes.buffer);\n    let offset = 0;\n    for (const e of envelopes){\n        v.setUint8(offset, e.flags); // first byte is flags\n        v.setUint32(offset + 1, e.data.length); // 4 bytes message length\n        bytes.set(e.data, offset + 5);\n        offset += e.data.length + 5;\n    }\n    return bytes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/limit-io.js":
/*!************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/limit-io.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertReadMaxBytes: () => (/* binding */ assertReadMaxBytes),\n/* harmony export */   assertWriteMaxBytes: () => (/* binding */ assertWriteMaxBytes),\n/* harmony export */   validateReadWriteMaxBytes: () => (/* binding */ validateReadWriteMaxBytes)\n/* harmony export */ });\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * At most, allow ~4GiB to be received or sent per message.\n * zlib used by Node.js caps maxOutputLength at this value. It also happens to\n * be the maximum theoretical message size supported by protobuf-es.\n */ const maxReadMaxBytes = 0xffffffff;\nconst maxWriteMaxBytes = maxReadMaxBytes;\n/**\n * The default value for the compressMinBytes option. The CPU cost of compressing\n * very small messages usually isn't worth the small reduction in network I/O, so\n * the default value is 1 kibibyte.\n */ const defaultCompressMinBytes = 1024;\n/**\n * Asserts that the options writeMaxBytes, readMaxBytes, and compressMinBytes\n * are within sane limits, and returns default values where no value is\n * provided.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function validateReadWriteMaxBytes(readMaxBytes, writeMaxBytes, compressMinBytes) {\n    writeMaxBytes !== null && writeMaxBytes !== void 0 ? writeMaxBytes : writeMaxBytes = maxWriteMaxBytes;\n    readMaxBytes !== null && readMaxBytes !== void 0 ? readMaxBytes : readMaxBytes = maxReadMaxBytes;\n    compressMinBytes !== null && compressMinBytes !== void 0 ? compressMinBytes : compressMinBytes = defaultCompressMinBytes;\n    if (writeMaxBytes < 1 || writeMaxBytes > maxWriteMaxBytes) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`writeMaxBytes ${writeMaxBytes} must be >= 1 and <= ${maxWriteMaxBytes}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Internal);\n    }\n    if (readMaxBytes < 1 || readMaxBytes > maxReadMaxBytes) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`readMaxBytes ${readMaxBytes} must be >= 1 and <= ${maxReadMaxBytes}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.Internal);\n    }\n    return {\n        readMaxBytes,\n        writeMaxBytes,\n        compressMinBytes\n    };\n}\n/**\n * Raise an error ResourceExhausted if more than writeMaxByte are written.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function assertWriteMaxBytes(writeMaxBytes, bytesWritten) {\n    if (bytesWritten > writeMaxBytes) {\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(`message size ${bytesWritten} is larger than configured writeMaxBytes ${writeMaxBytes}`, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.ResourceExhausted);\n    }\n}\n/**\n * Raise an error ResourceExhausted if more than readMaxBytes are read.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function assertReadMaxBytes(readMaxBytes, bytesRead, totalSizeKnown = false) {\n    if (bytesRead > readMaxBytes) {\n        let message = `message size is larger than configured readMaxBytes ${readMaxBytes}`;\n        if (totalSizeKnown) {\n            message = `message size ${bytesRead} is larger than configured readMaxBytes ${readMaxBytes}`;\n        }\n        throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(message, _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.ResourceExhausted);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9saW1pdC1pby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNrQjtBQUNqQjtBQUNsQzs7OztDQUlDLEdBQ0QsTUFBTUUsa0JBQWtCO0FBQ3hCLE1BQU1DLG1CQUFtQkQ7QUFDekI7Ozs7Q0FJQyxHQUNELE1BQU1FLDBCQUEwQjtBQUNoQzs7Ozs7O0NBTUMsR0FDTSxTQUFTQywwQkFBMEJDLFlBQVksRUFBRUMsYUFBYSxFQUFFQyxnQkFBZ0I7SUFDbkZELGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJQSxnQkFBaUJBLGdCQUFnQko7SUFDdEZHLGlCQUFpQixRQUFRQSxpQkFBaUIsS0FBSyxJQUFJQSxlQUFnQkEsZUFBZUo7SUFDbEZNLHFCQUFxQixRQUFRQSxxQkFBcUIsS0FBSyxJQUFJQSxtQkFBb0JBLG1CQUFtQko7SUFDbEcsSUFBSUcsZ0JBQWdCLEtBQUtBLGdCQUFnQkosa0JBQWtCO1FBQ3ZELE1BQU0sSUFBSUgsMkRBQVlBLENBQUMsQ0FBQyxjQUFjLEVBQUVPLGNBQWMscUJBQXFCLEVBQUVKLGlCQUFpQixDQUFDLEVBQUVGLDBDQUFJQSxDQUFDUSxRQUFRO0lBQ2xIO0lBQ0EsSUFBSUgsZUFBZSxLQUFLQSxlQUFlSixpQkFBaUI7UUFDcEQsTUFBTSxJQUFJRiwyREFBWUEsQ0FBQyxDQUFDLGFBQWEsRUFBRU0sYUFBYSxxQkFBcUIsRUFBRUosZ0JBQWdCLENBQUMsRUFBRUQsMENBQUlBLENBQUNRLFFBQVE7SUFDL0c7SUFDQSxPQUFPO1FBQ0hIO1FBQ0FDO1FBQ0FDO0lBQ0o7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTRSxvQkFBb0JILGFBQWEsRUFBRUksWUFBWTtJQUMzRCxJQUFJQSxlQUFlSixlQUFlO1FBQzlCLE1BQU0sSUFBSVAsMkRBQVlBLENBQUMsQ0FBQyxhQUFhLEVBQUVXLGFBQWEseUNBQXlDLEVBQUVKLGNBQWMsQ0FBQyxFQUFFTiwwQ0FBSUEsQ0FBQ1csaUJBQWlCO0lBQzFJO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ00sU0FBU0MsbUJBQW1CUCxZQUFZLEVBQUVRLFNBQVMsRUFBRUMsaUJBQWlCLEtBQUs7SUFDOUUsSUFBSUQsWUFBWVIsY0FBYztRQUMxQixJQUFJVSxVQUFVLENBQUMsb0RBQW9ELEVBQUVWLGFBQWEsQ0FBQztRQUNuRixJQUFJUyxnQkFBZ0I7WUFDaEJDLFVBQVUsQ0FBQyxhQUFhLEVBQUVGLFVBQVUsd0NBQXdDLEVBQUVSLGFBQWEsQ0FBQztRQUNoRztRQUNBLE1BQU0sSUFBSU4sMkRBQVlBLENBQUNnQixTQUFTZiwwQ0FBSUEsQ0FBQ1csaUJBQWlCO0lBQzFEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL2xpbWl0LWlvLmpzPzJhOTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IENvbm5lY3RFcnJvciB9IGZyb20gXCIuLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbi8qKlxuICogQXQgbW9zdCwgYWxsb3cgfjRHaUIgdG8gYmUgcmVjZWl2ZWQgb3Igc2VudCBwZXIgbWVzc2FnZS5cbiAqIHpsaWIgdXNlZCBieSBOb2RlLmpzIGNhcHMgbWF4T3V0cHV0TGVuZ3RoIGF0IHRoaXMgdmFsdWUuIEl0IGFsc28gaGFwcGVucyB0b1xuICogYmUgdGhlIG1heGltdW0gdGhlb3JldGljYWwgbWVzc2FnZSBzaXplIHN1cHBvcnRlZCBieSBwcm90b2J1Zi1lcy5cbiAqL1xuY29uc3QgbWF4UmVhZE1heEJ5dGVzID0gMHhmZmZmZmZmZjtcbmNvbnN0IG1heFdyaXRlTWF4Qnl0ZXMgPSBtYXhSZWFkTWF4Qnl0ZXM7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgY29tcHJlc3NNaW5CeXRlcyBvcHRpb24uIFRoZSBDUFUgY29zdCBvZiBjb21wcmVzc2luZ1xuICogdmVyeSBzbWFsbCBtZXNzYWdlcyB1c3VhbGx5IGlzbid0IHdvcnRoIHRoZSBzbWFsbCByZWR1Y3Rpb24gaW4gbmV0d29yayBJL08sIHNvXG4gKiB0aGUgZGVmYXVsdCB2YWx1ZSBpcyAxIGtpYmlieXRlLlxuICovXG5jb25zdCBkZWZhdWx0Q29tcHJlc3NNaW5CeXRlcyA9IDEwMjQ7XG4vKipcbiAqIEFzc2VydHMgdGhhdCB0aGUgb3B0aW9ucyB3cml0ZU1heEJ5dGVzLCByZWFkTWF4Qnl0ZXMsIGFuZCBjb21wcmVzc01pbkJ5dGVzXG4gKiBhcmUgd2l0aGluIHNhbmUgbGltaXRzLCBhbmQgcmV0dXJucyBkZWZhdWx0IHZhbHVlcyB3aGVyZSBubyB2YWx1ZSBpc1xuICogcHJvdmlkZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJlYWRXcml0ZU1heEJ5dGVzKHJlYWRNYXhCeXRlcywgd3JpdGVNYXhCeXRlcywgY29tcHJlc3NNaW5CeXRlcykge1xuICAgIHdyaXRlTWF4Qnl0ZXMgIT09IG51bGwgJiYgd3JpdGVNYXhCeXRlcyAhPT0gdm9pZCAwID8gd3JpdGVNYXhCeXRlcyA6ICh3cml0ZU1heEJ5dGVzID0gbWF4V3JpdGVNYXhCeXRlcyk7XG4gICAgcmVhZE1heEJ5dGVzICE9PSBudWxsICYmIHJlYWRNYXhCeXRlcyAhPT0gdm9pZCAwID8gcmVhZE1heEJ5dGVzIDogKHJlYWRNYXhCeXRlcyA9IG1heFJlYWRNYXhCeXRlcyk7XG4gICAgY29tcHJlc3NNaW5CeXRlcyAhPT0gbnVsbCAmJiBjb21wcmVzc01pbkJ5dGVzICE9PSB2b2lkIDAgPyBjb21wcmVzc01pbkJ5dGVzIDogKGNvbXByZXNzTWluQnl0ZXMgPSBkZWZhdWx0Q29tcHJlc3NNaW5CeXRlcyk7XG4gICAgaWYgKHdyaXRlTWF4Qnl0ZXMgPCAxIHx8IHdyaXRlTWF4Qnl0ZXMgPiBtYXhXcml0ZU1heEJ5dGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYHdyaXRlTWF4Qnl0ZXMgJHt3cml0ZU1heEJ5dGVzfSBtdXN0IGJlID49IDEgYW5kIDw9ICR7bWF4V3JpdGVNYXhCeXRlc31gLCBDb2RlLkludGVybmFsKTtcbiAgICB9XG4gICAgaWYgKHJlYWRNYXhCeXRlcyA8IDEgfHwgcmVhZE1heEJ5dGVzID4gbWF4UmVhZE1heEJ5dGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYHJlYWRNYXhCeXRlcyAke3JlYWRNYXhCeXRlc30gbXVzdCBiZSA+PSAxIGFuZCA8PSAke21heFJlYWRNYXhCeXRlc31gLCBDb2RlLkludGVybmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVhZE1heEJ5dGVzLFxuICAgICAgICB3cml0ZU1heEJ5dGVzLFxuICAgICAgICBjb21wcmVzc01pbkJ5dGVzLFxuICAgIH07XG59XG4vKipcbiAqIFJhaXNlIGFuIGVycm9yIFJlc291cmNlRXhoYXVzdGVkIGlmIG1vcmUgdGhhbiB3cml0ZU1heEJ5dGUgYXJlIHdyaXR0ZW4uXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRXcml0ZU1heEJ5dGVzKHdyaXRlTWF4Qnl0ZXMsIGJ5dGVzV3JpdHRlbikge1xuICAgIGlmIChieXRlc1dyaXR0ZW4gPiB3cml0ZU1heEJ5dGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYG1lc3NhZ2Ugc2l6ZSAke2J5dGVzV3JpdHRlbn0gaXMgbGFyZ2VyIHRoYW4gY29uZmlndXJlZCB3cml0ZU1heEJ5dGVzICR7d3JpdGVNYXhCeXRlc31gLCBDb2RlLlJlc291cmNlRXhoYXVzdGVkKTtcbiAgICB9XG59XG4vKipcbiAqIFJhaXNlIGFuIGVycm9yIFJlc291cmNlRXhoYXVzdGVkIGlmIG1vcmUgdGhhbiByZWFkTWF4Qnl0ZXMgYXJlIHJlYWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRSZWFkTWF4Qnl0ZXMocmVhZE1heEJ5dGVzLCBieXRlc1JlYWQsIHRvdGFsU2l6ZUtub3duID0gZmFsc2UpIHtcbiAgICBpZiAoYnl0ZXNSZWFkID4gcmVhZE1heEJ5dGVzKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gYG1lc3NhZ2Ugc2l6ZSBpcyBsYXJnZXIgdGhhbiBjb25maWd1cmVkIHJlYWRNYXhCeXRlcyAke3JlYWRNYXhCeXRlc31gO1xuICAgICAgICBpZiAodG90YWxTaXplS25vd24pIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgbWVzc2FnZSBzaXplICR7Ynl0ZXNSZWFkfSBpcyBsYXJnZXIgdGhhbiBjb25maWd1cmVkIHJlYWRNYXhCeXRlcyAke3JlYWRNYXhCeXRlc31gO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IobWVzc2FnZSwgQ29kZS5SZXNvdXJjZUV4aGF1c3RlZCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNvbm5lY3RFcnJvciIsIkNvZGUiLCJtYXhSZWFkTWF4Qnl0ZXMiLCJtYXhXcml0ZU1heEJ5dGVzIiwiZGVmYXVsdENvbXByZXNzTWluQnl0ZXMiLCJ2YWxpZGF0ZVJlYWRXcml0ZU1heEJ5dGVzIiwicmVhZE1heEJ5dGVzIiwid3JpdGVNYXhCeXRlcyIsImNvbXByZXNzTWluQnl0ZXMiLCJJbnRlcm5hbCIsImFzc2VydFdyaXRlTWF4Qnl0ZXMiLCJieXRlc1dyaXR0ZW4iLCJSZXNvdXJjZUV4aGF1c3RlZCIsImFzc2VydFJlYWRNYXhCeXRlcyIsImJ5dGVzUmVhZCIsInRvdGFsU2l6ZUtub3duIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/limit-io.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeIterable: () => (/* binding */ normalizeIterable)\n/* harmony export */ });\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n *  Takes a partial protobuf messages of the\n *  specified message type as input, and returns full instances.\n */ function normalize(type, message) {\n    return message instanceof type ? message : new type(message);\n}\n/**\n * Takes an AsyncIterable of partial protobuf messages of the\n * specified message type as input, and yields full instances.\n */ function normalizeIterable(messageType, input) {\n    function transform(result) {\n        if (result.done === true) {\n            return result;\n        }\n        return {\n            done: result.done,\n            value: normalize(messageType, result.value)\n        };\n    }\n    return {\n        [Symbol.asyncIterator] () {\n            const it = input[Symbol.asyncIterator]();\n            const res = {\n                next: ()=>it.next().then(transform)\n            };\n            if (it.throw !== undefined) {\n                res.throw = (e)=>it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            if (it.return !== undefined) {\n                res.return = (v)=>it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            return res;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9ub3JtYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDWTtBQUM3Qzs7O0NBR0MsR0FDTSxTQUFTQyxVQUFVQyxJQUFJLEVBQUVDLE9BQU87SUFDbkMsT0FBT0EsbUJBQW1CRCxPQUNwQkMsVUFDQSxJQUFJRCxLQUFLQztBQUNuQjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDLGtCQUFrQkMsV0FBVyxFQUFFQyxLQUFLO0lBQ2hELFNBQVNDLFVBQVVDLE1BQU07UUFDckIsSUFBSUEsT0FBT0MsSUFBSSxLQUFLLE1BQU07WUFDdEIsT0FBT0Q7UUFDWDtRQUNBLE9BQU87WUFDSEMsTUFBTUQsT0FBT0MsSUFBSTtZQUNqQkMsT0FBT1QsVUFBVUksYUFBYUcsT0FBT0UsS0FBSztRQUM5QztJQUNKO0lBQ0EsT0FBTztRQUNILENBQUNDLE9BQU9DLGFBQWEsQ0FBQztZQUNsQixNQUFNQyxLQUFLUCxLQUFLLENBQUNLLE9BQU9DLGFBQWEsQ0FBQztZQUN0QyxNQUFNRSxNQUFNO2dCQUNSQyxNQUFNLElBQU1GLEdBQUdFLElBQUksR0FBR0MsSUFBSSxDQUFDVDtZQUMvQjtZQUNBLElBQUlNLEdBQUdJLEtBQUssS0FBS0MsV0FBVztnQkFDeEJKLElBQUlHLEtBQUssR0FBRyxDQUFDRSxJQUFNTixHQUFHSSxLQUFLLENBQUNFLEdBQUdILElBQUksQ0FBQ1QsWUFBWSwrREFBK0Q7WUFDbkg7WUFDQSxJQUFJTSxHQUFHTyxNQUFNLEtBQUtGLFdBQVc7Z0JBQ3pCSixJQUFJTSxNQUFNLEdBQUcsQ0FBQ0MsSUFBTVIsR0FBR08sTUFBTSxDQUFDQyxHQUFHTCxJQUFJLENBQUNULFlBQVksK0RBQStEO1lBQ3JIO1lBQ0EsT0FBT087UUFDWDtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL25vcm1hbGl6ZS5qcz9hZmIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuLyoqXG4gKiAgVGFrZXMgYSBwYXJ0aWFsIHByb3RvYnVmIG1lc3NhZ2VzIG9mIHRoZVxuICogIHNwZWNpZmllZCBtZXNzYWdlIHR5cGUgYXMgaW5wdXQsIGFuZCByZXR1cm5zIGZ1bGwgaW5zdGFuY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHR5cGUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZSBpbnN0YW5jZW9mIHR5cGVcbiAgICAgICAgPyBtZXNzYWdlXG4gICAgICAgIDogbmV3IHR5cGUobWVzc2FnZSk7XG59XG4vKipcbiAqIFRha2VzIGFuIEFzeW5jSXRlcmFibGUgb2YgcGFydGlhbCBwcm90b2J1ZiBtZXNzYWdlcyBvZiB0aGVcbiAqIHNwZWNpZmllZCBtZXNzYWdlIHR5cGUgYXMgaW5wdXQsIGFuZCB5aWVsZHMgZnVsbCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVJdGVyYWJsZShtZXNzYWdlVHlwZSwgaW5wdXQpIHtcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogcmVzdWx0LmRvbmUsXG4gICAgICAgICAgICB2YWx1ZTogbm9ybWFsaXplKG1lc3NhZ2VUeXBlLCByZXN1bHQudmFsdWUpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgY29uc3QgaXQgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAoKSA9PiBpdC5uZXh0KCkudGhlbih0cmFuc2Zvcm0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpdC50aHJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzLnRocm93ID0gKGUpID0+IGl0LnRocm93KGUpLnRoZW4odHJhbnNmb3JtKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXQucmV0dXJuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXMucmV0dXJuID0gKHYpID0+IGl0LnJldHVybih2KS50aGVuKHRyYW5zZm9ybSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbIk1lc3NhZ2UiLCJub3JtYWxpemUiLCJ0eXBlIiwibWVzc2FnZSIsIm5vcm1hbGl6ZUl0ZXJhYmxlIiwibWVzc2FnZVR5cGUiLCJpbnB1dCIsInRyYW5zZm9ybSIsInJlc3VsdCIsImRvbmUiLCJ2YWx1ZSIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJpdCIsInJlcyIsIm5leHQiLCJ0aGVuIiwidGhyb3ciLCJ1bmRlZmluZWQiLCJlIiwicmV0dXJuIiwidiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/run-call.js":
/*!************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/run-call.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   runStreamingCall: () => (/* binding */ runStreamingCall),\n/* harmony export */   runUnaryCall: () => (/* binding */ runUnaryCall)\n/* harmony export */ });\n/* harmony import */ var _interceptor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interceptor.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/interceptor.js\");\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _signals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signals.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/signals.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalize.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n/**\n * Runs a unary method with the given interceptors. Note that this function\n * is only used when implementing a Transport.\n */ function runUnaryCall(opt) {\n    const next = (0,_interceptor_js__WEBPACK_IMPORTED_MODULE_0__.applyInterceptors)(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), {\n        message: (0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(opt.req.method.I, opt.req.message),\n        signal\n    });\n    return next(req).then((res)=>{\n        done();\n        return res;\n    }, abort);\n}\n/**\n * Runs a server-streaming method with the given interceptors. Note that this\n * function is only used when implementing a Transport.\n */ function runStreamingCall(opt) {\n    const next = (0,_interceptor_js__WEBPACK_IMPORTED_MODULE_0__.applyInterceptors)(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), {\n        message: (0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalizeIterable)(opt.req.method.I, opt.req.message),\n        signal\n    });\n    let doneCalled = false;\n    // Call return on the request iterable to indicate\n    // that we will no longer consume it and it should\n    // cleanup any allocated resources.\n    signal.addEventListener(\"abort\", function() {\n        var _a, _b;\n        const it = opt.req.message[Symbol.asyncIterator]();\n        // If the signal is aborted due to an error, we want to throw\n        // the error to the request iterator.\n        if (!doneCalled) {\n            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(()=>{\n            // throw returns a promise, which we don't care about.\n            //\n            // Uncaught promises are thrown at sometime/somewhere by the event loop,\n            // this is to ensure error is caught and ignored.\n            });\n        }\n        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(()=>{\n        // return returns a promise, which we don't care about.\n        //\n        // Uncaught promises are thrown at sometime/somewhere by the event loop,\n        // this is to ensure error is caught and ignored.\n        });\n    });\n    return next(req).then((res)=>{\n        return Object.assign(Object.assign({}, res), {\n            message: {\n                [Symbol.asyncIterator] () {\n                    const it = res.message[Symbol.asyncIterator]();\n                    return {\n                        next () {\n                            return it.next().then((r)=>{\n                                if (r.done == true) {\n                                    doneCalled = true;\n                                    done();\n                                }\n                                return r;\n                            }, abort);\n                        }\n                    };\n                }\n            }\n        });\n    }, abort);\n}\n/**\n * Create an AbortSignal for Transport implementations. The signal is available\n * in UnaryRequest and StreamingRequest, and is triggered when the call is\n * aborted (via a timeout or explicit cancellation), errored (e.g. when reading\n * an error from the server from the wire), or finished successfully.\n *\n * Transport implementations can pass the signal to HTTP clients to ensure that\n * there are no unused connections leak.\n *\n * Returns a tuple:\n * [0]: The signal, which is also aborted if the optional deadline is reached.\n * [1]: Function to call if the Transport encountered an error.\n * [2]: Function to call if the Transport finished without an error.\n */ function setupSignal(opt) {\n    const { signal, cleanup } = (0,_signals_js__WEBPACK_IMPORTED_MODULE_2__.createDeadlineSignal)(opt.timeoutMs);\n    const controller = (0,_signals_js__WEBPACK_IMPORTED_MODULE_2__.createLinkedAbortController)(opt.signal, signal);\n    return [\n        controller.signal,\n        function abort(reason) {\n            // We peek at the deadline signal because fetch() will throw an error on\n            // abort that discards the signal reason.\n            const e = _connect_error_js__WEBPACK_IMPORTED_MODULE_3__.ConnectError.from(signal.aborted ? (0,_signals_js__WEBPACK_IMPORTED_MODULE_2__.getAbortSignalReason)(signal) : reason);\n            controller.abort(e);\n            cleanup();\n            return Promise.reject(e);\n        },\n        function done() {\n            cleanup();\n            controller.abort();\n        }\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/run-call.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/serialization.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/serialization.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBinarySerialization: () => (/* binding */ createBinarySerialization),\n/* harmony export */   createClientMethodSerializers: () => (/* binding */ createClientMethodSerializers),\n/* harmony export */   createJsonSerialization: () => (/* binding */ createJsonSerialization),\n/* harmony export */   createMethodSerializationLookup: () => (/* binding */ createMethodSerializationLookup),\n/* harmony export */   getJsonOptions: () => (/* binding */ getJsonOptions),\n/* harmony export */   limitSerialization: () => (/* binding */ limitSerialization)\n/* harmony export */ });\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n/* harmony import */ var _limit_io_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./limit-io.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/limit-io.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * Sets default JSON serialization options for connect-es.\n *\n * With standard protobuf JSON serialization, unknown JSON fields are\n * rejected by default. In connect-es, unknown JSON fields are ignored\n * by default.\n */ function getJsonOptions(options) {\n    var _a;\n    const o = Object.assign({}, options);\n    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : o.ignoreUnknownFields = true;\n    return o;\n}\n/**\n * Create an object that provides convenient access to request and response\n * message serialization for a given method.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {\n    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);\n    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);\n    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);\n    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);\n    return {\n        getI (useBinaryFormat) {\n            return useBinaryFormat ? inputBinary : inputJson;\n        },\n        getO (useBinaryFormat) {\n            return useBinaryFormat ? outputBinary : outputJson;\n        }\n    };\n}\n/**\n * Returns functions to normalize and serialize the input message\n * of an RPC, and to parse the output message of an RPC.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {\n    const input = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);\n    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);\n    return {\n        parse: output.parse,\n        serialize: input.serialize\n    };\n}\n/**\n * Apply I/O limits to a Serialization object, returning a new object.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function limitSerialization(serialization, limitOptions) {\n    return {\n        serialize (data) {\n            const bytes = serialization.serialize(data);\n            (0,_limit_io_js__WEBPACK_IMPORTED_MODULE_0__.assertWriteMaxBytes)(limitOptions.writeMaxBytes, bytes.byteLength);\n            return bytes;\n        },\n        parse (data) {\n            (0,_limit_io_js__WEBPACK_IMPORTED_MODULE_0__.assertReadMaxBytes)(limitOptions.readMaxBytes, data.byteLength, true);\n            return serialization.parse(data);\n        }\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf binary format.\n */ function createBinarySerialization(messageType, options) {\n    return {\n        parse (data) {\n            try {\n                return messageType.fromBinary(data, options);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`parse binary: ${m}`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.Internal);\n            }\n        },\n        serialize (data) {\n            try {\n                return data.toBinary(options);\n            } catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError(`serialize binary: ${m}`, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.Internal);\n            }\n        }\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf canonical JSON encoding.\n *\n * By default, unknown fields are ignored.\n */ function createJsonSerialization(messageType, options) {\n    var _a, _b;\n    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();\n    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();\n    const o = getJsonOptions(options);\n    return {\n        parse (data) {\n            try {\n                const json = textDecoder.decode(data);\n                return messageType.fromJsonString(json, o);\n            } catch (e) {\n                throw _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError.from(e, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.InvalidArgument);\n            }\n        },\n        serialize (data) {\n            try {\n                const json = data.toJsonString(o);\n                return textEncoder.encode(json);\n            } catch (e) {\n                throw _connect_error_js__WEBPACK_IMPORTED_MODULE_1__.ConnectError.from(e, _code_js__WEBPACK_IMPORTED_MODULE_2__.Code.Internal);\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/serialization.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/signals.js":
/*!***********************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/signals.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeadlineSignal: () => (/* binding */ createDeadlineSignal),\n/* harmony export */   createLinkedAbortController: () => (/* binding */ createLinkedAbortController),\n/* harmony export */   getAbortSignalReason: () => (/* binding */ getAbortSignalReason)\n/* harmony export */ });\n/* harmony import */ var _connect_error_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../connect-error.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/connect-error.js\");\n/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../code.js */ \"(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/code.js\");\n// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Create an AbortController that is automatically aborted if one of the given\n * signals is aborted.\n *\n * For convenience, the linked AbortSignals can be undefined.\n *\n * If the controller or any of the signals is aborted, all event listeners are\n * removed.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createLinkedAbortController(...signals) {\n    const controller = new AbortController();\n    const sa = signals.filter((s)=>s !== undefined).concat(controller.signal);\n    for (const signal of sa){\n        if (signal.aborted) {\n            onAbort.apply(signal);\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n        if (!controller.signal.aborted) {\n            controller.abort(getAbortSignalReason(this));\n        }\n        for (const signal of sa){\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n    return controller;\n}\n/**\n * Create a deadline signal. The returned object contains an AbortSignal, but\n * also a cleanup function to stop the timer, which must be called once the\n * calling code is no longer interested in the signal.\n *\n * Ideally, we would simply use AbortSignal.timeout(), but it is not widely\n * available yet.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function createDeadlineSignal(timeoutMs) {\n    const controller = new AbortController();\n    const listener = ()=>{\n        controller.abort(new _connect_error_js__WEBPACK_IMPORTED_MODULE_0__.ConnectError(\"the operation timed out\", _code_js__WEBPACK_IMPORTED_MODULE_1__.Code.DeadlineExceeded));\n    };\n    let timeoutId;\n    if (timeoutMs !== undefined) {\n        if (timeoutMs <= 0) listener();\n        else timeoutId = setTimeout(listener, timeoutMs);\n    }\n    return {\n        signal: controller.signal,\n        cleanup: ()=>clearTimeout(timeoutId)\n    };\n}\n/**\n * Returns the reason why an AbortSignal was aborted. Returns undefined if the\n * signal has not been aborted.\n *\n * The property AbortSignal.reason is not widely available. This function\n * returns an AbortError if the signal is aborted, but reason is undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */ function getAbortSignalReason(signal) {\n    if (!signal.aborted) {\n        return undefined;\n    }\n    if (signal.reason !== undefined) {\n        return signal.reason;\n    }\n    // AbortSignal.reason is available in Node.js v16, v18, and later,\n    // and in all browsers since early 2022.\n    const e = new Error(\"This operation was aborted\");\n    e.name = \"AbortError\";\n    return e;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bjb25uZWN0cnBjK2Nvbm5lY3RAMS43LjBfQGJ1ZmJ1aWxkK3Byb3RvYnVmQDEuMTAuMS9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9zaWduYWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2tCO0FBQ2pCO0FBQ2xDOzs7Ozs7Ozs7O0NBVUMsR0FDTSxTQUFTRSw0QkFBNEIsR0FBR0MsT0FBTztJQUNsRCxNQUFNQyxhQUFhLElBQUlDO0lBQ3ZCLE1BQU1DLEtBQUtILFFBQVFJLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQSxNQUFNQyxXQUFXQyxNQUFNLENBQUNOLFdBQVdPLE1BQU07SUFDMUUsS0FBSyxNQUFNQSxVQUFVTCxHQUFJO1FBQ3JCLElBQUlLLE9BQU9DLE9BQU8sRUFBRTtZQUNoQkMsUUFBUUMsS0FBSyxDQUFDSDtZQUNkO1FBQ0o7UUFDQUEsT0FBT0ksZ0JBQWdCLENBQUMsU0FBU0Y7SUFDckM7SUFDQSxTQUFTQTtRQUNMLElBQUksQ0FBQ1QsV0FBV08sTUFBTSxDQUFDQyxPQUFPLEVBQUU7WUFDNUJSLFdBQVdZLEtBQUssQ0FBQ0MscUJBQXFCLElBQUk7UUFDOUM7UUFDQSxLQUFLLE1BQU1OLFVBQVVMLEdBQUk7WUFDckJLLE9BQU9PLG1CQUFtQixDQUFDLFNBQVNMO1FBQ3hDO0lBQ0o7SUFDQSxPQUFPVDtBQUNYO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU2UscUJBQXFCQyxTQUFTO0lBQzFDLE1BQU1oQixhQUFhLElBQUlDO0lBQ3ZCLE1BQU1nQixXQUFXO1FBQ2JqQixXQUFXWSxLQUFLLENBQUMsSUFBSWhCLDJEQUFZQSxDQUFDLDJCQUEyQkMsMENBQUlBLENBQUNxQixnQkFBZ0I7SUFDdEY7SUFDQSxJQUFJQztJQUNKLElBQUlILGNBQWNYLFdBQVc7UUFDekIsSUFBSVcsYUFBYSxHQUNiQzthQUVBRSxZQUFZQyxXQUFXSCxVQUFVRDtJQUN6QztJQUNBLE9BQU87UUFDSFQsUUFBUVAsV0FBV08sTUFBTTtRQUN6QmMsU0FBUyxJQUFNQyxhQUFhSDtJQUNoQztBQUNKO0FBQ0E7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTTixxQkFBcUJOLE1BQU07SUFDdkMsSUFBSSxDQUFDQSxPQUFPQyxPQUFPLEVBQUU7UUFDakIsT0FBT0g7SUFDWDtJQUNBLElBQUlFLE9BQU9nQixNQUFNLEtBQUtsQixXQUFXO1FBQzdCLE9BQU9FLE9BQU9nQixNQUFNO0lBQ3hCO0lBQ0Esa0VBQWtFO0lBQ2xFLHdDQUF3QztJQUN4QyxNQUFNQyxJQUFJLElBQUlDLE1BQU07SUFDcEJELEVBQUVFLElBQUksR0FBRztJQUNULE9BQU9GO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGNvbm5lY3RycGMrY29ubmVjdEAxLjcuMF9AYnVmYnVpbGQrcHJvdG9idWZAMS4xMC4xL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL3NpZ25hbHMuanM/ZTM2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4uL2Nvbm5lY3QtZXJyb3IuanNcIjtcbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgYW4gQWJvcnRDb250cm9sbGVyIHRoYXQgaXMgYXV0b21hdGljYWxseSBhYm9ydGVkIGlmIG9uZSBvZiB0aGUgZ2l2ZW5cbiAqIHNpZ25hbHMgaXMgYWJvcnRlZC5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHRoZSBsaW5rZWQgQWJvcnRTaWduYWxzIGNhbiBiZSB1bmRlZmluZWQuXG4gKlxuICogSWYgdGhlIGNvbnRyb2xsZXIgb3IgYW55IG9mIHRoZSBzaWduYWxzIGlzIGFib3J0ZWQsIGFsbCBldmVudCBsaXN0ZW5lcnMgYXJlXG4gKiByZW1vdmVkLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlua2VkQWJvcnRDb250cm9sbGVyKC4uLnNpZ25hbHMpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IHNhID0gc2lnbmFscy5maWx0ZXIoKHMpID0+IHMgIT09IHVuZGVmaW5lZCkuY29uY2F0KGNvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmb3IgKGNvbnN0IHNpZ25hbCBvZiBzYSkge1xuICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIG9uQWJvcnQuYXBwbHkoc2lnbmFsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQWJvcnQoKSB7XG4gICAgICAgIGlmICghY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydChnZXRBYm9ydFNpZ25hbFJlYXNvbih0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBzaWduYWwgb2Ygc2EpIHtcbiAgICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xsZXI7XG59XG4vKipcbiAqIENyZWF0ZSBhIGRlYWRsaW5lIHNpZ25hbC4gVGhlIHJldHVybmVkIG9iamVjdCBjb250YWlucyBhbiBBYm9ydFNpZ25hbCwgYnV0XG4gKiBhbHNvIGEgY2xlYW51cCBmdW5jdGlvbiB0byBzdG9wIHRoZSB0aW1lciwgd2hpY2ggbXVzdCBiZSBjYWxsZWQgb25jZSB0aGVcbiAqIGNhbGxpbmcgY29kZSBpcyBubyBsb25nZXIgaW50ZXJlc3RlZCBpbiB0aGUgc2lnbmFsLlxuICpcbiAqIElkZWFsbHksIHdlIHdvdWxkIHNpbXBseSB1c2UgQWJvcnRTaWduYWwudGltZW91dCgpLCBidXQgaXQgaXMgbm90IHdpZGVseVxuICogYXZhaWxhYmxlIHlldC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlYWRsaW5lU2lnbmFsKHRpbWVvdXRNcykge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQobmV3IENvbm5lY3RFcnJvcihcInRoZSBvcGVyYXRpb24gdGltZWQgb3V0XCIsIENvZGUuRGVhZGxpbmVFeGNlZWRlZCkpO1xuICAgIH07XG4gICAgbGV0IHRpbWVvdXRJZDtcbiAgICBpZiAodGltZW91dE1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXRNcyA8PSAwKVxuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChsaXN0ZW5lciwgdGltZW91dE1zKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgY2xlYW51cDogKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCksXG4gICAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcmVhc29uIHdoeSBhbiBBYm9ydFNpZ25hbCB3YXMgYWJvcnRlZC4gUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlXG4gKiBzaWduYWwgaGFzIG5vdCBiZWVuIGFib3J0ZWQuXG4gKlxuICogVGhlIHByb3BlcnR5IEFib3J0U2lnbmFsLnJlYXNvbiBpcyBub3Qgd2lkZWx5IGF2YWlsYWJsZS4gVGhpcyBmdW5jdGlvblxuICogcmV0dXJucyBhbiBBYm9ydEVycm9yIGlmIHRoZSBzaWduYWwgaXMgYWJvcnRlZCwgYnV0IHJlYXNvbiBpcyB1bmRlZmluZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBYm9ydFNpZ25hbFJlYXNvbihzaWduYWwpIHtcbiAgICBpZiAoIXNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzaWduYWwucmVhc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHNpZ25hbC5yZWFzb247XG4gICAgfVxuICAgIC8vIEFib3J0U2lnbmFsLnJlYXNvbiBpcyBhdmFpbGFibGUgaW4gTm9kZS5qcyB2MTYsIHYxOCwgYW5kIGxhdGVyLFxuICAgIC8vIGFuZCBpbiBhbGwgYnJvd3NlcnMgc2luY2UgZWFybHkgMjAyMi5cbiAgICBjb25zdCBlID0gbmV3IEVycm9yKFwiVGhpcyBvcGVyYXRpb24gd2FzIGFib3J0ZWRcIik7XG4gICAgZS5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgcmV0dXJuIGU7XG59XG4iXSwibmFtZXMiOlsiQ29ubmVjdEVycm9yIiwiQ29kZSIsImNyZWF0ZUxpbmtlZEFib3J0Q29udHJvbGxlciIsInNpZ25hbHMiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwic2EiLCJmaWx0ZXIiLCJzIiwidW5kZWZpbmVkIiwiY29uY2F0Iiwic2lnbmFsIiwiYWJvcnRlZCIsIm9uQWJvcnQiLCJhcHBseSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhYm9ydCIsImdldEFib3J0U2lnbmFsUmVhc29uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNyZWF0ZURlYWRsaW5lU2lnbmFsIiwidGltZW91dE1zIiwibGlzdGVuZXIiLCJEZWFkbGluZUV4Y2VlZGVkIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImNsZWFudXAiLCJjbGVhclRpbWVvdXQiLCJyZWFzb24iLCJlIiwiRXJyb3IiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@connectrpc+connect@1.7.0_@bufbuild+protobuf@1.10.1/node_modules/@connectrpc/connect/dist/esm/protocol/signals.js\n");

/***/ })

};
;